{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/projects/hakaton/frontend/src/app/map/MapView.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useEffect } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup, useMap } from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport { Enterprise } from '../types/enterprise';\r\n\r\n// Фикс для иконок Leaflet в Next.js\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ndelete (L.Icon.Default.prototype as any)._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\r\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\r\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',\r\n});\r\n\r\n// Цвета для разных отраслей\r\nconst getIndustryColor = (industry: string): string => {\r\n  const colors: Record<string, string> = {\r\n    'Машиностроение': '#3B82F6',\r\n    'Пищевая промышленность': '#10B981',\r\n    'Химическая промышленность': '#F59E0B',\r\n    'Текстильная промышленность': '#EC4899',\r\n    'Металлургия': '#6B7280',\r\n    'Электроника': '#8B5CF6',\r\n    'Строительные материалы': '#EF4444',\r\n    'Фармацевтика': '#14B8A6',\r\n    'Автомобилестроение': '#F97316',\r\n    'Полиграфия': '#06B6D4',\r\n    'Другое': '#9CA3AF'\r\n  };\r\n\r\n  return colors[industry] || '#9CA3AF';\r\n};\r\n\r\n// Функция для расчета прибыльности предприятия\r\nconst calculateProfitability = (enterprise: Enterprise): number => {\r\n  // Проверяем на деление на ноль или некорректные данные\r\n  if (!enterprise.revenue || enterprise.revenue <= 0 || !enterprise.taxesPaid || enterprise.taxesPaid < 0) {\r\n    return 0;\r\n  }\r\n\r\n  // Доля налогов от выручки\r\n  const taxRate = enterprise.taxesPaid / enterprise.revenue;\r\n\r\n  // Предполагаемый диапазон налоговой нагрузки от 5% до 25%\r\n  const minTaxRate = 0.05;\r\n  const maxTaxRate = 0.25;\r\n\r\n  // Нормализуем в диапазон [0, 1]\r\n  const normalizedTaxRate = Math.max(0, Math.min(1, (taxRate - minTaxRate) / (maxTaxRate - minTaxRate)));\r\n\r\n  // Инверсия: больше налогов = меньше рентабельность\r\n  // Базовая рентабельность от 5% до 30%\r\n  const baseRentability = (1 - normalizedTaxRate) * 0.25 + 0.05;\r\n\r\n  // Добавляем детерминированную вариацию на основе характеристик предприятия\r\n  // Используем хеш от ID для стабильного \"рандома\"\r\n  const hash = enterprise.id.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\r\n  const pseudoRandom = (hash % 100) / 100; // 0-1\r\n\r\n  // Размер предприятия влияет на эффективность (логарифмически)\r\n  const sizeFactor = Math.log(enterprise.employees + 1) / Math.log(1000); // 0-1 для 1-1000 сотрудников\r\n\r\n  // Отраслевой модификатор\r\n  const industryModifiers: Record<string, number> = {\r\n    'Информационные технологии': 0.15,\r\n    'Фармацевтика': 0.12,\r\n    'Электроника': 0.08,\r\n    'Машиностроение': 0.05,\r\n    'Химическая промышленность': 0.03,\r\n    'Автомобилестроение': 0.02,\r\n    'Металлургия': 0.0,\r\n    'Строительные материалы': -0.02,\r\n    'Пищевая промышленность': -0.03,\r\n    'Текстильная промышленность': -0.05,\r\n    'Полиграфия': -0.08,\r\n    'Сельское хозяйство': -0.10\r\n  };\r\n\r\n  const industryBonus = industryModifiers[enterprise.industry] || 0;\r\n\r\n  // Итоговая рентабельность с учетом всех факторов\r\n  let finalRentability = baseRentability\r\n    + (pseudoRandom - 0.5) * 0.1  // ±5% случайная вариация\r\n    + sizeFactor * 0.05           // до +5% за размер\r\n    + industryBonus;              // отраслевой модификатор\r\n\r\n  // Ограничиваем разумными пределами (0-40%)\r\n  finalRentability = Math.max(0.01, Math.min(0.40, finalRentability));\r\n\r\n  // Отладочная информация (редко)\r\n  if (Math.random() < 0.03) {\r\n    console.log('Рентабельность для:', enterprise.name, {\r\n      taxRate: (taxRate * 100).toFixed(1) + '%',\r\n      baseRentability: (baseRentability * 100).toFixed(1) + '%',\r\n      pseudoRandom: pseudoRandom.toFixed(2),\r\n      sizeFactor: sizeFactor.toFixed(2),\r\n      industryBonus: (industryBonus * 100).toFixed(1) + '%',\r\n      final: (finalRentability * 100).toFixed(1) + '%'\r\n    });\r\n  }\r\n\r\n  return finalRentability;\r\n};\r\n\r\n// Функция для преобразования HEX в RGB\r\nconst hexToRgb = (hex: string): { r: number; g: number; b: number } => {\r\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n  return result ? {\r\n    r: parseInt(result[1], 16),\r\n    g: parseInt(result[2], 16),\r\n    b: parseInt(result[3], 16)\r\n  } : { r: 0, g: 0, b: 0 };\r\n};\r\n\r\n// Функция для создания градиентного цвета на основе прибыльности\r\nconst getProfitabilityColor = (\r\n  enterprise: Enterprise,\r\n  baseColor: string,\r\n  minProfitability: number,\r\n  maxProfitability: number\r\n): string => {\r\n  const profitability = calculateProfitability(enterprise);\r\n\r\n  // Нормализуем прибыльность в диапазон [0, 1]\r\n  const normalizedProfitability = maxProfitability > minProfitability\r\n    ? (profitability - minProfitability) / (maxProfitability - minProfitability)\r\n    : 0.5;\r\n\r\n  const baseRgb = hexToRgb(baseColor);\r\n\r\n  // Создаем градиент от светло-серого (низкая прибыльность) до яркого цвета отрасли (высокая прибыльность)\r\n  const lowProfitColor = { r: 200, g: 200, b: 200 }; // Светло-серый\r\n\r\n  const r = Math.round(lowProfitColor.r + (baseRgb.r - lowProfitColor.r) * normalizedProfitability);\r\n  const g = Math.round(lowProfitColor.g + (baseRgb.g - lowProfitColor.g) * normalizedProfitability);\r\n  const b = Math.round(lowProfitColor.b + (baseRgb.b - lowProfitColor.b) * normalizedProfitability);\r\n\r\n  return `rgb(${r}, ${g}, ${b})`;\r\n};\r\n\r\n// Создание кастомной иконки для маркера\r\nconst createCustomIcon = (\r\n  enterprise: Enterprise,\r\n  selectedIndustries: string[] = [],\r\n  allEnterprises: Enterprise[] = []\r\n) => {\r\n  const baseColor = getIndustryColor(enterprise.industry);\r\n  let markerColor = baseColor;\r\n\r\n  // Если выбрана только одна отрасль и предприятие относится к ней, используем градиент\r\n  if (selectedIndustries.length === 1 && selectedIndustries.includes(enterprise.industry)) {\r\n    const industryEnterprises = allEnterprises.filter(e => e.industry === enterprise.industry);\r\n\r\n    if (industryEnterprises.length > 1) {\r\n      const profitabilities = industryEnterprises.map(calculateProfitability);\r\n      const minProfitability = Math.min(...profitabilities);\r\n      const maxProfitability = Math.max(...profitabilities);\r\n\r\n      markerColor = getProfitabilityColor(enterprise, baseColor, minProfitability, maxProfitability);\r\n    }\r\n  }\r\n\r\n  return L.divIcon({\r\n    className: 'custom-marker',\r\n    html: `\r\n      <div style=\"\r\n        background-color: ${markerColor};\r\n        width: 30px;\r\n        height: 30px;\r\n        border-radius: 50% 50% 50% 0;\r\n        transform: rotate(-45deg);\r\n        border: 3px solid white;\r\n        box-shadow: 0 2px 8px rgba(0,0,0,0.3);\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n      \">\r\n        <div style=\"\r\n          width: 8px;\r\n          height: 8px;\r\n          background-color: white;\r\n          border-radius: 50%;\r\n          transform: rotate(45deg);\r\n        \"></div>\r\n      </div>\r\n    `,\r\n    iconSize: [30, 30],\r\n    iconAnchor: [15, 30],\r\n    popupAnchor: [0, -30]\r\n  });\r\n};\r\n\r\n// Компонент для автоматического подстраивания границ карты\r\nfunction MapBoundsUpdater({ enterprises }: { enterprises: Enterprise[] }) {\r\n  const map = useMap();\r\n\r\n  useEffect(() => {\r\n    if (enterprises.length > 0) {\r\n      const bounds = enterprises\r\n        .filter(e => e.latitude && e.longitude)\r\n        .map(e => [e.latitude!, e.longitude!] as [number, number]);\r\n\r\n      if (bounds.length > 0) {\r\n        map.fitBounds(bounds, { padding: [50, 50] });\r\n      }\r\n    }\r\n  }, [enterprises, map]);\r\n\r\n  return null;\r\n}\r\n\r\n// Компонент легенды для градиентной раскраски\r\nfunction ProfitabilityLegend({ selectedIndustries, enterprises }: {\r\n  selectedIndustries: string[];\r\n  enterprises: Enterprise[]\r\n}) {\r\n  // Показываем легенду только когда выбрана одна отрасль\r\n  if (selectedIndustries.length !== 1) return null;\r\n\r\n  const selectedIndustry = selectedIndustries[0];\r\n  const industryEnterprises = enterprises.filter(e => e.industry === selectedIndustry);\r\n\r\n  if (industryEnterprises.length <= 1) return null;\r\n\r\n  const profitabilities = industryEnterprises.map(calculateProfitability);\r\n  const minProfitability = Math.min(...profitabilities);\r\n  const maxProfitability = Math.max(...profitabilities);\r\n  const baseColor = getIndustryColor(selectedIndustry);\r\n\r\n  const legendSteps = 5;\r\n  const stepSize = (maxProfitability - minProfitability) / (legendSteps - 1);\r\n\r\n  return (\r\n    <div className=\"absolute bottom-4 left-4 bg-white rounded-lg shadow-lg p-4 z-10\">\r\n      <h4 className=\"text-sm font-semibold text-gray-900 mb-2\">\r\n        Рентабельность в отрасли `{selectedIndustry}`\r\n      </h4>\r\n      <div className=\"space-y-1\">\r\n        {Array.from({ length: legendSteps }, (_, i) => {\r\n          const profitability = minProfitability + (stepSize * i);\r\n          const normalizedProfitability = (profitability - minProfitability) / (maxProfitability - minProfitability);\r\n          const baseRgb = hexToRgb(baseColor);\r\n          const lowProfitColor = { r: 200, g: 200, b: 200 };\r\n\r\n          const r = Math.round(lowProfitColor.r + (baseRgb.r - lowProfitColor.r) * normalizedProfitability);\r\n          const g = Math.round(lowProfitColor.g + (baseRgb.g - lowProfitColor.g) * normalizedProfitability);\r\n          const b = Math.round(lowProfitColor.b + (baseRgb.b - lowProfitColor.b) * normalizedProfitability);\r\n\r\n          const color = `rgb(${r}, ${g}, ${b})`;\r\n\r\n          return (\r\n            <div key={i} className=\"flex items-center space-x-2 text-xs\">\r\n              <div\r\n                className=\"w-4 h-4 rounded-full border border-white shadow-sm\"\r\n                style={{ backgroundColor: color }}\r\n              />\r\n              <span className=\"text-gray-600\">\r\n                {(profitability * 100).toFixed(1)}%\r\n              </span>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <div className=\"mt-2 pt-2 border-t border-gray-200 text-xs text-gray-500\">\r\n        Выберите одну отрасль для<br/>градиентной раскраски\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\ninterface MapViewProps {\r\n  enterprises: Enterprise[];\r\n  onMarkerClick: (enterprise: Enterprise) => void;\r\n  selectedIndustries?: string[];\r\n}\r\n\r\nexport default function MapView({ enterprises, onMarkerClick, selectedIndustries = [] }: MapViewProps) {\r\n  // Центр Москвы (Кремль)\r\n  const moscowCenter: [number, number] = [55.7558, 37.6173];\r\n\r\n  return (\r\n    <div className=\"relative h-full w-full\">\r\n      <MapContainer\r\n        center={moscowCenter}\r\n        zoom={10}\r\n        style={{ height: '100%', width: '100%' }}\r\n        className=\"z-0\"\r\n      >\r\n        <TileLayer\r\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n\r\n        <MapBoundsUpdater enterprises={enterprises} />\r\n\r\n        {enterprises.map((enterprise) => {\r\n          if (!enterprise.latitude || !enterprise.longitude ||\r\n              isNaN(enterprise.latitude) || isNaN(enterprise.longitude)) {\r\n            return null;\r\n          }\r\n\r\n          // Создаем уникальный ключ, который изменяется при смене режима градиента\r\n          const isGradientMode = selectedIndustries.length === 1 && selectedIndustries.includes(enterprise.industry);\r\n          const markerKey = `${enterprise.id}-${isGradientMode ? 'gradient' : 'normal'}-${selectedIndustries.join(',')}`;\r\n\r\n          return (\r\n            <Marker\r\n              key={markerKey}\r\n              position={[enterprise.latitude, enterprise.longitude]}\r\n              icon={createCustomIcon(enterprise, selectedIndustries, enterprises)}\r\n              eventHandlers={{\r\n                click: () => onMarkerClick(enterprise)\r\n              }}\r\n            >\r\n              <Popup>\r\n                <div className=\"min-w-[200px]\">\r\n                  <h3 className=\"font-bold text-gray-900 mb-2\">{enterprise.name}</h3>\r\n                  <div className=\"space-y-1 text-sm\">\r\n                    <p className=\"text-gray-600\">\r\n                      <span className=\"font-medium\">Отрасль:</span> {enterprise.industry}\r\n                    </p>\r\n                    <p className=\"text-gray-600\">\r\n                      <span className=\"font-medium\">Регион:</span> {enterprise.region}\r\n                    </p>\r\n                    <p className=\"text-gray-600\">\r\n                      <span className=\"font-medium\">Адрес:</span> {enterprise.contactInfo.address}\r\n                    </p>\r\n                    <p className=\"text-gray-600\">\r\n                      <span className=\"font-medium\">Сотрудники:</span> {enterprise.employees.toLocaleString('ru-RU')}\r\n                    </p>\r\n                    <p className=\"text-gray-600\">\r\n                      <span className=\"font-medium\">Выручка:</span> {enterprise.revenue.toLocaleString('ru-RU')} ₽\r\n                    </p>\r\n                    <p className=\"text-gray-600\">\r\n                      <span className=\"font-medium\">Рентабельность:</span> {(calculateProfitability(enterprise) * 100).toFixed(1)}%\r\n                    </p>\r\n                  </div>\r\n                  <button\r\n                    onClick={() => onMarkerClick(enterprise)}\r\n                    className=\"mt-3 w-full bg-blue-600 text-white px-3 py-1.5 rounded text-sm font-medium hover:bg-blue-700 transition-colors\"\r\n                  >\r\n                    Подробнее\r\n                  </button>\r\n                </div>\r\n              </Popup>\r\n            </Marker>\r\n          );\r\n        })}\r\n      </MapContainer>\r\n\r\n      {/* Легенда для градиентной раскраски */}\r\n      <ProfitabilityLegend\r\n        selectedIndustries={selectedIndustries}\r\n        enterprises={enterprises}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}