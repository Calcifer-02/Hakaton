{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/projects/hakaton/frontend/src/app/lib/data-utils.ts"],"sourcesContent":["import * as XLSX from 'xlsx';\r\nimport Papa from 'papaparse';\r\nimport { Enterprise, UploadResult } from '../types/enterprise';\r\n\r\n// Московские регионы\r\nexport const MOSCOW_REGIONS = [\r\n  'Центральный',\r\n  'Северный',\r\n  'Северо-Восточный',\r\n  'Восточный',\r\n  'Юго-Восточный',\r\n  'Южный',\r\n  'Юго-Западный',\r\n  'Западный',\r\n  'Северо-Западный',\r\n  'Новомосковский',\r\n  'Троицкий'\r\n];\r\n\r\n// Основные отрасли промышленности\r\nexport const INDUSTRIES = [\r\n  'Машиностроение',\r\n  'Пищевая промышленность',\r\n  'Химическая промышленность',\r\n  'Текстильная промышленность',\r\n  'Металлургия',\r\n  'Электроника',\r\n  'Строительные материалы',\r\n  'Фармацевтика',\r\n  'Автомобилестроение',\r\n  'Полиграфия',\r\n  'Информационные технологии',\r\n  'Сельское хозяйство',\r\n  'Другое'\r\n];\r\n\r\n// Валидация данных предприятия\r\nexport const validateEnterprise = (data: Record<string, unknown>): { isValid: boolean; errors: string[] } => {\r\n  const errors: string[] = [];\r\n\r\n  if (!data.name || typeof data.name !== 'string') {\r\n    errors.push('Некорректное название предприятия');\r\n  }\r\n\r\n  if (!data.industry || !INDUSTRIES.includes(data.industry as string)) {\r\n    errors.push('Некорректная отрасль');\r\n  }\r\n\r\n  if (!data.region || !MOSCOW_REGIONS.includes(data.region as string)) {\r\n    errors.push('Некорректный регион');\r\n  }\r\n\r\n  if (!data.employees || Number(data.employees) < 0) {\r\n    errors.push('Некорректное количество сотрудников');\r\n  }\r\n\r\n  if (!data.revenue || Number(data.revenue) < 0) {\r\n    errors.push('Некорректная выручка');\r\n  }\r\n\r\n  const contactInfo = data.contactInfo as Record<string, unknown> | undefined;\r\n  if (!contactInfo?.address) {\r\n    errors.push('Отсутствует адрес');\r\n  }\r\n\r\n  return {\r\n    isValid: errors.length === 0,\r\n    errors\r\n  };\r\n};\r\n\r\n// Парсинг CSV файла\r\nexport const parseCSV = (file: File): Promise<UploadResult> => {\r\n  return new Promise((resolve) => {\r\n    Papa.parse(file, {\r\n      header: true,\r\n      complete: (results) => {\r\n        const enterprises: Enterprise[] = [];\r\n        const errors: string[] = [];\r\n        let errorCount = 0;\r\n\r\n        results.data.forEach((row: unknown, index: number) => {\r\n          const rowData = row as Record<string, unknown>;\r\n          const validation = validateEnterprise(rowData);\r\n\r\n          if (validation.isValid) {\r\n            const enterprise: Enterprise = {\r\n              id: crypto.randomUUID(),\r\n              name: String(rowData.name),\r\n              industry: String(rowData.industry),\r\n              region: String(rowData.region),\r\n              employees: parseInt(String(rowData.employees)) || 0,\r\n              revenue: parseFloat(String(rowData.revenue)) || 0,\r\n              taxesPaid: parseFloat(String(rowData.taxesPaid)) || 0,\r\n              registrationDate: new Date(String(rowData.registrationDate) || Date.now()),\r\n              lastUpdated: new Date(),\r\n              status: (rowData.status as 'active' | 'inactive' | 'suspended') || 'active',\r\n              contactInfo: {\r\n                address: String(rowData.address),\r\n                phone: String(rowData.phone || ''),\r\n                email: String(rowData.email || '')\r\n              }\r\n            };\r\n            enterprises.push(enterprise);\r\n          } else {\r\n            errorCount++;\r\n            errors.push(`Строка ${index + 1}: ${validation.errors.join(', ')}`);\r\n          }\r\n        });\r\n\r\n        resolve({\r\n          success: true,\r\n          message: `Обработано ${enterprises.length} записей из ${results.data.length}`,\r\n          processedCount: enterprises.length,\r\n          errorCount,\r\n          errors,\r\n          data: enterprises\r\n        });\r\n      },\r\n      error: (error) => {\r\n        resolve({\r\n          success: false,\r\n          message: `Ошибка парсинга CSV: ${error.message}`,\r\n          processedCount: 0,\r\n          errorCount: 1,\r\n          errors: [error.message]\r\n        });\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n// Парсинг Excel файла\r\nexport const parseExcel = (file: File): Promise<UploadResult> => {\r\n  return new Promise((resolve) => {\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = (e) => {\r\n      try {\r\n        const data = e.target?.result;\r\n        const workbook = XLSX.read(data, { type: 'binary' });\r\n        const sheetName = workbook.SheetNames[0];\r\n        const worksheet = workbook.Sheets[sheetName];\r\n        const jsonData = XLSX.utils.sheet_to_json(worksheet);\r\n\r\n        const enterprises: Enterprise[] = [];\r\n        const errors: string[] = [];\r\n        let errorCount = 0;\r\n\r\n        jsonData.forEach((row: unknown, index: number) => {\r\n          const rowData = row as Record<string, unknown>;\r\n          const validation = validateEnterprise(rowData);\r\n\r\n          if (validation.isValid) {\r\n            const enterprise: Enterprise = {\r\n              id: crypto.randomUUID(),\r\n              name: String(rowData.name),\r\n              industry: String(rowData.industry),\r\n              region: String(rowData.region),\r\n              employees: parseInt(String(rowData.employees)) || 0,\r\n              revenue: parseFloat(String(rowData.revenue)) || 0,\r\n              taxesPaid: parseFloat(String(rowData.taxesPaid)) || 0,\r\n              registrationDate: new Date(String(rowData.registrationDate) || Date.now()),\r\n              lastUpdated: new Date(),\r\n              status: (rowData.status as 'active' | 'inactive' | 'suspended') || 'active',\r\n              contactInfo: {\r\n                address: String(rowData.address),\r\n                phone: String(rowData.phone || ''),\r\n                email: String(rowData.email || '')\r\n              }\r\n            };\r\n            enterprises.push(enterprise);\r\n          } else {\r\n            errorCount++;\r\n            errors.push(`Строка ${index + 1}: ${validation.errors.join(', ')}`);\r\n          }\r\n        });\r\n\r\n        resolve({\r\n          success: true,\r\n          message: `Обработано ${enterprises.length} записей из ${jsonData.length}`,\r\n          processedCount: enterprises.length,\r\n          errorCount,\r\n          errors,\r\n          data: enterprises\r\n        });\r\n      } catch (error) {\r\n        resolve({\r\n          success: false,\r\n          message: `Ошибка парсинга Excel: ${(error as Error).message}`,\r\n          processedCount: 0,\r\n          errorCount: 1,\r\n          errors: [(error as Error).message]\r\n        });\r\n      }\r\n    };\r\n\r\n    reader.readAsBinaryString(file);\r\n  });\r\n};\r\n\r\n// Форматирование чисел\r\nexport const formatNumber = (num: number): string => {\r\n  return new Intl.NumberFormat('ru-RU').format(num);\r\n};\r\n\r\n// Форматирование валюты\r\nexport const formatCurrency = (amount: number): string => {\r\n  return new Intl.NumberFormat('ru-RU', {\r\n    style: 'currency',\r\n    currency: 'RUB',\r\n    maximumFractionDigits: 0,\r\n    minimumFractionDigits: 0\r\n  }).format(amount);\r\n};\r\n\r\n// Компактное форматирование валюты для карточек (без пробелов, с сокращениями)\r\nexport const formatCurrencyCompact = (amount: number): string => {\r\n  if (amount >= 1_000_000_000) {\r\n    return `${(amount / 1_000_000_000).toFixed(1)}млрд₽`;\r\n  } else if (amount >= 1_000_000) {\r\n    return `${(amount / 1_000_000).toFixed(1)}млн₽`;\r\n  } else if (amount >= 1_000) {\r\n    return `${(amount / 1_000).toFixed(0)}тыс₽`;\r\n  }\r\n  return `${amount}₽`;\r\n};\r\n\r\n// Генерация случайных данных для демонстрации\r\nexport const generateSampleData = (count: number = 100): Enterprise[] => {\r\n  const sampleData: Enterprise[] = [];\r\n\r\n  for (let i = 0; i < count; i++) {\r\n    const enterprise: Enterprise = {\r\n      id: crypto.randomUUID(),\r\n      name: `Предприятие ${i + 1}`,\r\n      industry: INDUSTRIES[Math.floor(Math.random() * INDUSTRIES.length)],\r\n      region: MOSCOW_REGIONS[Math.floor(Math.random() * MOSCOW_REGIONS.length)],\r\n      employees: Math.floor(Math.random() * 1000) + 10,\r\n      revenue: Math.floor(Math.random() * 100000000) + 1000000,\r\n      taxesPaid: Math.floor(Math.random() * 10000000) + 100000,\r\n      registrationDate: new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000 * 5),\r\n      lastUpdated: new Date(),\r\n      status: Math.random() > 0.1 ? 'active' : Math.random() > 0.5 ? 'inactive' : 'suspended',\r\n      contactInfo: {\r\n        address: `Москва, улица ${i + 1}, дом ${Math.floor(Math.random() * 100) + 1}`,\r\n        phone: `+7-495-${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 90) + 10}`,\r\n        email: `contact${i + 1}@enterprise.ru`\r\n      }\r\n    };\r\n    sampleData.push(enterprise);\r\n  }\r\n\r\n  return sampleData;\r\n};\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 259, "column": 0}, "map": {"version":3,"sources":["file:///C:/projects/hakaton/frontend/src/app/lib/analytics.ts"],"sourcesContent":["import { Enterprise, IndustryStats, RegionStats, DataQuality, AnalyticsFilters } from '../types/enterprise';\r\n\r\n// Аналитика по отраслям\r\nexport const calculateIndustryStats = (enterprises: Enterprise[]): IndustryStats[] => {\r\n  const industryMap = new Map<string, { count: number; totalRevenue: number; totalEmployees: number }>();\r\n\r\n  enterprises.forEach(enterprise => {\r\n    const existing = industryMap.get(enterprise.industry) || { count: 0, totalRevenue: 0, totalEmployees: 0 };\r\n    industryMap.set(enterprise.industry, {\r\n      count: existing.count + 1,\r\n      totalRevenue: existing.totalRevenue + enterprise.revenue,\r\n      totalEmployees: existing.totalEmployees + enterprise.employees\r\n    });\r\n  });\r\n\r\n  return Array.from(industryMap.entries()).map(([industry, stats]) => ({\r\n    industry,\r\n    count: stats.count,\r\n    totalRevenue: stats.totalRevenue,\r\n    averageEmployees: Math.round(stats.totalEmployees / stats.count)\r\n  }));\r\n};\r\n\r\n// Аналитика по регионам\r\nexport const calculateRegionStats = (enterprises: Enterprise[]): RegionStats[] => {\r\n  const regionMap = new Map<string, { count: number; totalRevenue: number; totalEmployees: number }>();\r\n\r\n  enterprises.forEach(enterprise => {\r\n    const existing = regionMap.get(enterprise.region) || { count: 0, totalRevenue: 0, totalEmployees: 0 };\r\n    regionMap.set(enterprise.region, {\r\n      count: existing.count + 1,\r\n      totalRevenue: existing.totalRevenue + enterprise.revenue,\r\n      totalEmployees: existing.totalEmployees + enterprise.employees\r\n    });\r\n  });\r\n\r\n  return Array.from(regionMap.entries()).map(([region, stats]) => ({\r\n    region,\r\n    count: stats.count,\r\n    totalRevenue: stats.totalRevenue,\r\n    averageEmployees: Math.round(stats.totalEmployees / stats.count)\r\n  }));\r\n};\r\n\r\n// Оценка качества данных\r\nexport const calculateDataQuality = (enterprises: Enterprise[]): DataQuality => {\r\n  let validRecords = 0;\r\n  const validationErrors: string[] = [];\r\n\r\n  enterprises.forEach((enterprise, index) => {\r\n    let isValid = true;\r\n    const errors: string[] = [];\r\n\r\n    if (!enterprise.name || enterprise.name.trim().length === 0) {\r\n      errors.push('Отсутствует название');\r\n      isValid = false;\r\n    }\r\n\r\n    if (!enterprise.contactInfo?.address || enterprise.contactInfo.address.trim().length === 0) {\r\n      errors.push('Отсутствует адрес');\r\n      isValid = false;\r\n    }\r\n\r\n    if (enterprise.employees < 0) {\r\n      errors.push('Некорректное количество сотрудников');\r\n      isValid = false;\r\n    }\r\n\r\n    if (enterprise.revenue < 0) {\r\n      errors.push('Некорректная выручка');\r\n      isValid = false;\r\n    }\r\n\r\n    if (isValid) {\r\n      validRecords++;\r\n    } else {\r\n      validationErrors.push(`Запись ${index + 1}: ${errors.join(', ')}`);\r\n    }\r\n  });\r\n\r\n  return {\r\n    totalRecords: enterprises.length,\r\n    validRecords,\r\n    invalidRecords: enterprises.length - validRecords,\r\n    validationErrors\r\n  };\r\n};\r\n\r\n// Фильтрация данных\r\nexport const filterEnterprises = (enterprises: Enterprise[], filters: Partial<AnalyticsFilters>): Enterprise[] => {\r\n  return enterprises.filter(enterprise => {\r\n    // Фильтр по дате\r\n    if (filters.dateRange) {\r\n      const enterpriseDate = new Date(enterprise.registrationDate);\r\n      if (enterpriseDate < filters.dateRange.from || enterpriseDate > filters.dateRange.to) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Фильтр по отраслям\r\n    if (filters.industries && filters.industries.length > 0) {\r\n      if (!filters.industries.includes(enterprise.industry)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Фильтр по регионам\r\n    if (filters.regions && filters.regions.length > 0) {\r\n      if (!filters.regions.includes(enterprise.region)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Фильтр по количеству сотрудников\r\n    if (filters.employeeRange) {\r\n      if (enterprise.employees < filters.employeeRange.min || enterprise.employees > filters.employeeRange.max) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Фильтр по выручке\r\n    if (filters.revenueRange) {\r\n      if (enterprise.revenue < filters.revenueRange.min || enterprise.revenue > filters.revenueRange.max) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  });\r\n};\r\n\r\n// Расчет трендов по месяцам\r\nexport const calculateMonthlyTrends = (enterprises: Enterprise[]) => {\r\n  const monthlyData = new Map<string, { count: number; revenue: number }>();\r\n\r\n  enterprises.forEach(enterprise => {\r\n    const date = new Date(enterprise.registrationDate);\r\n    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n\r\n    const existing = monthlyData.get(monthKey) || { count: 0, revenue: 0 };\r\n    monthlyData.set(monthKey, {\r\n      count: existing.count + 1,\r\n      revenue: existing.revenue + enterprise.revenue\r\n    });\r\n  });\r\n\r\n  return Array.from(monthlyData.entries())\r\n    .sort(([a], [b]) => a.localeCompare(b))\r\n    .map(([month, data]) => ({\r\n      month,\r\n      count: data.count,\r\n      revenue: data.revenue\r\n    }));\r\n};\r\n\r\n// Топ предприятий по выручке\r\nexport const getTopEnterprisesByRevenue = (enterprises: Enterprise[], limit: number = 10): Enterprise[] => {\r\n  return enterprises\r\n    .sort((a, b) => b.revenue - a.revenue)\r\n    .slice(0, limit);\r\n};\r\n\r\n// Топ предприятий по количеству сотрудников\r\nexport const getTopEnterprisesByEmployees = (enterprises: Enterprise[], limit: number = 10): Enterprise[] => {\r\n  return enterprises\r\n    .sort((a, b) => b.employees - a.employees)\r\n    .slice(0, limit);\r\n};\r\n\r\n// Общая статистика\r\nexport const calculateOverallStats = (enterprises: Enterprise[]) => {\r\n  const totalRevenue = enterprises.reduce((sum, e) => sum + e.revenue, 0);\r\n  const totalEmployees = enterprises.reduce((sum, e) => sum + e.employees, 0);\r\n  const totalTaxes = enterprises.reduce((sum, e) => sum + e.taxesPaid, 0);\r\n\r\n  const activeCount = enterprises.filter(e => e.status === 'active').length;\r\n  const inactiveCount = enterprises.filter(e => e.status === 'inactive').length;\r\n  const suspendedCount = enterprises.filter(e => e.status === 'suspended').length;\r\n\r\n  return {\r\n    totalEnterprises: enterprises.length,\r\n    totalRevenue,\r\n    totalEmployees,\r\n    totalTaxes,\r\n    averageRevenue: enterprises.length > 0 ? totalRevenue / enterprises.length : 0,\r\n    averageEmployees: enterprises.length > 0 ? totalEmployees / enterprises.length : 0,\r\n    statusDistribution: {\r\n      active: activeCount,\r\n      inactive: inactiveCount,\r\n      suspended: suspendedCount\r\n    }\r\n  };\r\n};\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 459, "column": 0}, "map": {"version":3,"sources":["file:///C:/projects/hakaton/frontend/src/app/lib/api-client.ts"],"sourcesContent":["// API клиент для работы с бэкендом\r\n\r\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:4000/api';\r\n\r\n// Функция для получения токена из куки\r\nfunction getAuthToken(): string | null {\r\n  if (typeof document === 'undefined') return null;\r\n\r\n  const cookies = document.cookie.split(';');\r\n  for (const cookie of cookies) {\r\n    const [name, value] = cookie.trim().split('=');\r\n    if (name === 'token' || name === 'auth_token') {\r\n      return value;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n// Функция для создания headers с авторизацией\r\nfunction getHeaders(): HeadersInit {\r\n  const headers: HeadersInit = {\r\n    'Content-Type': 'application/json',\r\n  };\r\n\r\n  const token = getAuthToken();\r\n  if (token) {\r\n    headers['Authorization'] = `Bearer ${token}`;\r\n  }\r\n\r\n  return headers;\r\n}\r\n\r\nexport interface ApiResponse<T> {\r\n  success: boolean;\r\n  message?: string;\r\n  data?: T;\r\n  count?: number;\r\n}\r\n\r\nexport interface UploadResponse {\r\n  success: boolean;\r\n  message: string;\r\n  processedCount: number;\r\n  errorCount: number;\r\n  errors: string[];\r\n}\r\n\r\n// Загрузка файла\r\nexport const uploadFile = async (file: File): Promise<UploadResponse> => {\r\n  const formData = new FormData();\r\n  formData.append('file', file);\r\n\r\n  const token = getAuthToken();\r\n  const headers: HeadersInit = {};\r\n  if (token) {\r\n    headers['Authorization'] = `Bearer ${token}`;\r\n  }\r\n\r\n  const response = await fetch(`${API_BASE_URL}/upload`, {\r\n    method: 'POST',\r\n    body: formData,\r\n    headers,\r\n    credentials: 'include',\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Ошибка загрузки: ${response.statusText}`);\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\n// Получение всех предприятий с фильтрами\r\nexport const getEnterprises = async (filters?: {\r\n  industries?: string[];\r\n  regions?: string[];\r\n  status?: string;\r\n  minEmployees?: number;\r\n  maxEmployees?: number;\r\n  minRevenue?: number;\r\n  maxRevenue?: number;\r\n}) => {\r\n  const params = new URLSearchParams();\r\n\r\n  if (filters?.industries) {\r\n    filters.industries.forEach(industry => params.append('industries', industry));\r\n  }\r\n  if (filters?.regions) {\r\n    filters.regions.forEach(region => params.append('regions', region));\r\n  }\r\n  if (filters?.status) {\r\n    params.append('status', filters.status);\r\n  }\r\n  if (filters?.minEmployees !== undefined) {\r\n    params.append('minEmployees', filters.minEmployees.toString());\r\n  }\r\n  if (filters?.maxEmployees !== undefined) {\r\n    params.append('maxEmployees', filters.maxEmployees.toString());\r\n  }\r\n  if (filters?.minRevenue !== undefined) {\r\n    params.append('minRevenue', filters.minRevenue.toString());\r\n  }\r\n  if (filters?.maxRevenue !== undefined) {\r\n    params.append('maxRevenue', filters.maxRevenue.toString());\r\n  }\r\n\r\n  const url = `${API_BASE_URL}/enterprises${params.toString() ? '?' + params.toString() : ''}`;\r\n  const response = await fetch(url, {\r\n    headers: getHeaders(),\r\n    credentials: 'include',\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Ошибка получения данных: ${response.statusText}`);\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\n// Получение предприятия по ID\r\nexport const getEnterpriseById = async (id: string) => {\r\n  const response = await fetch(`${API_BASE_URL}/enterprises/${id}`, {\r\n    headers: getHeaders(),\r\n    credentials: 'include',\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Ошибка получения данных: ${response.statusText}`);\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\n// Получение статистики\r\nexport const getStatistics = async () => {\r\n  const response = await fetch(`${API_BASE_URL}/statistics`, {\r\n    headers: getHeaders(),\r\n    credentials: 'include',\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Ошибка получения статистики: ${response.statusText}`);\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\n// Очистка всех данных\r\nexport const clearAllData = async () => {\r\n  const response = await fetch(`${API_BASE_URL}/enterprises`, {\r\n    method: 'DELETE',\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Ошибка очистки данных: ${response.statusText}`);\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\n// Проверка здоровья API\r\nexport const checkHealth = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/health`);\r\n    return response.ok;\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 595, "column": 0}, "map": {"version":3,"sources":["file:///C:/projects/hakaton/frontend/src/app/analytics/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, LineChart, Line } from 'recharts';\r\nimport { Filter, Download, TrendingUp, BarChart3, PieChart as PieIcon } from 'lucide-react';\r\nimport { Enterprise, AnalyticsFilters } from '../types/enterprise';\r\nimport { INDUSTRIES, MOSCOW_REGIONS, formatNumber, formatCurrency } from '../lib/data-utils';\r\nimport { calculateIndustryStats, calculateRegionStats, calculateMonthlyTrends, filterEnterprises } from '../lib/analytics';\r\nimport { getEnterprises } from '../lib/api-client';\r\n\r\nconst COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6', '#06B6D4', '#F97316', '#84CC16', '#EC4899', '#6366F1'];\r\n\r\nexport default function AnalyticsPage() {\r\n  const [enterprises, setEnterprises] = useState<Enterprise[]>([]);\r\n  const [filteredEnterprises, setFilteredEnterprises] = useState<Enterprise[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [showFilters, setShowFilters] = useState(false);\r\n  const [filters, setFilters] = useState<Partial<AnalyticsFilters>>({});\r\n\r\n  useEffect(() => {\r\n    // Загружаем данные из бэкенда\r\n    const loadData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const response = await getEnterprises();\r\n        if (response.success && response.data) {\r\n          setEnterprises(response.data);\r\n          setFilteredEnterprises(response.data);\r\n        }\r\n      } catch (err) {\r\n        console.error('Ошибка загрузки данных:', err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Применяем фильтры\r\n    const filtered = filterEnterprises(enterprises, filters);\r\n    setFilteredEnterprises(filtered);\r\n  }, [enterprises, filters]);\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-64\">\r\n        <div className=\"text-lg text-gray-600\">Загрузка данных...</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const industryStats = calculateIndustryStats(filteredEnterprises);\r\n  const regionStats = calculateRegionStats(filteredEnterprises);\r\n  const monthlyTrends = calculateMonthlyTrends(filteredEnterprises);\r\n\r\n  const handleFilterChange = (key: string, value: unknown) => {\r\n    setFilters(prev => ({\r\n      ...prev,\r\n      [key]: value\r\n    }));\r\n  };\r\n\r\n  const clearFilters = () => {\r\n    setFilters({});\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-8\">\r\n      {/* Заголовок */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold text-gray-900\">Аналитика предприятий</h1>\r\n          <p className=\"text-gray-600 mt-2\">\r\n            Детальный анализ данных {filteredEnterprises.length} предприятий из {enterprises.length}\r\n          </p>\r\n        </div>\r\n        <div className=\"flex items-center space-x-4\">\r\n          <button\r\n            onClick={() => setShowFilters(!showFilters)}\r\n            className=\"flex items-center space-x-2 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50\"\r\n          >\r\n            <Filter className=\"w-4 h-4\" />\r\n            <span>Фильтры</span>\r\n          </button>\r\n          <button className=\"flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\">\r\n            <Download className=\"w-4 h-4\" />\r\n            <span>Экспорт</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Фильтры */}\r\n      {showFilters && (\r\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\r\n          <div className=\"flex items-center justify-between mb-4\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900\">Фильтры</h3>\r\n            <button\r\n              onClick={clearFilters}\r\n              className=\"text-sm text-blue-600 hover:text-blue-800\"\r\n            >\r\n              Очистить все\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n            {/* Фильтр по отраслям */}\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                Отрасли\r\n              </label>\r\n              <select\r\n                multiple\r\n                className=\"w-full p-2 border border-gray-300 rounded-lg\"\r\n                value={filters.industries || []}\r\n                onChange={(e) => {\r\n                  const selected = Array.from(e.target.selectedOptions, option => option.value);\r\n                  handleFilterChange('industries', selected);\r\n                }}\r\n              >\r\n                {INDUSTRIES.map(industry => (\r\n                  <option key={industry} value={industry}>{industry}</option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n\r\n            {/* Фильтр по регионам */}\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                Регионы\r\n              </label>\r\n              <select\r\n                multiple\r\n                className=\"w-full p-2 border border-gray-300 rounded-lg\"\r\n                value={filters.regions || []}\r\n                onChange={(e) => {\r\n                  const selected = Array.from(e.target.selectedOptions, option => option.value);\r\n                  handleFilterChange('regions', selected);\r\n                }}\r\n              >\r\n                {MOSCOW_REGIONS.map(region => (\r\n                  <option key={region} value={region}>{region}</option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n\r\n            {/* Фильтр по количеству сотрудников */}\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                Сотрудники (от-до)\r\n              </label>\r\n              <div className=\"flex space-x-2\">\r\n                <input\r\n                  type=\"number\"\r\n                  placeholder=\"От\"\r\n                  className=\"w-full p-2 border border-gray-300 rounded-lg\"\r\n                  value={filters.employeeRange?.min || ''}\r\n                  onChange={(e) => {\r\n                    const min = parseInt(e.target.value) || 0;\r\n                    handleFilterChange('employeeRange', {\r\n                      ...filters.employeeRange,\r\n                      min,\r\n                      max: filters.employeeRange?.max || 10000\r\n                    });\r\n                  }}\r\n                />\r\n                <input\r\n                  type=\"number\"\r\n                  placeholder=\"До\"\r\n                  className=\"w-full p-2 border border-gray-300 rounded-lg\"\r\n                  value={filters.employeeRange?.max || ''}\r\n                  onChange={(e) => {\r\n                    const max = parseInt(e.target.value) || 10000;\r\n                    handleFilterChange('employeeRange', {\r\n                      ...filters.employeeRange,\r\n                      min: filters.employeeRange?.min || 0,\r\n                      max\r\n                    });\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            {/* Фильтр по выручке */}\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                Выручка (млн руб.)\r\n              </label>\r\n              <div className=\"flex space-x-2\">\r\n                <input\r\n                  type=\"number\"\r\n                  placeholder=\"От\"\r\n                  className=\"w-full p-2 border border-gray-300 rounded-lg\"\r\n                  value={filters.revenueRange?.min ? filters.revenueRange.min / 1000000 : ''}\r\n                  onChange={(e) => {\r\n                    const min = (parseInt(e.target.value) || 0) * 1000000;\r\n                    handleFilterChange('revenueRange', {\r\n                      ...filters.revenueRange,\r\n                      min,\r\n                      max: filters.revenueRange?.max || 1000000000\r\n                    });\r\n                  }}\r\n                />\r\n                <input\r\n                  type=\"number\"\r\n                  placeholder=\"До\"\r\n                  className=\"w-full p-2 border border-gray-300 rounded-lg\"\r\n                  value={filters.revenueRange?.max ? filters.revenueRange.max / 1000000 : ''}\r\n                  onChange={(e) => {\r\n                    const max = (parseInt(e.target.value) || 1000) * 1000000;\r\n                    handleFilterChange('revenueRange', {\r\n                      ...filters.revenueRange,\r\n                      min: filters.revenueRange?.min || 0,\r\n                      max\r\n                    });\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Статистические карточки */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <p className=\"text-sm font-medium text-gray-600\">Общая выручка</p>\r\n              <p className=\"text-2xl font-bold text-gray-900\">\r\n                {formatCurrency(filteredEnterprises.reduce((sum, e) => sum + e.revenue, 0))}\r\n              </p>\r\n            </div>\r\n            <TrendingUp className=\"w-8 h-8 text-green-600\" />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <p className=\"text-sm font-medium text-gray-600\">Всего сотрудников</p>\r\n              <p className=\"text-2xl font-bold text-gray-900\">\r\n                {formatNumber(filteredEnterprises.reduce((sum, e) => sum + e.employees, 0))}\r\n              </p>\r\n            </div>\r\n            <BarChart3 className=\"w-8 h-8 text-blue-600\" />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <p className=\"text-sm font-medium text-gray-600\">Средняя выручка</p>\r\n              <p className=\"text-2xl font-bold text-gray-900\">\r\n                {formatCurrency(\r\n                  filteredEnterprises.length > 0\r\n                    ? filteredEnterprises.reduce((sum, e) => sum + e.revenue, 0) / filteredEnterprises.length\r\n                    : 0\r\n                )}\r\n              </p>\r\n            </div>\r\n            <PieIcon className=\"w-8 h-8 text-purple-600\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Графики */}\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\r\n        {/* График по отраслям */}\r\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\r\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Распределение по отраслям</h3>\r\n          <ResponsiveContainer width=\"100%\" height={300}>\r\n            <BarChart data={industryStats}>\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis\r\n                dataKey=\"industry\"\r\n                angle={-45}\r\n                textAnchor=\"end\"\r\n                height={100}\r\n                fontSize={12}\r\n              />\r\n              <YAxis />\r\n              <Tooltip\r\n                formatter={(value, name) => [\r\n                  name === 'count' ? formatNumber(value as number) : formatCurrency(value as number),\r\n                  name === 'count' ? 'Количество' : 'Выручка'\r\n                ]}\r\n              />\r\n              <Bar dataKey=\"count\" fill=\"#3B82F6\" name=\"count\" />\r\n            </BarChart>\r\n          </ResponsiveContainer>\r\n        </div>\r\n\r\n        {/* Круговая диаграмма по регионам */}\r\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\r\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Распределение по регионам</h3>\r\n          <ResponsiveContainer width=\"100%\" height={300}>\r\n            <PieChart>\r\n              <Pie\r\n                data={regionStats.slice(0, 8).map(item => ({ ...item, name: item.region, value: item.count }))}\r\n                cx=\"50%\"\r\n                cy=\"50%\"\r\n                labelLine={false}\r\n                label={({ name, value }) => `${name}: ${value}`}\r\n                outerRadius={80}\r\n                fill=\"#8884d8\"\r\n                dataKey=\"value\"\r\n              >\r\n                {regionStats.slice(0, 8).map((entry, index) => (\r\n                  <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n                ))}\r\n              </Pie>\r\n              <Tooltip formatter={(value) => [formatNumber(value as number), 'Количество']} />\r\n            </PieChart>\r\n          </ResponsiveContainer>\r\n        </div>\r\n\r\n        {/* Тренды по месяцам */}\r\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border lg:col-span-2\">\r\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Динамика регистрации предприятий</h3>\r\n          <ResponsiveContainer width=\"100%\" height={300}>\r\n            <LineChart data={monthlyTrends}>\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"month\" />\r\n              <YAxis />\r\n              <Tooltip\r\n                formatter={(value, name) => [\r\n                  formatNumber(value as number),\r\n                  name === 'count' ? 'Количество' : 'Выручка'\r\n                ]}\r\n              />\r\n              <Line\r\n                type=\"monotone\"\r\n                dataKey=\"count\"\r\n                stroke=\"#3B82F6\"\r\n                strokeWidth={2}\r\n                name=\"count\"\r\n              />\r\n            </LineChart>\r\n          </ResponsiveContainer>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Таблица топ предприятий */}\r\n      <div className=\"bg-white rounded-lg shadow-sm border\">\r\n        <div className=\"px-6 py-4 border-b border-gray-200\">\r\n          <h3 className=\"text-lg font-semibold text-gray-900\">Топ предприятий по выручке</h3>\r\n        </div>\r\n        <div className=\"overflow-x-auto\">\r\n          <table className=\"min-w-full divide-y divide-gray-200\">\r\n            <thead className=\"bg-gray-50\">\r\n              <tr>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Название\r\n                </th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Отрасль\r\n                </th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Регион\r\n                </th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Сотрудники\r\n                </th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Выручка\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"bg-white divide-y divide-gray-200\">\r\n              {filteredEnterprises\r\n                .sort((a, b) => b.revenue - a.revenue)\r\n                .slice(0, 10)\r\n                .map((enterprise) => (\r\n                  <tr key={enterprise.id} className=\"hover:bg-gray-50\">\r\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\r\n                      {enterprise.name}\r\n                    </td>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\r\n                      {enterprise.industry}\r\n                    </td>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\r\n                      {enterprise.region}\r\n                    </td>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\r\n                      {formatNumber(enterprise.employees)}\r\n                    </td>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\r\n                      {formatCurrency(enterprise.revenue)}\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}