{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/projects/hakaton/frontend/src/app/lib/data-utils.ts"],"sourcesContent":["import * as XLSX from 'xlsx';\r\nimport Papa from 'papaparse';\r\nimport { Enterprise, UploadResult } from '../types/enterprise';\r\n\r\n// Московские регионы\r\nexport const MOSCOW_REGIONS = [\r\n  'Центральный',\r\n  'Северный',\r\n  'Северо-Восточный',\r\n  'Восточный',\r\n  'Юго-Восточный',\r\n  'Южный',\r\n  'Юго-Западный',\r\n  'Западный',\r\n  'Северо-Западный',\r\n  'Новомосковский',\r\n  'Троицкий'\r\n];\r\n\r\n// Основные отрасли промышленности\r\nexport const INDUSTRIES = [\r\n  'Машиностроение',\r\n  'Пищевая промышленность',\r\n  'Химическая промышленность',\r\n  'Текстильная промышленность',\r\n  'Металлургия',\r\n  'Электроника',\r\n  'Строительные материалы',\r\n  'Фармацевтика',\r\n  'Автомобилестроение',\r\n  'Полиграфия',\r\n  'Информационные технологии',\r\n  'Сельское хозяйство',\r\n  'Другое'\r\n];\r\n\r\n// Валидация данных предприятия\r\nexport const validateEnterprise = (data: Record<string, unknown>): { isValid: boolean; errors: string[] } => {\r\n  const errors: string[] = [];\r\n\r\n  if (!data.name || typeof data.name !== 'string') {\r\n    errors.push('Некорректное название предприятия');\r\n  }\r\n\r\n  if (!data.industry || !INDUSTRIES.includes(data.industry as string)) {\r\n    errors.push('Некорректная отрасль');\r\n  }\r\n\r\n  if (!data.region || !MOSCOW_REGIONS.includes(data.region as string)) {\r\n    errors.push('Некорректный регион');\r\n  }\r\n\r\n  if (!data.employees || Number(data.employees) < 0) {\r\n    errors.push('Некорректное количество сотрудников');\r\n  }\r\n\r\n  if (!data.revenue || Number(data.revenue) < 0) {\r\n    errors.push('Некорректная выручка');\r\n  }\r\n\r\n  const contactInfo = data.contactInfo as Record<string, unknown> | undefined;\r\n  if (!contactInfo?.address) {\r\n    errors.push('Отсутствует адрес');\r\n  }\r\n\r\n  return {\r\n    isValid: errors.length === 0,\r\n    errors\r\n  };\r\n};\r\n\r\n// Парсинг CSV файла\r\nexport const parseCSV = (file: File): Promise<UploadResult> => {\r\n  return new Promise((resolve) => {\r\n    Papa.parse(file, {\r\n      header: true,\r\n      complete: (results) => {\r\n        const enterprises: Enterprise[] = [];\r\n        const errors: string[] = [];\r\n        let errorCount = 0;\r\n\r\n        results.data.forEach((row: unknown, index: number) => {\r\n          const rowData = row as Record<string, unknown>;\r\n          const validation = validateEnterprise(rowData);\r\n\r\n          if (validation.isValid) {\r\n            const enterprise: Enterprise = {\r\n              id: crypto.randomUUID(),\r\n              name: String(rowData.name),\r\n              industry: String(rowData.industry),\r\n              region: String(rowData.region),\r\n              employees: parseInt(String(rowData.employees)) || 0,\r\n              revenue: parseFloat(String(rowData.revenue)) || 0,\r\n              taxesPaid: parseFloat(String(rowData.taxesPaid)) || 0,\r\n              registrationDate: new Date(String(rowData.registrationDate) || Date.now()),\r\n              lastUpdated: new Date(),\r\n              status: (rowData.status as 'active' | 'inactive' | 'suspended') || 'active',\r\n              contactInfo: {\r\n                address: String(rowData.address),\r\n                phone: String(rowData.phone || ''),\r\n                email: String(rowData.email || '')\r\n              }\r\n            };\r\n            enterprises.push(enterprise);\r\n          } else {\r\n            errorCount++;\r\n            errors.push(`Строка ${index + 1}: ${validation.errors.join(', ')}`);\r\n          }\r\n        });\r\n\r\n        resolve({\r\n          success: true,\r\n          message: `Обработано ${enterprises.length} записей из ${results.data.length}`,\r\n          processedCount: enterprises.length,\r\n          errorCount,\r\n          errors,\r\n          data: enterprises\r\n        });\r\n      },\r\n      error: (error) => {\r\n        resolve({\r\n          success: false,\r\n          message: `Ошибка парсинга CSV: ${error.message}`,\r\n          processedCount: 0,\r\n          errorCount: 1,\r\n          errors: [error.message]\r\n        });\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n// Парсинг Excel файла\r\nexport const parseExcel = (file: File): Promise<UploadResult> => {\r\n  return new Promise((resolve) => {\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = (e) => {\r\n      try {\r\n        const data = e.target?.result;\r\n        const workbook = XLSX.read(data, { type: 'binary' });\r\n        const sheetName = workbook.SheetNames[0];\r\n        const worksheet = workbook.Sheets[sheetName];\r\n        const jsonData = XLSX.utils.sheet_to_json(worksheet);\r\n\r\n        const enterprises: Enterprise[] = [];\r\n        const errors: string[] = [];\r\n        let errorCount = 0;\r\n\r\n        jsonData.forEach((row: unknown, index: number) => {\r\n          const rowData = row as Record<string, unknown>;\r\n          const validation = validateEnterprise(rowData);\r\n\r\n          if (validation.isValid) {\r\n            const enterprise: Enterprise = {\r\n              id: crypto.randomUUID(),\r\n              name: String(rowData.name),\r\n              industry: String(rowData.industry),\r\n              region: String(rowData.region),\r\n              employees: parseInt(String(rowData.employees)) || 0,\r\n              revenue: parseFloat(String(rowData.revenue)) || 0,\r\n              taxesPaid: parseFloat(String(rowData.taxesPaid)) || 0,\r\n              registrationDate: new Date(String(rowData.registrationDate) || Date.now()),\r\n              lastUpdated: new Date(),\r\n              status: (rowData.status as 'active' | 'inactive' | 'suspended') || 'active',\r\n              contactInfo: {\r\n                address: String(rowData.address),\r\n                phone: String(rowData.phone || ''),\r\n                email: String(rowData.email || '')\r\n              }\r\n            };\r\n            enterprises.push(enterprise);\r\n          } else {\r\n            errorCount++;\r\n            errors.push(`Строка ${index + 1}: ${validation.errors.join(', ')}`);\r\n          }\r\n        });\r\n\r\n        resolve({\r\n          success: true,\r\n          message: `Обработано ${enterprises.length} записей из ${jsonData.length}`,\r\n          processedCount: enterprises.length,\r\n          errorCount,\r\n          errors,\r\n          data: enterprises\r\n        });\r\n      } catch (error) {\r\n        resolve({\r\n          success: false,\r\n          message: `Ошибка парсинга Excel: ${(error as Error).message}`,\r\n          processedCount: 0,\r\n          errorCount: 1,\r\n          errors: [(error as Error).message]\r\n        });\r\n      }\r\n    };\r\n\r\n    reader.readAsBinaryString(file);\r\n  });\r\n};\r\n\r\n// Форматирование чисел\r\nexport const formatNumber = (num: number): string => {\r\n  return new Intl.NumberFormat('ru-RU').format(num);\r\n};\r\n\r\n// Форматирование валюты\r\nexport const formatCurrency = (amount: number): string => {\r\n  return new Intl.NumberFormat('ru-RU', {\r\n    style: 'currency',\r\n    currency: 'RUB',\r\n    maximumFractionDigits: 0,\r\n    minimumFractionDigits: 0\r\n  }).format(amount);\r\n};\r\n\r\n// Компактное форматирование валюты для карточек (без пробелов, с сокращениями)\r\nexport const formatCurrencyCompact = (amount: number): string => {\r\n  if (amount >= 1_000_000_000) {\r\n    return `${(amount / 1_000_000_000).toFixed(1)}млрд₽`;\r\n  } else if (amount >= 1_000_000) {\r\n    return `${(amount / 1_000_000).toFixed(1)}млн₽`;\r\n  } else if (amount >= 1_000) {\r\n    return `${(amount / 1_000).toFixed(0)}тыс₽`;\r\n  }\r\n  return `${amount}₽`;\r\n};\r\n\r\n// Генерация случайных данных для демонстрации\r\nexport const generateSampleData = (count: number = 100): Enterprise[] => {\r\n  const sampleData: Enterprise[] = [];\r\n\r\n  for (let i = 0; i < count; i++) {\r\n    const enterprise: Enterprise = {\r\n      id: crypto.randomUUID(),\r\n      name: `Предприятие ${i + 1}`,\r\n      industry: INDUSTRIES[Math.floor(Math.random() * INDUSTRIES.length)],\r\n      region: MOSCOW_REGIONS[Math.floor(Math.random() * MOSCOW_REGIONS.length)],\r\n      employees: Math.floor(Math.random() * 1000) + 10,\r\n      revenue: Math.floor(Math.random() * 100000000) + 1000000,\r\n      taxesPaid: Math.floor(Math.random() * 10000000) + 100000,\r\n      registrationDate: new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000 * 5),\r\n      lastUpdated: new Date(),\r\n      status: Math.random() > 0.1 ? 'active' : Math.random() > 0.5 ? 'inactive' : 'suspended',\r\n      contactInfo: {\r\n        address: `Москва, улица ${i + 1}, дом ${Math.floor(Math.random() * 100) + 1}`,\r\n        phone: `+7-495-${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 90) + 10}`,\r\n        email: `contact${i + 1}@enterprise.ru`\r\n      }\r\n    };\r\n    sampleData.push(enterprise);\r\n  }\r\n\r\n  return sampleData;\r\n};\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 259, "column": 0}, "map": {"version":3,"sources":["file:///C:/projects/hakaton/frontend/src/app/lib/analytics.ts"],"sourcesContent":["import { Enterprise, IndustryStats, RegionStats, DataQuality, AnalyticsFilters } from '../types/enterprise';\r\n\r\n// Аналитика по отраслям\r\nexport const calculateIndustryStats = (enterprises: Enterprise[]): IndustryStats[] => {\r\n  const industryMap = new Map<string, { count: number; totalRevenue: number; totalEmployees: number }>();\r\n\r\n  enterprises.forEach(enterprise => {\r\n    const existing = industryMap.get(enterprise.industry) || { count: 0, totalRevenue: 0, totalEmployees: 0 };\r\n    industryMap.set(enterprise.industry, {\r\n      count: existing.count + 1,\r\n      totalRevenue: existing.totalRevenue + enterprise.revenue,\r\n      totalEmployees: existing.totalEmployees + enterprise.employees\r\n    });\r\n  });\r\n\r\n  return Array.from(industryMap.entries()).map(([industry, stats]) => ({\r\n    industry,\r\n    count: stats.count,\r\n    totalRevenue: stats.totalRevenue,\r\n    averageEmployees: Math.round(stats.totalEmployees / stats.count)\r\n  }));\r\n};\r\n\r\n// Аналитика по регионам\r\nexport const calculateRegionStats = (enterprises: Enterprise[]): RegionStats[] => {\r\n  const regionMap = new Map<string, { count: number; totalRevenue: number; totalEmployees: number }>();\r\n\r\n  enterprises.forEach(enterprise => {\r\n    const existing = regionMap.get(enterprise.region) || { count: 0, totalRevenue: 0, totalEmployees: 0 };\r\n    regionMap.set(enterprise.region, {\r\n      count: existing.count + 1,\r\n      totalRevenue: existing.totalRevenue + enterprise.revenue,\r\n      totalEmployees: existing.totalEmployees + enterprise.employees\r\n    });\r\n  });\r\n\r\n  return Array.from(regionMap.entries()).map(([region, stats]) => ({\r\n    region,\r\n    count: stats.count,\r\n    totalRevenue: stats.totalRevenue,\r\n    averageEmployees: Math.round(stats.totalEmployees / stats.count)\r\n  }));\r\n};\r\n\r\n// Оценка качества данных\r\nexport const calculateDataQuality = (enterprises: Enterprise[]): DataQuality => {\r\n  let validRecords = 0;\r\n  const validationErrors: string[] = [];\r\n\r\n  enterprises.forEach((enterprise, index) => {\r\n    let isValid = true;\r\n    const errors: string[] = [];\r\n\r\n    if (!enterprise.name || enterprise.name.trim().length === 0) {\r\n      errors.push('Отсутствует название');\r\n      isValid = false;\r\n    }\r\n\r\n    if (!enterprise.contactInfo?.address || enterprise.contactInfo.address.trim().length === 0) {\r\n      errors.push('Отсутствует адрес');\r\n      isValid = false;\r\n    }\r\n\r\n    if (enterprise.employees < 0) {\r\n      errors.push('Некорректное количество сотрудников');\r\n      isValid = false;\r\n    }\r\n\r\n    if (enterprise.revenue < 0) {\r\n      errors.push('Некорректная выручка');\r\n      isValid = false;\r\n    }\r\n\r\n    if (isValid) {\r\n      validRecords++;\r\n    } else {\r\n      validationErrors.push(`Запись ${index + 1}: ${errors.join(', ')}`);\r\n    }\r\n  });\r\n\r\n  return {\r\n    totalRecords: enterprises.length,\r\n    validRecords,\r\n    invalidRecords: enterprises.length - validRecords,\r\n    validationErrors\r\n  };\r\n};\r\n\r\n// Фильтрация данных\r\nexport const filterEnterprises = (enterprises: Enterprise[], filters: Partial<AnalyticsFilters>): Enterprise[] => {\r\n  return enterprises.filter(enterprise => {\r\n    // Фильтр по дате\r\n    if (filters.dateRange) {\r\n      const enterpriseDate = new Date(enterprise.registrationDate);\r\n      if (enterpriseDate < filters.dateRange.from || enterpriseDate > filters.dateRange.to) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Фильтр по отраслям\r\n    if (filters.industries && filters.industries.length > 0) {\r\n      if (!filters.industries.includes(enterprise.industry)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Фильтр по регионам\r\n    if (filters.regions && filters.regions.length > 0) {\r\n      if (!filters.regions.includes(enterprise.region)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Фильтр по количеству сотрудников\r\n    if (filters.employeeRange) {\r\n      if (enterprise.employees < filters.employeeRange.min || enterprise.employees > filters.employeeRange.max) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Фильтр по выручке\r\n    if (filters.revenueRange) {\r\n      if (enterprise.revenue < filters.revenueRange.min || enterprise.revenue > filters.revenueRange.max) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  });\r\n};\r\n\r\n// Расчет трендов по месяцам\r\nexport const calculateMonthlyTrends = (enterprises: Enterprise[]) => {\r\n  const monthlyData = new Map<string, { count: number; revenue: number }>();\r\n\r\n  enterprises.forEach(enterprise => {\r\n    const date = new Date(enterprise.registrationDate);\r\n    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n\r\n    const existing = monthlyData.get(monthKey) || { count: 0, revenue: 0 };\r\n    monthlyData.set(monthKey, {\r\n      count: existing.count + 1,\r\n      revenue: existing.revenue + enterprise.revenue\r\n    });\r\n  });\r\n\r\n  return Array.from(monthlyData.entries())\r\n    .sort(([a], [b]) => a.localeCompare(b))\r\n    .map(([month, data]) => ({\r\n      month,\r\n      count: data.count,\r\n      revenue: data.revenue\r\n    }));\r\n};\r\n\r\n// Топ предприятий по выручке\r\nexport const getTopEnterprisesByRevenue = (enterprises: Enterprise[], limit: number = 10): Enterprise[] => {\r\n  return enterprises\r\n    .sort((a, b) => b.revenue - a.revenue)\r\n    .slice(0, limit);\r\n};\r\n\r\n// Топ предприятий по количеству сотрудников\r\nexport const getTopEnterprisesByEmployees = (enterprises: Enterprise[], limit: number = 10): Enterprise[] => {\r\n  return enterprises\r\n    .sort((a, b) => b.employees - a.employees)\r\n    .slice(0, limit);\r\n};\r\n\r\n// Общая статистика\r\nexport const calculateOverallStats = (enterprises: Enterprise[]) => {\r\n  const totalRevenue = enterprises.reduce((sum, e) => sum + e.revenue, 0);\r\n  const totalEmployees = enterprises.reduce((sum, e) => sum + e.employees, 0);\r\n  const totalTaxes = enterprises.reduce((sum, e) => sum + e.taxesPaid, 0);\r\n\r\n  const activeCount = enterprises.filter(e => e.status === 'active').length;\r\n  const inactiveCount = enterprises.filter(e => e.status === 'inactive').length;\r\n  const suspendedCount = enterprises.filter(e => e.status === 'suspended').length;\r\n\r\n  return {\r\n    totalEnterprises: enterprises.length,\r\n    totalRevenue,\r\n    totalEmployees,\r\n    totalTaxes,\r\n    averageRevenue: enterprises.length > 0 ? totalRevenue / enterprises.length : 0,\r\n    averageEmployees: enterprises.length > 0 ? totalEmployees / enterprises.length : 0,\r\n    statusDistribution: {\r\n      active: activeCount,\r\n      inactive: inactiveCount,\r\n      suspended: suspendedCount\r\n    }\r\n  };\r\n};\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 459, "column": 0}, "map": {"version":3,"sources":["file:///C:/projects/hakaton/frontend/src/app/lib/api-client.ts"],"sourcesContent":["// API клиент для работы с бэкендом\r\n\r\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:4000/api';\r\n\r\n// Функция для получения токена из куки\r\nfunction getAuthToken(): string | null {\r\n  if (typeof document === 'undefined') return null;\r\n\r\n  const cookies = document.cookie.split(';');\r\n  for (const cookie of cookies) {\r\n    const [name, value] = cookie.trim().split('=');\r\n    if (name === 'token' || name === 'auth_token') {\r\n      return value;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n// Функция для создания headers с авторизацией\r\nfunction getHeaders(): HeadersInit {\r\n  const headers: HeadersInit = {\r\n    'Content-Type': 'application/json',\r\n  };\r\n\r\n  const token = getAuthToken();\r\n  if (token) {\r\n    headers['Authorization'] = `Bearer ${token}`;\r\n  }\r\n\r\n  return headers;\r\n}\r\n\r\nexport interface ApiResponse<T> {\r\n  success: boolean;\r\n  message?: string;\r\n  data?: T;\r\n  count?: number;\r\n}\r\n\r\nexport interface UploadResponse {\r\n  success: boolean;\r\n  message: string;\r\n  processedCount: number;\r\n  errorCount: number;\r\n  errors: string[];\r\n}\r\n\r\n// Загрузка файла\r\nexport const uploadFile = async (file: File): Promise<UploadResponse> => {\r\n  const formData = new FormData();\r\n  formData.append('file', file);\r\n\r\n  const token = getAuthToken();\r\n  const headers: HeadersInit = {};\r\n  if (token) {\r\n    headers['Authorization'] = `Bearer ${token}`;\r\n  }\r\n\r\n  const response = await fetch(`${API_BASE_URL}/upload`, {\r\n    method: 'POST',\r\n    body: formData,\r\n    headers,\r\n    credentials: 'include',\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Ошибка загрузки: ${response.statusText}`);\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\n// Получение всех предприятий с фильтрами\r\nexport const getEnterprises = async (filters?: {\r\n  industries?: string[];\r\n  regions?: string[];\r\n  status?: string;\r\n  minEmployees?: number;\r\n  maxEmployees?: number;\r\n  minRevenue?: number;\r\n  maxRevenue?: number;\r\n}) => {\r\n  const params = new URLSearchParams();\r\n\r\n  if (filters?.industries) {\r\n    filters.industries.forEach(industry => params.append('industries', industry));\r\n  }\r\n  if (filters?.regions) {\r\n    filters.regions.forEach(region => params.append('regions', region));\r\n  }\r\n  if (filters?.status) {\r\n    params.append('status', filters.status);\r\n  }\r\n  if (filters?.minEmployees !== undefined) {\r\n    params.append('minEmployees', filters.minEmployees.toString());\r\n  }\r\n  if (filters?.maxEmployees !== undefined) {\r\n    params.append('maxEmployees', filters.maxEmployees.toString());\r\n  }\r\n  if (filters?.minRevenue !== undefined) {\r\n    params.append('minRevenue', filters.minRevenue.toString());\r\n  }\r\n  if (filters?.maxRevenue !== undefined) {\r\n    params.append('maxRevenue', filters.maxRevenue.toString());\r\n  }\r\n\r\n  const url = `${API_BASE_URL}/enterprises${params.toString() ? '?' + params.toString() : ''}`;\r\n  const response = await fetch(url, {\r\n    headers: getHeaders(),\r\n    credentials: 'include',\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Ошибка получения данных: ${response.statusText}`);\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\n// Получение предприятия по ID\r\nexport const getEnterpriseById = async (id: string) => {\r\n  const response = await fetch(`${API_BASE_URL}/enterprises/${id}`, {\r\n    headers: getHeaders(),\r\n    credentials: 'include',\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Ошибка получения данных: ${response.statusText}`);\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\n// Получение статистики\r\nexport const getStatistics = async () => {\r\n  const response = await fetch(`${API_BASE_URL}/statistics`, {\r\n    headers: getHeaders(),\r\n    credentials: 'include',\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Ошибка получения статистики: ${response.statusText}`);\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\n// Очистка всех данных\r\nexport const clearAllData = async () => {\r\n  const response = await fetch(`${API_BASE_URL}/enterprises`, {\r\n    method: 'DELETE',\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Ошибка очистки данных: ${response.statusText}`);\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\n// Проверка здоровья API\r\nexport const checkHealth = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/health`);\r\n    return response.ok;\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 595, "column": 0}, "map": {"version":3,"sources":["file:///C:/projects/hakaton/frontend/src/app/lib/report-generator.ts"],"sourcesContent":["import * as XLSX from 'xlsx';\r\nimport jsPDF from 'jspdf';\r\nimport autoTable from 'jspdf-autotable';\r\nimport { Enterprise, IndustryStats, RegionStats } from '../types/enterprise';\r\n\r\n// Динамический импорт pdfMake только когда он нужен\r\nlet pdfMake: any = null;\r\n\r\n// Асинхронная инициализация pdfMake с улучшенной обработкой ошибок\r\nconst initializePdfMake = async () => {\r\n  if (!pdfMake) {\r\n    try {\r\n      const pdfMakeModule = await import('pdfmake/build/pdfmake');\r\n      const pdfFontsModule = await import('pdfmake/build/vfs_fonts');\r\n\r\n      pdfMake = pdfMakeModule.default || pdfMakeModule;\r\n\r\n      // Проверяем различные способы доступа к шрифтам\r\n      if (pdfFontsModule.default?.pdfMake?.vfs) {\r\n        pdfMake.vfs = pdfFontsModule.default.pdfMake.vfs;\r\n      } else if (pdfFontsModule.pdfMake?.vfs) {\r\n        pdfMake.vfs = pdfFontsModule.pdfMake.vfs;\r\n      } else if ((pdfFontsModule as any).vfs) {\r\n        pdfMake.vfs = (pdfFontsModule as any).vfs;\r\n      } else {\r\n        console.warn('Не удалось найти шрифты pdfMake, используем стандартные');\r\n        // Создаем пустой объект vfs для базовой работы\r\n        pdfMake.vfs = {};\r\n      }\r\n\r\n      console.log('pdfMake успешно инициализирован');\r\n    } catch (error) {\r\n      console.error('Ошибка инициализации pdfMake:', error);\r\n      pdfMake = null;\r\n      throw error;\r\n    }\r\n  }\r\n  return pdfMake;\r\n};\r\n\r\n// Интерфейс для конфигурации отчета\r\nexport interface ReportData {\r\n  title: string;\r\n  period: {\r\n    from: string;\r\n    to: string;\r\n  };\r\n  enterprises: Enterprise[];\r\n  stats: {\r\n    totalEnterprises: number;\r\n    totalRevenue: number;\r\n    totalEmployees: number;\r\n    averageRevenue: number;\r\n    averageEmployees: number;\r\n  };\r\n  industryStats?: IndustryStats[];\r\n  regionStats?: RegionStats[];\r\n}\r\n\r\n// Форматирование валюты для отчетов\r\nconst formatCurrencyForExport = (value: number): string => {\r\n  return new Intl.NumberFormat('ru-RU', {\r\n    style: 'currency',\r\n    currency: 'RUB',\r\n    minimumFractionDigits: 0,\r\n    maximumFractionDigits: 0,\r\n  }).format(value);\r\n};\r\n\r\n// Форматирование чисел\r\nconst formatNumberForExport = (value: number): string => {\r\n  return new Intl.NumberFormat('ru-RU').format(value);\r\n};\r\n\r\n// Улучшенная генерация Excel отчета с лучшим форматированием\r\nexport const generateExcelReport = (reportData: ReportData) => {\r\n  const workbook = XLSX.utils.book_new();\r\n\r\n  // Лист 1: Общая информация\r\n  const summaryData = [\r\n    ['ОТЧЁТ ПО ПРЕДПРИЯТИЯМ МОСКВЫ'],\r\n    [''],\r\n    ['Название отчёта:', reportData.title],\r\n    ['Дата создания:', new Date().toLocaleString('ru-RU')],\r\n    ['Период:', `${reportData.period.from} - ${reportData.period.to}`],\r\n    [''],\r\n    ['ОБЩАЯ СТАТИСТИКА'],\r\n    ['Всего предприятий:', reportData.stats.totalEnterprises],\r\n    ['Общая выручка:', formatCurrencyForExport(reportData.stats.totalRevenue)],\r\n    ['Всего сотрудников:', formatNumberForExport(reportData.stats.totalEmployees)],\r\n    ['Средняя выручка:', formatCurrencyForExport(reportData.stats.averageRevenue)],\r\n    ['Средняя численность:', formatNumberForExport(Math.round(reportData.stats.averageEmployees))],\r\n  ];\r\n  \r\n  const summarySheet = XLSX.utils.aoa_to_sheet(summaryData);\r\n\r\n  // Применяем стили к заголовкам\r\n  if (!summarySheet['!merges']) summarySheet['!merges'] = [];\r\n  summarySheet['!merges'].push(\r\n    { s: { r: 0, c: 0 }, e: { r: 0, c: 1 } }, // Объединяем ячейки для главного заголовка\r\n    { s: { r: 6, c: 0 }, e: { r: 6, c: 1 } }  // Объединяем ячейки для \"ОБЩАЯ СТАТИСТИКА\"\r\n  );\r\n\r\n  XLSX.utils.book_append_sheet(workbook, summarySheet, 'Общая информация');\r\n\r\n  // Лист 2: Предприятия\r\n  if (reportData.enterprises.length > 0) {\r\n    const enterprisesData = reportData.enterprises.map(e => ({\r\n      'Название': e.name,\r\n      'Отрасль': e.industry,\r\n      'Регион': e.region,\r\n      'Сотрудники': e.employees,\r\n      'Выручка (руб.)': e.revenue,\r\n      'Налоги (руб.)': e.taxesPaid,\r\n      'Дата регистрации': e.registrationDate,\r\n      'Статус': e.status === 'active' ? 'Активно' : e.status === 'inactive' ? 'Неактивно' : 'Приостановлено',\r\n      'Адрес': e.contactInfo.address,\r\n      'Телефон': e.contactInfo.phone || '-',\r\n      'Email': e.contactInfo.email || '-',\r\n      'Координаты': e.latitude && e.longitude ? `${e.latitude}, ${e.longitude}` : '-'\r\n    }));\r\n\r\n    const enterprisesSheet = XLSX.utils.json_to_sheet(enterprisesData);\r\n    XLSX.utils.book_append_sheet(workbook, enterprisesSheet, 'Предприятия');\r\n  }\r\n\r\n  // Лист 3: Статистика по отраслям\r\n  if (reportData.industryStats && reportData.industryStats.length > 0) {\r\n    const industryData = reportData.industryStats.map(i => ({\r\n      'Отрасль': i.industry,\r\n      'Количество предприятий': i.count,\r\n      'Общая выручка (руб.)': i.totalRevenue,\r\n      'Средняя численность': i.averageEmployees,\r\n    }));\r\n\r\n    const industrySheet = XLSX.utils.json_to_sheet(industryData);\r\n    XLSX.utils.book_append_sheet(workbook, industrySheet, 'По отраслям');\r\n  }\r\n\r\n  // Лист 4: Статистика по регионам\r\n  if (reportData.regionStats && reportData.regionStats.length > 0) {\r\n    const regionData = reportData.regionStats.map(r => ({\r\n      'Регион': r.region,\r\n      'Количество предприятий': r.count,\r\n      'Общая выручка (руб.)': r.totalRevenue,\r\n      'Средняя численность': r.averageEmployees,\r\n    }));\r\n\r\n    const regionSheet = XLSX.utils.json_to_sheet(regionData);\r\n    XLSX.utils.book_append_sheet(workbook, regionSheet, 'По регионам');\r\n  }\r\n\r\n  // Сохранение файла с русским названием\r\n  const fileName = `Отчёт_предприятия_Москвы_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n  XLSX.writeFile(workbook, fileName);\r\n\r\n  return fileName;\r\n};\r\n\r\n// Обновленная генерация PDF отчета с улучшенной обработкой ошибок\r\nexport const generatePDFReport = async (reportData: ReportData) => {\r\n  try {\r\n    console.log('Начинаем генерацию PDF отчета...');\r\n\r\n    // Инициализируем pdfMake асинхронно\r\n    const pdf = await initializePdfMake();\r\n\r\n    if (!pdf) {\r\n      console.log('pdfMake не доступен, переключаемся на jsPDF');\r\n      return generateSimplePDFReport(reportData);\r\n    }\r\n\r\n    console.log('Создаем структуру документа...');\r\n\r\n    // Определяем документ с поддержкой русского языка\r\n    const docDefinition = {\r\n      pageSize: 'A4' as const,\r\n      pageMargins: [40, 60, 40, 60] as [number, number, number, number],\r\n\r\n      content: [\r\n        // Заголовок\r\n        {\r\n          text: 'ОТЧЁТ ПО ПРЕДПРИЯТИЯМ МОСКВЫ',\r\n          style: 'header',\r\n          alignment: 'center' as const,\r\n          margin: [0, 0, 0, 20] as [number, number, number, number]\r\n        },\r\n\r\n        // Информация о отчете\r\n        {\r\n          columns: [\r\n            {\r\n              width: '50%',\r\n              stack: [\r\n                { text: `Название: ${reportData.title}`, style: 'subheader' },\r\n                { text: `Дата создания: ${new Date().toLocaleDateString('ru-RU')}`, style: 'normal' },\r\n                { text: `Период: ${reportData.period.from} - ${reportData.period.to}`, style: 'normal' }\r\n              ]\r\n            },\r\n            {\r\n              width: '50%',\r\n              stack: [\r\n                { text: 'Общая статистика', style: 'subheader' },\r\n                { text: `Всего предприятий: ${formatNumberForExport(reportData.stats.totalEnterprises)}`, style: 'normal' },\r\n                { text: `Общая выручка: ${formatCurrencyForExport(reportData.stats.totalRevenue)}`, style: 'normal' }\r\n              ]\r\n            }\r\n          ],\r\n          margin: [0, 0, 0, 20] as [number, number, number, number]\r\n        },\r\n\r\n        // Дополнительная статистика\r\n        {\r\n          columns: [\r\n            {\r\n              width: '50%',\r\n              text: `Всего сотрудников: ${formatNumberForExport(reportData.stats.totalEmployees)}`,\r\n              style: 'normal'\r\n            },\r\n            {\r\n              width: '50%',\r\n              text: `Средняя выручка: ${formatCurrencyForExport(reportData.stats.averageRevenue)}`,\r\n              style: 'normal'\r\n            }\r\n          ],\r\n          margin: [0, 0, 0, 30] as [number, number, number, number]\r\n        }\r\n      ] as any[],\r\n\r\n      styles: {\r\n        header: {\r\n          fontSize: 18,\r\n          bold: true,\r\n          color: '#1f2937'\r\n        },\r\n        subheader: {\r\n          fontSize: 14,\r\n          bold: true,\r\n          color: '#3b82f6',\r\n          margin: [0, 10, 0, 5] as [number, number, number, number]\r\n        },\r\n        normal: {\r\n          fontSize: 11,\r\n          margin: [0, 2, 0, 2] as [number, number, number, number]\r\n        },\r\n        tableHeader: {\r\n          bold: true,\r\n          fontSize: 10,\r\n          color: 'white',\r\n          fillColor: '#3b82f6'\r\n        },\r\n        tableBody: {\r\n          fontSize: 9\r\n        }\r\n      }\r\n    };\r\n\r\n    // Добавляем статистику по отраслям\r\n    if (reportData.industryStats && reportData.industryStats.length > 0) {\r\n      docDefinition.content.push(\r\n        { text: 'Статистика по отраслям', style: 'subheader', pageBreak: 'before' },\r\n        {\r\n          table: {\r\n            headerRows: 1,\r\n            widths: ['30%', '20%', '30%', '20%'],\r\n            body: [\r\n              [\r\n                { text: 'Отрасль', style: 'tableHeader' },\r\n                { text: 'Количество', style: 'tableHeader' },\r\n                { text: 'Общая выручка', style: 'tableHeader' },\r\n                { text: 'Средняя численность', style: 'tableHeader' }\r\n              ],\r\n              ...reportData.industryStats.map(industry => [\r\n                { text: industry.industry, style: 'tableBody' },\r\n                { text: formatNumberForExport(industry.count), style: 'tableBody' },\r\n                { text: formatCurrencyForExport(industry.totalRevenue), style: 'tableBody' },\r\n                { text: formatNumberForExport(Math.round(industry.averageEmployees)), style: 'tableBody' }\r\n              ])\r\n            ]\r\n          },\r\n          layout: {\r\n            fillColor: (rowIndex: number) => rowIndex === 0 ? '#3b82f6' : (rowIndex % 2 === 0 ? '#f8f9fa' : null),\r\n            hLineColor: '#e5e7eb',\r\n            vLineColor: '#e5e7eb'\r\n          },\r\n          margin: [0, 10, 0, 20] as [number, number, number, number]\r\n        }\r\n      );\r\n    }\r\n\r\n    // Добавляем статистику по регионам\r\n    if (reportData.regionStats && reportData.regionStats.length > 0) {\r\n      docDefinition.content.push(\r\n        { text: 'Статистика по регионам', style: 'subheader' },\r\n        {\r\n          table: {\r\n            headerRows: 1,\r\n            widths: ['30%', '20%', '30%', '20%'],\r\n            body: [\r\n              [\r\n                { text: 'Регион', style: 'tableHeader' },\r\n                { text: 'Количество', style: 'tableHeader' },\r\n                { text: 'Общая выручка', style: 'tableHeader' },\r\n                { text: 'Средняя численность', style: 'tableHeader' }\r\n              ],\r\n              ...reportData.regionStats.map(region => [\r\n                { text: region.region, style: 'tableBody' },\r\n                { text: formatNumberForExport(region.count), style: 'tableBody' },\r\n                { text: formatCurrencyForExport(region.totalRevenue), style: 'tableBody' },\r\n                { text: formatNumberForExport(Math.round(region.averageEmployees)), style: 'tableBody' }\r\n              ])\r\n            ]\r\n          },\r\n          layout: {\r\n            fillColor: (rowIndex: number) => rowIndex === 0 ? '#10b981' : (rowIndex % 2 === 0 ? '#f0fdf4' : null),\r\n            hLineColor: '#e5e7eb',\r\n            vLineColor: '#e5e7eb'\r\n          },\r\n          margin: [0, 10, 0, 20] as [number, number, number, number]\r\n        }\r\n      );\r\n    }\r\n\r\n    // Добавляем топ предприятий\r\n    if (reportData.enterprises.length > 0) {\r\n      const topEnterprises = [...reportData.enterprises]\r\n        .sort((a, b) => b.revenue - a.revenue)\r\n        .slice(0, 10);\r\n\r\n      docDefinition.content.push(\r\n        { text: 'Топ 10 предприятий по выручке', style: 'subheader' },\r\n        {\r\n          table: {\r\n            headerRows: 1,\r\n            widths: ['35%', '25%', '15%', '25%'],\r\n            body: [\r\n              [\r\n                { text: 'Название', style: 'tableHeader' },\r\n                { text: 'Отрасль', style: 'tableHeader' },\r\n                { text: 'Сотрудники', style: 'tableHeader' },\r\n                { text: 'Выручка', style: 'tableHeader' }\r\n              ],\r\n              ...topEnterprises.map(enterprise => [\r\n                { text: enterprise.name, style: 'tableBody' },\r\n                { text: enterprise.industry, style: 'tableBody' },\r\n                { text: formatNumberForExport(enterprise.employees), style: 'tableBody' },\r\n                { text: formatCurrencyForExport(enterprise.revenue), style: 'tableBody' }\r\n              ])\r\n            ]\r\n          },\r\n          layout: {\r\n            fillColor: (rowIndex: number) => rowIndex === 0 ? '#8b5cf6' : (rowIndex % 2 === 0 ? '#faf5ff' : null),\r\n            hLineColor: '#e5e7eb',\r\n            vLineColor: '#e5e7eb'\r\n          },\r\n          margin: [0, 10, 0, 0] as [number, number, number, number]\r\n        }\r\n      );\r\n    }\r\n\r\n    // Создаем и скачиваем PDF\r\n    const fileName = `Отчёт_предприятия_Москвы_${new Date().toISOString().split('T')[0]}.pdf`;\r\n\r\n    console.log('Генерируем PDF файл...');\r\n    pdf.createPdf(docDefinition).download(fileName);\r\n\r\n    console.log('PDF успешно создан:', fileName);\r\n    return fileName;\r\n  } catch (error) {\r\n    console.error('Ошибка генерации PDF:', error);\r\n    console.log('Переключаемся на простой PDF через jsPDF');\r\n    // Fallback на простой PDF через jsPDF\r\n    return generateSimplePDFReport(reportData);\r\n  }\r\n};\r\n\r\n// Улучшенная функция для генерации упрощенного PDF через jsPDF\r\nexport const generateSimplePDFReport = (reportData: ReportData) => {\r\n  try {\r\n    console.log('Создаем упрощенный PDF отчет через jsPDF...');\r\n\r\n    const doc = new jsPDF();\r\n\r\n    // Добавляем поддержку Unicode через escape последовательности\r\n    const addUnicodeText = (text: string, x: number, y: number, fontSize: number = 12) => {\r\n      doc.setFontSize(fontSize);\r\n\r\n      // Простая замена основных кириллических символов\r\n      const cyrillicMap: { [key: string]: string } = {\r\n        'А': 'A', 'Б': 'B', 'В': 'V', 'Г': 'G', 'Д': 'D', 'Е': 'E', 'Ё': 'Yo',\r\n        'Ж': 'Zh', 'З': 'Z', 'И': 'I', 'Й': 'Y', 'К': 'K', 'Л': 'L', 'М': 'M',\r\n        'Н': 'N', 'О': 'O', 'П': 'P', 'Р': 'R', 'С': 'S', 'Т': 'T', 'У': 'U',\r\n        'Ф': 'F', 'Х': 'Kh', 'Ц': 'Ts', 'Ч': 'Ch', 'Ш': 'Sh', 'Щ': 'Sch',\r\n        'Ъ': '', 'Ы': 'Y', 'Ь': '', 'Э': 'E', 'Ю': 'Yu', 'Я': 'Ya',\r\n        'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e', 'ё': 'yo',\r\n        'ж': 'zh', 'з': 'z', 'и': 'i', 'й': 'y', 'к': 'k', 'л': 'l', 'м': 'm',\r\n        'н': 'n', 'о': 'o', 'п': 'p', 'р': 'r', 'с': 's', 'т': 't', 'у': 'u',\r\n        'ф': 'f', 'х': 'kh', 'ц': 'ts', 'ч': 'ch', 'ш': 'sh', 'щ': 'sch',\r\n        'ъ': '', 'ы': 'y', 'ь': '', 'э': 'e', 'ю': 'yu', 'я': 'ya'\r\n      };\r\n\r\n      const transliteratedText = text.replace(/[А-Яа-яЁё]/g, char => cyrillicMap[char] || char);\r\n      doc.text(transliteratedText, x, y);\r\n    };\r\n\r\n    // Заголовок\r\n    addUnicodeText('OTCHYOT PO PREDPRIYATIYAM MOSKVY', 105, 20, 18);\r\n    doc.setFontSize(14);\r\n    doc.text('(Report on Moscow Enterprises)', 105, 30, { align: 'center' });\r\n\r\n    // Основная информация\r\n    let yPosition = 50;\r\n    addUnicodeText(`Nazvanie: ${reportData.title}`, 20, yPosition, 12);\r\n    yPosition += 10;\r\n    addUnicodeText(`Data sozdaniya: ${new Date().toLocaleDateString('ru-RU')}`, 20, yPosition, 12);\r\n    yPosition += 10;\r\n    addUnicodeText(`Period: ${reportData.period.from} - ${reportData.period.to}`, 20, yPosition, 12);\r\n    yPosition += 20;\r\n\r\n    // Общая статистика\r\n    addUnicodeText('OBSHCHAYA STATISTIKA', 20, yPosition, 14);\r\n    yPosition += 15;\r\n\r\n    const stats = [\r\n      ['Vsego predpriyatiy:', formatNumberForExport(reportData.stats.totalEnterprises)],\r\n      ['Obshchaya vyruchka:', formatCurrencyForExport(reportData.stats.totalRevenue)],\r\n      ['Vsego sotrudnikov:', formatNumberForExport(reportData.stats.totalEmployees)],\r\n      ['Srednyaya vyruchka:', formatCurrencyForExport(reportData.stats.averageRevenue)],\r\n      ['Srednyaya chislennost:', formatNumberForExport(Math.round(reportData.stats.averageEmployees))]\r\n    ];\r\n\r\n    stats.forEach(([label, value]) => {\r\n      doc.setFontSize(11);\r\n      doc.text(label, 20, yPosition);\r\n      doc.text(value, 120, yPosition);\r\n      yPosition += 8;\r\n    });\r\n\r\n    // Таблица с топ предприятиями\r\n    if (reportData.enterprises.length > 0) {\r\n      const topEnterprises = [...reportData.enterprises]\r\n        .sort((a, b) => b.revenue - a.revenue)\r\n        .slice(0, 10);\r\n\r\n      yPosition += 10;\r\n      addUnicodeText('TOP 10 PREDPRIYATIY PO VYRUCHKE', 20, yPosition, 14);\r\n      yPosition += 10;\r\n\r\n      const tableData = topEnterprises.map(enterprise => [\r\n        enterprise.name.replace(/[А-Яа-яЁё]/g, char => {\r\n          const cyrillicMap: { [key: string]: string } = {\r\n            'А': 'A', 'Б': 'B', 'В': 'V', 'Г': 'G', 'Д': 'D', 'Е': 'E', 'Ё': 'Yo',\r\n            'Ж': 'Zh', 'З': 'Z', 'И': 'I', 'Й': 'Y', 'К': 'K', 'Л': 'L', 'М': 'M',\r\n            'Н': 'N', 'О': 'O', 'П': 'P', 'Р': 'R', 'С': 'S', 'Т': 'T', 'У': 'U',\r\n            'Ф': 'F', 'Х': 'Kh', 'Ц': 'Ts', 'Ч': 'Ch', 'Ш': 'Sh', 'Щ': 'Sch',\r\n            'Ъ': '', 'Ы': 'Y', 'Ь': '', 'Э': 'E', 'Ю': 'Yu', 'Я': 'Ya',\r\n            'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e', 'ё': 'yo',\r\n            'ж': 'zh', 'з': 'z', 'и': 'i', 'й': 'y', 'к': 'k', 'л': 'l', 'м': 'm',\r\n            'н': 'n', 'о': 'o', 'п': 'p', 'р': 'r', 'с': 's', 'т': 't', 'у': 'u',\r\n            'ф': 'f', 'х': 'kh', 'ц': 'ts', 'ч': 'ch', 'ш': 'sh', 'щ': 'sch',\r\n            'ъ': '', 'ы': 'y', 'ь': '', 'э': 'e', 'ю': 'yu', 'я': 'ya'\r\n          };\r\n          return cyrillicMap[char] || char;\r\n        }),\r\n        enterprise.industry.replace(/[А-Яа-яЁё]/g, char => {\r\n          const cyrillicMap: { [key: string]: string } = {\r\n            'А': 'A', 'Б': 'B', 'В': 'V', 'Г': 'G', 'Д': 'D', 'Е': 'E', 'Ё': 'Yo',\r\n            'Ж': 'Zh', 'З': 'Z', 'И': 'I', 'Й': 'Y', 'К': 'K', 'Л': 'L', 'М': 'M',\r\n            'Н': 'N', 'О': 'O', 'П': 'P', 'Р': 'R', 'С': 'S', 'Т': 'T', 'У': 'U',\r\n            'Ф': 'F', 'Х': 'Kh', 'Ц': 'Ts', 'Ч': 'Ch', 'Ш': 'Sh', 'Щ': 'Sch',\r\n            'Ъ': '', 'Ы': 'Y', 'Ь': '', 'Э': 'E', 'Ю': 'Yu', 'Я': 'Ya',\r\n            'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e', 'ё': 'yo',\r\n            'ж': 'zh', 'з': 'z', 'и': 'i', 'й': 'y', 'к': 'k', 'л': 'l', 'м': 'm',\r\n            'н': 'n', 'о': 'o', 'п': 'p', 'р': 'r', 'с': 's', 'т': 't', 'у': 'u',\r\n            'ф': 'f', 'х': 'kh', 'ц': 'ts', 'ч': 'ch', 'ш': 'sh', 'щ': 'sch',\r\n            'ъ': '', 'ы': 'y', 'ь': '', 'э': 'e', 'ю': 'yu', 'я': 'ya'\r\n          };\r\n          return cyrillicMap[char] || char;\r\n        }),\r\n        formatNumberForExport(enterprise.employees),\r\n        formatCurrencyForExport(enterprise.revenue)\r\n      ]);\r\n\r\n      autoTable(doc, {\r\n        head: [['Nazvanie', 'Otrasl', 'Sotrudniki', 'Vyruchka']],\r\n        body: tableData,\r\n        startY: yPosition,\r\n        styles: {\r\n          fontSize: 8,\r\n          cellPadding: 2\r\n        },\r\n        headStyles: {\r\n          fillColor: [59, 130, 246],\r\n          textColor: 255\r\n        },\r\n        alternateRowStyles: {\r\n          fillColor: [248, 250, 252]\r\n        }\r\n      });\r\n    }\r\n\r\n    // Сохранение файла\r\n    const fileName = `Report_Moscow_Enterprises_${new Date().toISOString().split('T')[0]}.pdf`;\r\n    doc.save(fileName);\r\n\r\n    console.log('Упрощенный PDF успешно создан:', fileName);\r\n    return fileName;\r\n  } catch (error) {\r\n    console.error('Ошибка создания упрощенного PDF:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Новая функция для генерации HTML отчета (полная поддержка русского языка)\r\nexport const generateHTMLReport = (reportData: ReportData): string => {\r\n  const htmlContent = `\r\n    <!DOCTYPE html>\r\n    <html lang=\"ru\">\r\n    <head>\r\n        <meta charset=\"UTF-8\">\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n        <title>${reportData.title}</title>\r\n        <style>\r\n            body {\r\n                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n                margin: 0;\r\n                padding: 20px;\r\n                line-height: 1.6;\r\n                color: #333;\r\n            }\r\n            .header {\r\n                text-align: center;\r\n                margin-bottom: 30px;\r\n                padding: 20px;\r\n                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n                color: white;\r\n                border-radius: 8px;\r\n            }\r\n            .header h1 {\r\n                margin: 0;\r\n                font-size: 28px;\r\n            }\r\n            .meta-info {\r\n                background: #f8f9fa;\r\n                padding: 15px;\r\n                border-radius: 8px;\r\n                margin-bottom: 20px;\r\n            }\r\n            .stats-grid {\r\n                display: grid;\r\n                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n                gap: 15px;\r\n                margin-bottom: 30px;\r\n            }\r\n            .stat-card {\r\n                background: white;\r\n                padding: 20px;\r\n                border-radius: 8px;\r\n                box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n                border-left: 4px solid #3b82f6;\r\n            }\r\n            .stat-card h3 {\r\n                margin: 0 0 10px 0;\r\n                color: #1f2937;\r\n                font-size: 14px;\r\n                text-transform: uppercase;\r\n                font-weight: 600;\r\n            }\r\n            .stat-card .value {\r\n                font-size: 24px;\r\n                font-weight: bold;\r\n                color: #3b82f6;\r\n            }\r\n            table {\r\n                width: 100%;\r\n                border-collapse: collapse;\r\n                margin-bottom: 30px;\r\n                background: white;\r\n                border-radius: 8px;\r\n                overflow: hidden;\r\n                box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n            }\r\n            th, td {\r\n                text-align: left;\r\n                padding: 12px;\r\n                border-bottom: 1px solid #e5e7eb;\r\n            }\r\n            th {\r\n                background: #f3f4f6;\r\n                font-weight: 600;\r\n                color: #374151;\r\n            }\r\n            tr:hover {\r\n                background: #f9fafb;\r\n            }\r\n            .section-title {\r\n                font-size: 20px;\r\n                font-weight: bold;\r\n                margin: 30px 0 15px 0;\r\n                color: #1f2937;\r\n                border-bottom: 2px solid #3b82f6;\r\n                padding-bottom: 8px;\r\n            }\r\n            .print-button {\r\n                position: fixed;\r\n                top: 20px;\r\n                right: 20px;\r\n                background: #3b82f6;\r\n                color: white;\r\n                border: none;\r\n                padding: 10px 20px;\r\n                border-radius: 5px;\r\n                cursor: pointer;\r\n                font-size: 14px;\r\n            }\r\n            @media print {\r\n                .print-button { display: none; }\r\n                body { margin: 0; padding: 15px; }\r\n            }\r\n        </style>\r\n    </head>\r\n    <body>\r\n        <button class=\"print-button\" onclick=\"window.print()\">Печать отчёта</button>\r\n        \r\n        <div class=\"header\">\r\n            <h1>ОТЧЁТ ПО ПРЕДПРИЯТИЯМ МОСКВЫ</h1>\r\n            <h2>${reportData.title}</h2>\r\n        </div>\r\n\r\n        <div class=\"meta-info\">\r\n            <strong>Дата создания:</strong> ${new Date().toLocaleString('ru-RU')}<br>\r\n            <strong>Период:</strong> ${reportData.period.from} - ${reportData.period.to}\r\n        </div>\r\n\r\n        <div class=\"section-title\">Общая статистика</div>\r\n        <div class=\"stats-grid\">\r\n            <div class=\"stat-card\">\r\n                <h3>Всего предприятий</h3>\r\n                <div class=\"value\">${formatNumberForExport(reportData.stats.totalEnterprises)}</div>\r\n            </div>\r\n            <div class=\"stat-card\">\r\n                <h3>Общая выручка</h3>\r\n                <div class=\"value\">${formatCurrencyForExport(reportData.stats.totalRevenue)}</div>\r\n            </div>\r\n            <div class=\"stat-card\">\r\n                <h3>Всего сотрудников</h3>\r\n                <div class=\"value\">${formatNumberForExport(reportData.stats.totalEmployees)}</div>\r\n            </div>\r\n            <div class=\"stat-card\">\r\n                <h3>Средняя выручка</h3>\r\n                <div class=\"value\">${formatCurrencyForExport(reportData.stats.averageRevenue)}</div>\r\n            </div>\r\n        </div>\r\n\r\n        ${reportData.industryStats && reportData.industryStats.length > 0 ? `\r\n        <div class=\"section-title\">Статистика по отраслям</div>\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Отрасль</th>\r\n                    <th>Количество предприятий</th>\r\n                    <th>Общая выручка</th>\r\n                    <th>Средняя численность</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                ${reportData.industryStats.map(i => `\r\n                <tr>\r\n                    <td>${i.industry}</td>\r\n                    <td>${formatNumberForExport(i.count)}</td>\r\n                    <td>${formatCurrencyForExport(i.totalRevenue)}</td>\r\n                    <td>${formatNumberForExport(Math.round(i.averageEmployees))}</td>\r\n                </tr>\r\n                `).join('')}\r\n            </tbody>\r\n        </table>\r\n        ` : ''}\r\n\r\n        ${reportData.regionStats && reportData.regionStats.length > 0 ? `\r\n        <div class=\"section-title\">Статистика по регионам</div>\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Регион</th>\r\n                    <th>Количество предприятий</th>\r\n                    <th>Общая выручка</th>\r\n                    <th>Средняя численность</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                ${reportData.regionStats.map(r => `\r\n                <tr>\r\n                    <td>${r.region}</td>\r\n                    <td>${formatNumberForExport(r.count)}</td>\r\n                    <td>${formatCurrencyForExport(r.totalRevenue)}</td>\r\n                    <td>${formatNumberForExport(Math.round(r.averageEmployees))}</td>\r\n                </tr>\r\n                `).join('')}\r\n            </tbody>\r\n        </table>\r\n        ` : ''}\r\n\r\n        ${reportData.enterprises.length > 0 ? `\r\n        <div class=\"section-title\">Топ 10 предприятий по выручке</div>\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Название</th>\r\n                    <th>Отрасль</th>\r\n                    <th>Регион</th>\r\n                    <th>Сотрудники</th>\r\n                    <th>Выручка</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                ${reportData.enterprises\r\n                  .sort((a, b) => b.revenue - a.revenue)\r\n                  .slice(0, 10)\r\n                  .map(e => `\r\n                <tr>\r\n                    <td>${e.name}</td>\r\n                    <td>${e.industry}</td>\r\n                    <td>${e.region}</td>\r\n                    <td>${formatNumberForExport(e.employees)}</td>\r\n                    <td>${formatCurrencyForExport(e.revenue)}</td>\r\n                </tr>\r\n                `).join('')}\r\n            </tbody>\r\n        </table>\r\n        ` : ''}\r\n    </body>\r\n    </html>\r\n  `;\r\n\r\n  // Создаем и открываем HTML файл в новом окне\r\n  const blob = new Blob([htmlContent], { type: 'text/html;charset=utf-8' });\r\n  const url = URL.createObjectURL(blob);\r\n  const newWindow = window.open(url, '_blank');\r\n\r\n  if (newWindow) {\r\n    newWindow.document.title = `Отчёт - ${reportData.title}`;\r\n  }\r\n\r\n  return htmlContent;\r\n};\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1469, "column": 0}, "map": {"version":3,"sources":["file:///C:/projects/hakaton/frontend/src/app/reports/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { Download, FileText, Building2, TrendingUp, Users, AlertCircle, Upload as UploadIcon, Globe } from 'lucide-react';\r\nimport Link from 'next/link';\r\nimport { Enterprise } from '../types/enterprise';\r\nimport { formatNumber, formatCurrency, INDUSTRIES, MOSCOW_REGIONS } from '../lib/data-utils';\r\nimport { calculateOverallStats, calculateIndustryStats, calculateRegionStats, filterEnterprises } from '../lib/analytics';\r\nimport { getEnterprises } from '../lib/api-client';\r\nimport { generateExcelReport, generatePDFReport, generateHTMLReport } from '../lib/report-generator';\r\n\r\ninterface ReportConfig {\r\n  title: string;\r\n  dateRange: {\r\n    from: Date;\r\n    to: Date;\r\n  };\r\n  includeIndustries: string[];\r\n  includeRegions: string[];\r\n  sections: {\r\n    overview: boolean;\r\n    industries: boolean;\r\n    regions: boolean;\r\n    topEnterprises: boolean;\r\n    trends: boolean;\r\n  };\r\n}\r\n\r\nexport default function ReportsPage() {\r\n  const [enterprises, setEnterprises] = useState<Enterprise[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [generatingReport, setGeneratingReport] = useState(false);\r\n  const [reportConfig, setReportConfig] = useState<ReportConfig>({\r\n    title: 'Отчёт по предприятиям Москвы',\r\n    dateRange: {\r\n      from: new Date(2015, 0, 1), // С 2015 года, чтобы охватить все данные\r\n      to: new Date()\r\n    },\r\n    includeIndustries: [],\r\n    includeRegions: [],\r\n    sections: {\r\n      overview: true,\r\n      industries: true,\r\n      regions: true,\r\n      topEnterprises: true,\r\n      trends: true\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Загружаем данные из бэкенда\r\n    const loadData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const response = await getEnterprises();\r\n        if (response.success && response.data) {\r\n          setEnterprises(response.data);\r\n        } else {\r\n          setError('Не удалось загрузить данные');\r\n        }\r\n      } catch (err) {\r\n        setError(`Ошибка загрузки: ${(err as Error).message}`);\r\n        console.error('Ошибка загрузки данных:', err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadData();\r\n  }, []);\r\n\r\n  const filteredEnterprises = filterEnterprises(enterprises, {\r\n    dateRange: reportConfig.dateRange,\r\n    industries: reportConfig.includeIndustries.length > 0 ? reportConfig.includeIndustries : undefined,\r\n    regions: reportConfig.includeRegions.length > 0 ? reportConfig.includeRegions : undefined\r\n  });\r\n\r\n  const overallStats = calculateOverallStats(filteredEnterprises);\r\n  const industryStats = calculateIndustryStats(filteredEnterprises);\r\n  const regionStats = calculateRegionStats(filteredEnterprises);\r\n\r\n  const handleGenerateReport = async (format: 'pdf' | 'excel' | 'html') => {\r\n    setGeneratingReport(true);\r\n\r\n    try {\r\n      console.log(`Начинаем генерацию отчета в формате ${format.toUpperCase()}...`);\r\n\r\n      // Подготавливаем данные для отчета\r\n      const reportData = {\r\n        title: reportConfig.title,\r\n        period: {\r\n          from: reportConfig.dateRange.from.toLocaleDateString('ru-RU'),\r\n          to: reportConfig.dateRange.to.toLocaleDateString('ru-RU')\r\n        },\r\n        enterprises: filteredEnterprises,\r\n        stats: {\r\n          totalEnterprises: overallStats.totalEnterprises,\r\n          totalRevenue: overallStats.totalRevenue,\r\n          totalEmployees: overallStats.totalEmployees,\r\n          averageRevenue: overallStats.averageRevenue,\r\n          averageEmployees: overallStats.averageEmployees,\r\n        },\r\n        industryStats: reportConfig.sections.industries ? industryStats : undefined,\r\n        regionStats: reportConfig.sections.regions ? regionStats : undefined,\r\n      };\r\n\r\n      // Генерируем отчет в нужном фор��ате\r\n      if (format === 'excel') {\r\n        console.log('Генерируем Excel отчет...');\r\n        generateExcelReport(reportData);\r\n        console.log('Excel отчет успешно создан');\r\n      } else if (format === 'html') {\r\n        console.log('Генерируем HTML отчет...');\r\n        generateHTMLReport(reportData);\r\n        console.log('HTML отчет успешно ��оздан');\r\n      } else {\r\n        console.log('Генерируем PDF отчет...');\r\n        await generatePDFReport(reportData); // Теперь ждем завершения асинхронной функции\r\n        console.log('PDF отчет успеш��о создан');\r\n      }\r\n\r\n      // Показываем уведомление об успехе\r\n      alert(`Отчет в формате ${format.toUpperCase()} успешно сгенерирован и загружен!`);\r\n    } catch (error) {\r\n      console.error('Ошибка генерации отчета:', error);\r\n      alert(`Ошибка при генерации отчета: ${(error as Error).message}`);\r\n    } finally {\r\n      setGeneratingReport(false);\r\n    }\r\n  };\r\n\r\n  const updateReportConfig = (key: keyof ReportConfig, value: unknown) => {\r\n    setReportConfig(prev => ({\r\n      ...prev,\r\n      [key]: value\r\n    }));\r\n  };\r\n\r\n  const updateSection = (section: keyof ReportConfig['sections'], value: boolean) => {\r\n    setReportConfig(prev => ({\r\n      ...prev,\r\n      sections: {\r\n        ...prev.sections,\r\n        [section]: value\r\n      }\r\n    }));\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-64\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\r\n          <div className=\"text-lg text-gray-600 mt-4\">Загрузка данных...</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-64\">\r\n        <div className=\"text-center\">\r\n          <AlertCircle className=\"w-12 h-12 text-red-500 mx-auto mb-4\" />\r\n          <div className=\"text-lg text-red-600\">{error}</div>\r\n          <p className=\"text-gray-600 mt-2\">Проверьте, что бэкенд запущен на порту 4000</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (enterprises.length === 0) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-64\">\r\n        <div className=\"text-center\">\r\n          <UploadIcon className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\r\n          <div className=\"text-lg text-gray-600\">Нет данных для отчетов</div>\r\n          <p className=\"text-gray-500 mt-2\">Загрузите файл с данными предприятий</p>\r\n          <Link\r\n            href=\"/upload\"\r\n            className=\"mt-4 inline-flex items-center bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors\"\r\n          >\r\n            <UploadIcon className=\"w-5 h-5 mr-2\" />\r\n            Загрузить данные\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"max-w-6xl mx-auto space-y-8\">\r\n      {/* Заголовок */}\r\n      <div>\r\n        <h1 className=\"text-3xl font-bold text-gray-900\">Генерация отчётов</h1>\r\n        <p className=\"text-gray-600 mt-2\">\r\n          Создайте детальные отчёты по предприятиям Москвы в различных форматах\r\n        </p>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\r\n        {/* Конфигурация отчёта */}\r\n        <div className=\"lg:col-span-2 space-y-6\">\r\n          {/* Основные настройки */}\r\n          <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Основные настройки</h3>\r\n\r\n            <div className=\"space-y-4\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Название отчёта\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={reportConfig.title}\r\n                  onChange={(e) => updateReportConfig('title', e.target.value)}\r\n                  className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    Дата начала\r\n                  </label>\r\n                  <input\r\n                    type=\"date\"\r\n                    value={reportConfig.dateRange.from.toISOString().split('T')[0]}\r\n                    onChange={(e) => updateReportConfig('dateRange', {\r\n                      ...reportConfig.dateRange,\r\n                      from: new Date(e.target.value)\r\n                    })}\r\n                    className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    Дата окончания\r\n                  </label>\r\n                  <input\r\n                    type=\"date\"\r\n                    value={reportConfig.dateRange.to.toISOString().split('T')[0]}\r\n                    onChange={(e) => updateReportConfig('dateRange', {\r\n                      ...reportConfig.dateRange,\r\n                      to: new Date(e.target.value)\r\n                    })}\r\n                    className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Фильтры */}\r\n          <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Фильтры данных</h3>\r\n\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Отрасли (оставьте пустым для всех)\r\n                </label>\r\n                <select\r\n                  multiple\r\n                  value={reportConfig.includeIndustries}\r\n                  onChange={(e) => {\r\n                    const selected = Array.from(e.target.selectedOptions, option => option.value);\r\n                    updateReportConfig('includeIndustries', selected);\r\n                  }}\r\n                  className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                  size={6}\r\n                >\r\n                  {INDUSTRIES.map(industry => (\r\n                    <option key={industry} value={industry}>{industry}</option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Регионы (оставьте пустым для всех)\r\n                </label>\r\n                <select\r\n                  multiple\r\n                  value={reportConfig.includeRegions}\r\n                  onChange={(e) => {\r\n                    const selected = Array.from(e.target.selectedOptions, option => option.value);\r\n                    updateReportConfig('includeRegions', selected);\r\n                  }}\r\n                  className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                  size={6}\r\n                >\r\n                  {MOSCOW_REGIONS.map(region => (\r\n                    <option key={region} value={region}>{region}</option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Разделы отчёта */}\r\n          <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Разделы отчёта</h3>\r\n\r\n            <div className=\"space-y-3\">\r\n              {Object.entries(reportConfig.sections).map(([key, value]) => {\r\n                const sectionNames = {\r\n                  overview: 'Общая статистика',\r\n                  industries: 'Анализ по отраслям',\r\n                  regions: 'Анализ по регионам',\r\n                  topEnterprises: 'Топ предприятия',\r\n                  trends: 'Тренды и динамика'\r\n                };\r\n\r\n                return (\r\n                  <label key={key} className=\"flex items-center space-x-3\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={value}\r\n                      onChange={(e) => updateSection(key as keyof ReportConfig['sections'], e.target.checked)}\r\n                      className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\r\n                    />\r\n                    <span className=\"text-gray-700\">{sectionNames[key as keyof typeof sectionNames]}</span>\r\n                  </label>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Превью и генерация */}\r\n        <div className=\"space-y-6\">\r\n          {/* Превью данных */}\r\n          <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Превью данных</h3>\r\n\r\n            <div className=\"space-y-4\">\r\n              <div className=\"flex items-center justify-between p-3 bg-blue-50 rounded-lg\">\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <Building2 className=\"w-5 h-5 text-blue-600\" />\r\n                  <span className=\"text-sm font-medium text-blue-900\">Предприятий</span>\r\n                </div>\r\n                <span className=\"text-blue-900 font-bold\">{formatNumber(filteredEnterprises.length)}</span>\r\n              </div>\r\n\r\n              <div className=\"flex items-center justify-between p-3 bg-green-50 rounded-lg\">\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <TrendingUp className=\"w-5 h-5 text-green-600\" />\r\n                  <span className=\"text-sm font-medium text-green-900\">Общая выручка</span>\r\n                </div>\r\n                <span className=\"text-green-900 font-bold text-sm\">\r\n                  {formatCurrency(overallStats.totalRevenue)}\r\n                </span>\r\n              </div>\r\n\r\n              <div className=\"flex items-center justify-between p-3 bg-purple-50 rounded-lg\">\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <Users className=\"w-5 h-5 text-purple-600\" />\r\n                  <span className=\"text-sm font-medium text-purple-900\">Сотрудников</span>\r\n                </div>\r\n                <span className=\"text-purple-900 font-bold\">{formatNumber(overallStats.totalEmployees)}</span>\r\n              </div>\r\n\r\n              <div className=\"pt-3 border-t border-gray-200\">\r\n                <p className=\"text-xs text-gray-500\">\r\n                  Период: {reportConfig.dateRange.from.toLocaleDateString('ru-RU')} - {reportConfig.dateRange.to.toLocaleDateString('ru-RU')}\r\n                </p>\r\n                {reportConfig.includeIndustries.length > 0 && (\r\n                  <p className=\"text-xs text-gray-500 mt-1\">\r\n                    Отрасли: {reportConfig.includeIndustries.length}\r\n                  </p>\r\n                )}\r\n                {reportConfig.includeRegions.length > 0 && (\r\n                  <p className=\"text-xs text-gray-500 mt-1\">\r\n                    Регионы: {reportConfig.includeRegions.length}\r\n                  </p>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Генерация отчёта */}\r\n          <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Генерация отчёта</h3>\r\n\r\n            <div className=\"space-y-3\">\r\n              <button\r\n                onClick={() => handleGenerateReport('pdf')}\r\n                disabled={generatingReport}\r\n                className=\"w-full flex items-center justify-center space-x-2 p-3 bg-red-600 text-white rounded-lg hover:bg-red-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors\"\r\n              >\r\n                {generatingReport ? (\r\n                  <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white\"></div>\r\n                ) : (\r\n                  <FileText className=\"w-5 h-5\" />\r\n                )}\r\n                <span>Скачать PDF</span>\r\n              </button>\r\n\r\n              <button\r\n                onClick={() => handleGenerateReport('excel')}\r\n                disabled={generatingReport}\r\n                className=\"w-full flex items-center justify-center space-x-2 p-3 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors\"\r\n              >\r\n                {generatingReport ? (\r\n                  <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white\"></div>\r\n                ) : (\r\n                  <Download className=\"w-5 h-5\" />\r\n                )}\r\n                <span>Скачать Excel</span>\r\n              </button>\r\n\r\n              <button\r\n                onClick={() => handleGenerateReport('html')}\r\n                disabled={generatingReport}\r\n                className=\"w-full flex items-center justify-center space-x-2 p-3 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors\"\r\n              >\r\n                {generatingReport ? (\r\n                  <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white\"></div>\r\n                ) : (\r\n                  <Globe className=\"w-5 h-5\" />\r\n                )}\r\n                <span>Скачать HTML</span>\r\n              </button>\r\n            </div>\r\n\r\n            <div className=\"mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg\">\r\n              <p className=\"text-xs text-yellow-800\">\r\n                💡 Отчёты генерируются на основе текущих фильтров и выбранных разделов\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Шаблоны отчётов */}\r\n          <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Быстрые шаблоны</h3>\r\n\r\n            <div className=\"space-y-2\">\r\n              <button\r\n                onClick={() => setReportConfig({\r\n                  ...reportConfig,\r\n                  title: 'Отчёт по всем предприятиям',\r\n                  includeIndustries: [],\r\n                  includeRegions: [],\r\n                  sections: {\r\n                    overview: true,\r\n                    industries: true,\r\n                    regions: true,\r\n                    topEnterprises: true,\r\n                    trends: true\r\n                  }\r\n                })}\r\n                className=\"w-full text-left p-2 text-sm text-blue-600 hover:bg-blue-50 rounded\"\r\n              >\r\n                📊 Полный отчёт\r\n              </button>\r\n\r\n              <button\r\n                onClick={() => setReportConfig({\r\n                  ...reportConfig,\r\n                  title: 'Краткая сводка',\r\n                  sections: {\r\n                    overview: true,\r\n                    industries: false,\r\n                    regions: false,\r\n                    topEnterprises: true,\r\n                    trends: false\r\n                  }\r\n                })}\r\n                className=\"w-full text-left p-2 text-sm text-blue-600 hover:bg-blue-50 rounded\"\r\n              >\r\n                📋 Краткая сводка\r\n              </button>\r\n\r\n              <button\r\n                onClick={() => setReportConfig({\r\n                  ...reportConfig,\r\n                  title: 'Анализ по отраслям',\r\n                  sections: {\r\n                    overview: true,\r\n                    industries: true,\r\n                    regions: false,\r\n                    topEnterprises: false,\r\n                    trends: true\r\n                  }\r\n                })}\r\n                className=\"w-full text-left p-2 text-sm text-blue-600 hover:bg-blue-50 rounded\"\r\n              >\r\n                🏭 Отраслевой анализ\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}