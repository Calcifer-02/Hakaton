{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/projects/hakaton/frontend/src/app/lib/data-utils.ts"],"sourcesContent":["import * as XLSX from 'xlsx';\r\nimport Papa from 'papaparse';\r\nimport { Enterprise, UploadResult } from '../types/enterprise';\r\n\r\n// Московские регионы\r\nexport const MOSCOW_REGIONS = [\r\n  'Центральный',\r\n  'Северный',\r\n  'Северо-Восточный',\r\n  'Восточный',\r\n  'Юго-Восточный',\r\n  'Южный',\r\n  'Юго-Западный',\r\n  'Западный',\r\n  'Северо-Западный',\r\n  'Новомосковский',\r\n  'Троицкий'\r\n];\r\n\r\n// Основные отрасли промышленности\r\nexport const INDUSTRIES = [\r\n  'Машиностроение',\r\n  'Пищевая промышленность',\r\n  'Химическая промышленность',\r\n  'Текстильная промышленность',\r\n  'Металлургия',\r\n  'Электроника',\r\n  'Строительные материалы',\r\n  'Фармацевтика',\r\n  'Автомобилестроение',\r\n  'Полиграфия',\r\n  'Другое'\r\n];\r\n\r\n// Валидация данных предприятия\r\nexport const validateEnterprise = (data: Record<string, unknown>): { isValid: boolean; errors: string[] } => {\r\n  const errors: string[] = [];\r\n\r\n  if (!data.name || typeof data.name !== 'string') {\r\n    errors.push('Некорректное название предприятия');\r\n  }\r\n\r\n  if (!data.industry || !INDUSTRIES.includes(data.industry as string)) {\r\n    errors.push('Некорректная отрасль');\r\n  }\r\n\r\n  if (!data.region || !MOSCOW_REGIONS.includes(data.region as string)) {\r\n    errors.push('Некорректный регион');\r\n  }\r\n\r\n  if (!data.employees || Number(data.employees) < 0) {\r\n    errors.push('Некорректное количество сотрудников');\r\n  }\r\n\r\n  if (!data.revenue || Number(data.revenue) < 0) {\r\n    errors.push('Некорректная выручка');\r\n  }\r\n\r\n  const contactInfo = data.contactInfo as Record<string, unknown> | undefined;\r\n  if (!contactInfo?.address) {\r\n    errors.push('Отсутствует адрес');\r\n  }\r\n\r\n  return {\r\n    isValid: errors.length === 0,\r\n    errors\r\n  };\r\n};\r\n\r\n// Парсинг CSV файла\r\nexport const parseCSV = (file: File): Promise<UploadResult> => {\r\n  return new Promise((resolve) => {\r\n    Papa.parse(file, {\r\n      header: true,\r\n      complete: (results) => {\r\n        const enterprises: Enterprise[] = [];\r\n        const errors: string[] = [];\r\n        let errorCount = 0;\r\n\r\n        results.data.forEach((row: unknown, index: number) => {\r\n          const rowData = row as Record<string, unknown>;\r\n          const validation = validateEnterprise(rowData);\r\n\r\n          if (validation.isValid) {\r\n            const enterprise: Enterprise = {\r\n              id: crypto.randomUUID(),\r\n              name: String(rowData.name),\r\n              industry: String(rowData.industry),\r\n              region: String(rowData.region),\r\n              employees: parseInt(String(rowData.employees)) || 0,\r\n              revenue: parseFloat(String(rowData.revenue)) || 0,\r\n              taxesPaid: parseFloat(String(rowData.taxesPaid)) || 0,\r\n              registrationDate: new Date(String(rowData.registrationDate) || Date.now()),\r\n              lastUpdated: new Date(),\r\n              status: (rowData.status as 'active' | 'inactive' | 'suspended') || 'active',\r\n              contactInfo: {\r\n                address: String(rowData.address),\r\n                phone: String(rowData.phone || ''),\r\n                email: String(rowData.email || '')\r\n              }\r\n            };\r\n            enterprises.push(enterprise);\r\n          } else {\r\n            errorCount++;\r\n            errors.push(`Строка ${index + 1}: ${validation.errors.join(', ')}`);\r\n          }\r\n        });\r\n\r\n        resolve({\r\n          success: true,\r\n          message: `Обработано ${enterprises.length} записей из ${results.data.length}`,\r\n          processedCount: enterprises.length,\r\n          errorCount,\r\n          errors,\r\n          data: enterprises\r\n        });\r\n      },\r\n      error: (error) => {\r\n        resolve({\r\n          success: false,\r\n          message: `Ошибка парсинга CSV: ${error.message}`,\r\n          processedCount: 0,\r\n          errorCount: 1,\r\n          errors: [error.message]\r\n        });\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n// Парсинг Excel файла\r\nexport const parseExcel = (file: File): Promise<UploadResult> => {\r\n  return new Promise((resolve) => {\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = (e) => {\r\n      try {\r\n        const data = e.target?.result;\r\n        const workbook = XLSX.read(data, { type: 'binary' });\r\n        const sheetName = workbook.SheetNames[0];\r\n        const worksheet = workbook.Sheets[sheetName];\r\n        const jsonData = XLSX.utils.sheet_to_json(worksheet);\r\n\r\n        const enterprises: Enterprise[] = [];\r\n        const errors: string[] = [];\r\n        let errorCount = 0;\r\n\r\n        jsonData.forEach((row: unknown, index: number) => {\r\n          const rowData = row as Record<string, unknown>;\r\n          const validation = validateEnterprise(rowData);\r\n\r\n          if (validation.isValid) {\r\n            const enterprise: Enterprise = {\r\n              id: crypto.randomUUID(),\r\n              name: String(rowData.name),\r\n              industry: String(rowData.industry),\r\n              region: String(rowData.region),\r\n              employees: parseInt(String(rowData.employees)) || 0,\r\n              revenue: parseFloat(String(rowData.revenue)) || 0,\r\n              taxesPaid: parseFloat(String(rowData.taxesPaid)) || 0,\r\n              registrationDate: new Date(String(rowData.registrationDate) || Date.now()),\r\n              lastUpdated: new Date(),\r\n              status: (rowData.status as 'active' | 'inactive' | 'suspended') || 'active',\r\n              contactInfo: {\r\n                address: String(rowData.address),\r\n                phone: String(rowData.phone || ''),\r\n                email: String(rowData.email || '')\r\n              }\r\n            };\r\n            enterprises.push(enterprise);\r\n          } else {\r\n            errorCount++;\r\n            errors.push(`Строка ${index + 1}: ${validation.errors.join(', ')}`);\r\n          }\r\n        });\r\n\r\n        resolve({\r\n          success: true,\r\n          message: `Обработано ${enterprises.length} записей из ${jsonData.length}`,\r\n          processedCount: enterprises.length,\r\n          errorCount,\r\n          errors,\r\n          data: enterprises\r\n        });\r\n      } catch (error) {\r\n        resolve({\r\n          success: false,\r\n          message: `Ошибка парсинга Excel: ${(error as Error).message}`,\r\n          processedCount: 0,\r\n          errorCount: 1,\r\n          errors: [(error as Error).message]\r\n        });\r\n      }\r\n    };\r\n\r\n    reader.readAsBinaryString(file);\r\n  });\r\n};\r\n\r\n// Форматирование чисел\r\nexport const formatNumber = (num: number): string => {\r\n  return new Intl.NumberFormat('ru-RU').format(num);\r\n};\r\n\r\n// Форматирование валюты\r\nexport const formatCurrency = (amount: number): string => {\r\n  return new Intl.NumberFormat('ru-RU', {\r\n    style: 'currency',\r\n    currency: 'RUB',\r\n    maximumFractionDigits: 0,\r\n    minimumFractionDigits: 0\r\n  }).format(amount);\r\n};\r\n\r\n// Компактное форматирование валюты для карточек (без пробелов, с сокращениями)\r\nexport const formatCurrencyCompact = (amount: number): string => {\r\n  if (amount >= 1_000_000_000) {\r\n    return `${(amount / 1_000_000_000).toFixed(1)}млрд₽`;\r\n  } else if (amount >= 1_000_000) {\r\n    return `${(amount / 1_000_000).toFixed(1)}млн₽`;\r\n  } else if (amount >= 1_000) {\r\n    return `${(amount / 1_000).toFixed(0)}тыс₽`;\r\n  }\r\n  return `${amount}₽`;\r\n};\r\n\r\n// Генерация случайных данных для демонстрации\r\nexport const generateSampleData = (count: number = 100): Enterprise[] => {\r\n  const sampleData: Enterprise[] = [];\r\n\r\n  for (let i = 0; i < count; i++) {\r\n    const enterprise: Enterprise = {\r\n      id: crypto.randomUUID(),\r\n      name: `Предприятие ${i + 1}`,\r\n      industry: INDUSTRIES[Math.floor(Math.random() * INDUSTRIES.length)],\r\n      region: MOSCOW_REGIONS[Math.floor(Math.random() * MOSCOW_REGIONS.length)],\r\n      employees: Math.floor(Math.random() * 1000) + 10,\r\n      revenue: Math.floor(Math.random() * 100000000) + 1000000,\r\n      taxesPaid: Math.floor(Math.random() * 10000000) + 100000,\r\n      registrationDate: new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000 * 5),\r\n      lastUpdated: new Date(),\r\n      status: Math.random() > 0.1 ? 'active' : Math.random() > 0.5 ? 'inactive' : 'suspended',\r\n      contactInfo: {\r\n        address: `Москва, улица ${i + 1}, дом ${Math.floor(Math.random() * 100) + 1}`,\r\n        phone: `+7-495-${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 90) + 10}`,\r\n        email: `contact${i + 1}@enterprise.ru`\r\n      }\r\n    };\r\n    sampleData.push(enterprise);\r\n  }\r\n\r\n  return sampleData;\r\n};\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 257, "column": 0}, "map": {"version":3,"sources":["file:///C:/projects/hakaton/frontend/src/app/lib/analytics.ts"],"sourcesContent":["import { Enterprise, IndustryStats, RegionStats, DataQuality, AnalyticsFilters } from '../types/enterprise';\r\n\r\n// Аналитика по отраслям\r\nexport const calculateIndustryStats = (enterprises: Enterprise[]): IndustryStats[] => {\r\n  const industryMap = new Map<string, { count: number; totalRevenue: number; totalEmployees: number }>();\r\n\r\n  enterprises.forEach(enterprise => {\r\n    const existing = industryMap.get(enterprise.industry) || { count: 0, totalRevenue: 0, totalEmployees: 0 };\r\n    industryMap.set(enterprise.industry, {\r\n      count: existing.count + 1,\r\n      totalRevenue: existing.totalRevenue + enterprise.revenue,\r\n      totalEmployees: existing.totalEmployees + enterprise.employees\r\n    });\r\n  });\r\n\r\n  return Array.from(industryMap.entries()).map(([industry, stats]) => ({\r\n    industry,\r\n    count: stats.count,\r\n    totalRevenue: stats.totalRevenue,\r\n    averageEmployees: Math.round(stats.totalEmployees / stats.count)\r\n  }));\r\n};\r\n\r\n// Аналитика по регионам\r\nexport const calculateRegionStats = (enterprises: Enterprise[]): RegionStats[] => {\r\n  const regionMap = new Map<string, { count: number; totalRevenue: number; totalEmployees: number }>();\r\n\r\n  enterprises.forEach(enterprise => {\r\n    const existing = regionMap.get(enterprise.region) || { count: 0, totalRevenue: 0, totalEmployees: 0 };\r\n    regionMap.set(enterprise.region, {\r\n      count: existing.count + 1,\r\n      totalRevenue: existing.totalRevenue + enterprise.revenue,\r\n      totalEmployees: existing.totalEmployees + enterprise.employees\r\n    });\r\n  });\r\n\r\n  return Array.from(regionMap.entries()).map(([region, stats]) => ({\r\n    region,\r\n    count: stats.count,\r\n    totalRevenue: stats.totalRevenue,\r\n    averageEmployees: Math.round(stats.totalEmployees / stats.count)\r\n  }));\r\n};\r\n\r\n// Оценка качества данных\r\nexport const calculateDataQuality = (enterprises: Enterprise[]): DataQuality => {\r\n  let validRecords = 0;\r\n  const validationErrors: string[] = [];\r\n\r\n  enterprises.forEach((enterprise, index) => {\r\n    let isValid = true;\r\n    const errors: string[] = [];\r\n\r\n    if (!enterprise.name || enterprise.name.trim().length === 0) {\r\n      errors.push('Отсутствует название');\r\n      isValid = false;\r\n    }\r\n\r\n    if (!enterprise.contactInfo?.address || enterprise.contactInfo.address.trim().length === 0) {\r\n      errors.push('Отсутствует адрес');\r\n      isValid = false;\r\n    }\r\n\r\n    if (enterprise.employees < 0) {\r\n      errors.push('Некорректное количество сотрудников');\r\n      isValid = false;\r\n    }\r\n\r\n    if (enterprise.revenue < 0) {\r\n      errors.push('Некорректная выручка');\r\n      isValid = false;\r\n    }\r\n\r\n    if (isValid) {\r\n      validRecords++;\r\n    } else {\r\n      validationErrors.push(`Запись ${index + 1}: ${errors.join(', ')}`);\r\n    }\r\n  });\r\n\r\n  return {\r\n    totalRecords: enterprises.length,\r\n    validRecords,\r\n    invalidRecords: enterprises.length - validRecords,\r\n    validationErrors\r\n  };\r\n};\r\n\r\n// Фильтрация данных\r\nexport const filterEnterprises = (enterprises: Enterprise[], filters: Partial<AnalyticsFilters>): Enterprise[] => {\r\n  return enterprises.filter(enterprise => {\r\n    // Фильтр по дате\r\n    if (filters.dateRange) {\r\n      const enterpriseDate = new Date(enterprise.registrationDate);\r\n      if (enterpriseDate < filters.dateRange.from || enterpriseDate > filters.dateRange.to) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Фильтр по отраслям\r\n    if (filters.industries && filters.industries.length > 0) {\r\n      if (!filters.industries.includes(enterprise.industry)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Фильтр по регионам\r\n    if (filters.regions && filters.regions.length > 0) {\r\n      if (!filters.regions.includes(enterprise.region)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Фильтр по количеству сотрудников\r\n    if (filters.employeeRange) {\r\n      if (enterprise.employees < filters.employeeRange.min || enterprise.employees > filters.employeeRange.max) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Фильтр по выручке\r\n    if (filters.revenueRange) {\r\n      if (enterprise.revenue < filters.revenueRange.min || enterprise.revenue > filters.revenueRange.max) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  });\r\n};\r\n\r\n// Расчет трендов по месяцам\r\nexport const calculateMonthlyTrends = (enterprises: Enterprise[]) => {\r\n  const monthlyData = new Map<string, { count: number; revenue: number }>();\r\n\r\n  enterprises.forEach(enterprise => {\r\n    const date = new Date(enterprise.registrationDate);\r\n    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n\r\n    const existing = monthlyData.get(monthKey) || { count: 0, revenue: 0 };\r\n    monthlyData.set(monthKey, {\r\n      count: existing.count + 1,\r\n      revenue: existing.revenue + enterprise.revenue\r\n    });\r\n  });\r\n\r\n  return Array.from(monthlyData.entries())\r\n    .sort(([a], [b]) => a.localeCompare(b))\r\n    .map(([month, data]) => ({\r\n      month,\r\n      count: data.count,\r\n      revenue: data.revenue\r\n    }));\r\n};\r\n\r\n// Топ предприятий по выручке\r\nexport const getTopEnterprisesByRevenue = (enterprises: Enterprise[], limit: number = 10): Enterprise[] => {\r\n  return enterprises\r\n    .sort((a, b) => b.revenue - a.revenue)\r\n    .slice(0, limit);\r\n};\r\n\r\n// Топ предприятий по количеству сотрудников\r\nexport const getTopEnterprisesByEmployees = (enterprises: Enterprise[], limit: number = 10): Enterprise[] => {\r\n  return enterprises\r\n    .sort((a, b) => b.employees - a.employees)\r\n    .slice(0, limit);\r\n};\r\n\r\n// Общая статистика\r\nexport const calculateOverallStats = (enterprises: Enterprise[]) => {\r\n  const totalRevenue = enterprises.reduce((sum, e) => sum + e.revenue, 0);\r\n  const totalEmployees = enterprises.reduce((sum, e) => sum + e.employees, 0);\r\n  const totalTaxes = enterprises.reduce((sum, e) => sum + e.taxesPaid, 0);\r\n\r\n  const activeCount = enterprises.filter(e => e.status === 'active').length;\r\n  const inactiveCount = enterprises.filter(e => e.status === 'inactive').length;\r\n  const suspendedCount = enterprises.filter(e => e.status === 'suspended').length;\r\n\r\n  return {\r\n    totalEnterprises: enterprises.length,\r\n    totalRevenue,\r\n    totalEmployees,\r\n    totalTaxes,\r\n    averageRevenue: enterprises.length > 0 ? totalRevenue / enterprises.length : 0,\r\n    averageEmployees: enterprises.length > 0 ? totalEmployees / enterprises.length : 0,\r\n    statusDistribution: {\r\n      active: activeCount,\r\n      inactive: inactiveCount,\r\n      suspended: suspendedCount\r\n    }\r\n  };\r\n};\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 457, "column": 0}, "map": {"version":3,"sources":["file:///C:/projects/hakaton/frontend/src/app/lib/api-client.ts"],"sourcesContent":["// API клиент для работы с бэкендом\r\n\r\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:4000/api';\r\n\r\nconsole.log('🔧 API_BASE_URL:', API_BASE_URL); // Для отладки\r\n\r\n// Функция для получения токена из куки\r\nfunction getAuthToken(): string | null {\r\n  if (typeof document === 'undefined') return null;\r\n\r\n  const cookies = document.cookie.split(';');\r\n  for (const cookie of cookies) {\r\n    const [name, value] = cookie.trim().split('=');\r\n    if (name === 'token' || name === 'auth_token') {\r\n      return value;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n// Функция для создания headers с авторизацией\r\nfunction getHeaders(): HeadersInit {\r\n  const headers: HeadersInit = {\r\n    'Content-Type': 'application/json',\r\n  };\r\n\r\n  const token = getAuthToken();\r\n  if (token) {\r\n    headers['Authorization'] = `Bearer ${token}`;\r\n  }\r\n\r\n  return headers;\r\n}\r\n\r\nexport interface ApiResponse<T> {\r\n  success: boolean;\r\n  message?: string;\r\n  data?: T;\r\n  count?: number;\r\n}\r\n\r\nexport interface UploadResponse {\r\n  success: boolean;\r\n  message: string;\r\n  processedCount: number;\r\n  errorCount: number;\r\n  errors: string[];\r\n}\r\n\r\n// Загрузка файла\r\nexport const uploadFile = async (file: File): Promise<UploadResponse> => {\r\n  const formData = new FormData();\r\n  formData.append('file', file);\r\n\r\n  const token = getAuthToken();\r\n  const headers: HeadersInit = {};\r\n  if (token) {\r\n    headers['Authorization'] = `Bearer ${token}`;\r\n  }\r\n\r\n  const response = await fetch(`${API_BASE_URL}/upload`, {\r\n    method: 'POST',\r\n    body: formData,\r\n    headers,\r\n    credentials: 'include',\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Ошибка загрузки: ${response.statusText}`);\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\n// Получение всех предприятий с фильтрами\r\nexport const getEnterprises = async (filters?: {\r\n  industries?: string[];\r\n  regions?: string[];\r\n  status?: string;\r\n  minEmployees?: number;\r\n  maxEmployees?: number;\r\n  minRevenue?: number;\r\n  maxRevenue?: number;\r\n}) => {\r\n  const params = new URLSearchParams();\r\n\r\n  if (filters?.industries) {\r\n    filters.industries.forEach(industry => params.append('industries', industry));\r\n  }\r\n  if (filters?.regions) {\r\n    filters.regions.forEach(region => params.append('regions', region));\r\n  }\r\n  if (filters?.status) {\r\n    params.append('status', filters.status);\r\n  }\r\n  if (filters?.minEmployees !== undefined) {\r\n    params.append('minEmployees', filters.minEmployees.toString());\r\n  }\r\n  if (filters?.maxEmployees !== undefined) {\r\n    params.append('maxEmployees', filters.maxEmployees.toString());\r\n  }\r\n  if (filters?.minRevenue !== undefined) {\r\n    params.append('minRevenue', filters.minRevenue.toString());\r\n  }\r\n  if (filters?.maxRevenue !== undefined) {\r\n    params.append('maxRevenue', filters.maxRevenue.toString());\r\n  }\r\n\r\n  const url = `${API_BASE_URL}/enterprises${params.toString() ? '?' + params.toString() : ''}`;\r\n  console.log('🔍 Requesting URL:', url); // Отладка\r\n  const response = await fetch(url, {\r\n    headers: getHeaders(),\r\n    credentials: 'include',\r\n  });\r\n\r\n  console.log('📡 Response status:', response.status, response.statusText); // Отладка\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Ошибка получения данных: ${response.statusText}`);\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\n// Получение предприятия по ID\r\nexport const getEnterpriseById = async (id: string) => {\r\n  const response = await fetch(`${API_BASE_URL}/enterprises/${id}`, {\r\n    headers: getHeaders(),\r\n    credentials: 'include',\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Ошибка получения данных: ${response.statusText}`);\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\n// Получение статистики\r\nexport const getStatistics = async () => {\r\n  const response = await fetch(`${API_BASE_URL}/statistics`, {\r\n    headers: getHeaders(),\r\n    credentials: 'include',\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Ошибка получения статистики: ${response.statusText}`);\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\n// Очистка всех данных\r\nexport const clearAllData = async () => {\r\n  const response = await fetch(`${API_BASE_URL}/enterprises`, {\r\n    method: 'DELETE',\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Ошибка очистки данных: ${response.statusText}`);\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\n// Проверка здоровья API\r\nexport const checkHealth = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/health`);\r\n    return response.ok;\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 596, "column": 0}, "map": {"version":3,"sources":["file:///C:/projects/hakaton/frontend/src/app/lib/report-generator.ts"],"sourcesContent":["import * as XLSX from 'xlsx';\r\nimport jsPDF from 'jspdf';\r\nimport autoTable from 'jspdf-autotable';\r\nimport { Enterprise, IndustryStats, RegionStats } from '../types/enterprise';\r\n\r\n// Интерфейс для конфигурации отчета\r\nexport interface ReportData {\r\n  title: string;\r\n  period: {\r\n    from: string;\r\n    to: string;\r\n  };\r\n  enterprises: Enterprise[];\r\n  stats: {\r\n    totalEnterprises: number;\r\n    totalRevenue: number;\r\n    totalEmployees: number;\r\n    averageRevenue: number;\r\n    averageEmployees: number;\r\n  };\r\n  industryStats?: IndustryStats[];\r\n  regionStats?: RegionStats[];\r\n}\r\n\r\n// Форматирование валюты для отчетов\r\nconst formatCurrencyForExport = (value: number): string => {\r\n  return new Intl.NumberFormat('ru-RU', {\r\n    style: 'currency',\r\n    currency: 'RUB',\r\n    minimumFractionDigits: 0,\r\n    maximumFractionDigits: 0,\r\n  }).format(value);\r\n};\r\n\r\n// Форматирование чисел\r\nconst formatNumberForExport = (value: number): string => {\r\n  return new Intl.NumberFormat('ru-RU').format(value);\r\n};\r\n\r\n// Генерация Excel отчета\r\nexport const generateExcelReport = (reportData: ReportData) => {\r\n  const workbook = XLSX.utils.book_new();\r\n\r\n  // Лист 1: Общая информация\r\n  const summaryData = [\r\n    ['Отчёт по предприятиям Москвы'],\r\n    ['Название отчёта:', reportData.title],\r\n    ['Дата создания:', new Date().toLocaleString('ru-RU')],\r\n    ['Период:', `${reportData.period.from} - ${reportData.period.to}`],\r\n    [],\r\n    ['Общая статистика'],\r\n    ['Всего предприятий:', reportData.stats.totalEnterprises],\r\n    ['Общая выручка:', formatCurrencyForExport(reportData.stats.totalRevenue)],\r\n    ['Всего сотрудников:', formatNumberForExport(reportData.stats.totalEmployees)],\r\n    ['Средняя выручка:', formatCurrencyForExport(reportData.stats.averageRevenue)],\r\n    ['Средняя численность:', formatNumberForExport(Math.round(reportData.stats.averageEmployees))],\r\n  ];\r\n  \r\n  const summarySheet = XLSX.utils.aoa_to_sheet(summaryData);\r\n  XLSX.utils.book_append_sheet(workbook, summarySheet, 'Общая информация');\r\n\r\n  // Лист 2: Предприятия\r\n  if (reportData.enterprises.length > 0) {\r\n    const enterprisesData = reportData.enterprises.map(e => ({\r\n      'Название': e.name,\r\n      'Отрасль': e.industry,\r\n      'Регион': e.region,\r\n      'Сотрудники': e.employees,\r\n      'Выручка (руб.)': e.revenue,\r\n      'Налоги (руб.)': e.taxesPaid,\r\n      'Статус': e.status === 'active' ? 'Активно' : e.status === 'inactive' ? 'Неактивно' : 'Приостановлено',\r\n      'Адрес': e.contactInfo.address,\r\n      'Телефон': e.contactInfo.phone || '-',\r\n      'Email': e.contactInfo.email || '-',\r\n    }));\r\n\r\n    const enterprisesSheet = XLSX.utils.json_to_sheet(enterprisesData);\r\n    XLSX.utils.book_append_sheet(workbook, enterprisesSheet, 'Предприятия');\r\n  }\r\n\r\n  // Лист 3: Статистика по отраслям\r\n  if (reportData.industryStats && reportData.industryStats.length > 0) {\r\n    const industryData = reportData.industryStats.map(i => ({\r\n      'Отрасль': i.industry,\r\n      'Количество предприятий': i.count,\r\n      'Общая выручка (руб.)': i.totalRevenue,\r\n      'Средняя численность': i.averageEmployees,\r\n    }));\r\n\r\n    const industrySheet = XLSX.utils.json_to_sheet(industryData);\r\n    XLSX.utils.book_append_sheet(workbook, industrySheet, 'По отраслям');\r\n  }\r\n\r\n  // Лист 4: Статистика по регионам\r\n  if (reportData.regionStats && reportData.regionStats.length > 0) {\r\n    const regionData = reportData.regionStats.map(r => ({\r\n      'Регион': r.region,\r\n      'Количество предприятий': r.count,\r\n      'Общая выручка (руб.)': r.totalRevenue,\r\n      'Средняя численность': r.averageEmployees,\r\n    }));\r\n\r\n    const regionSheet = XLSX.utils.json_to_sheet(regionData);\r\n    XLSX.utils.book_append_sheet(workbook, regionSheet, 'По регионам');\r\n  }\r\n\r\n  // Сохранение файла\r\n  const fileName = `report_${Date.now()}.xlsx`;\r\n  XLSX.writeFile(workbook, fileName);\r\n};\r\n\r\n// Генерация PDF отчета\r\nexport const generatePDFReport = (reportData: ReportData) => {\r\n  const doc = new jsPDF();\r\n\r\n  // Используем базовый шрифт с поддержкой юникода\r\n  doc.setFont('helvetica');\r\n\r\n  // Заголовок\r\n  doc.setFontSize(18);\r\n  doc.text('Отчёт по предприятиям Москвы', 14, 15);\r\n\r\n  doc.setFontSize(12);\r\n  doc.text(`Название: ${reportData.title}`, 14, 25);\r\n  doc.text(`Дата создания: ${new Date().toLocaleDateString('ru-RU')}`, 14, 32);\r\n  doc.text(`Период: ${reportData.period.from} - ${reportData.period.to}`, 14, 39);\r\n\r\n  // Общая статистика\r\n  doc.setFontSize(14);\r\n  doc.text('Общая статистика', 14, 50);\r\n\r\n  doc.setFontSize(11);\r\n  doc.text(`Всего предприятий: ${reportData.stats.totalEnterprises}`, 14, 58);\r\n  doc.text(`Общая выручка: ${formatCurrencyForExport(reportData.stats.totalRevenue)}`, 14, 65);\r\n  doc.text(`Всего сотрудников: ${formatNumberForExport(reportData.stats.totalEmployees)}`, 14, 72);\r\n  doc.text(`Средняя выручка: ${formatCurrencyForExport(reportData.stats.averageRevenue)}`, 14, 79);\r\n  doc.text(`Средняя численность: ${formatNumberForExport(Math.round(reportData.stats.averageEmployees))}`, 14, 86);\r\n\r\n  let yPos = 95;\r\n\r\n  // Статистика по отраслям\r\n  if (reportData.industryStats && reportData.industryStats.length > 0) {\r\n    doc.setFontSize(14);\r\n    doc.text('Статистика по отраслям', 14, yPos);\r\n    yPos += 10;\r\n\r\n    const industryTableData = reportData.industryStats.map(i => [\r\n      i.industry,\r\n      i.count.toString(),\r\n      formatCurrencyForExport(i.totalRevenue),\r\n      i.averageEmployees.toString(),\r\n    ]);\r\n\r\n    autoTable(doc, {\r\n      startY: yPos,\r\n      head: [['Отрасль', 'Кол-во', 'Выручка', 'Сред. численность']],\r\n      body: industryTableData,\r\n      theme: 'grid',\r\n      styles: {\r\n        fontSize: 9,\r\n        font: 'helvetica'\r\n      },\r\n      headStyles: {\r\n        fillColor: [59, 130, 246],\r\n        font: 'helvetica',\r\n        fontStyle: 'bold'\r\n      },\r\n    });\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    yPos = (doc as any).lastAutoTable.finalY + 10;\r\n  }\r\n\r\n  // Статистика по регионам\r\n  if (reportData.regionStats && reportData.regionStats.length > 0) {\r\n    if (yPos > 250) {\r\n      doc.addPage();\r\n      yPos = 15;\r\n    }\r\n\r\n    doc.setFontSize(14);\r\n    doc.text('Статистика по регионам', 14, yPos);\r\n    yPos += 10;\r\n\r\n    const regionTableData = reportData.regionStats.map(r => [\r\n      r.region,\r\n      r.count.toString(),\r\n      formatCurrencyForExport(r.totalRevenue),\r\n      r.averageEmployees.toString(),\r\n    ]);\r\n\r\n    autoTable(doc, {\r\n      startY: yPos,\r\n      head: [['Регион', 'Кол-во', 'Выручка', 'Сред. численность']],\r\n      body: regionTableData,\r\n      theme: 'grid',\r\n      styles: {\r\n        fontSize: 9,\r\n        font: 'helvetica'\r\n      },\r\n      headStyles: {\r\n        fillColor: [16, 185, 129],\r\n        font: 'helvetica',\r\n        fontStyle: 'bold'\r\n      },\r\n    });\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    yPos = (doc as any).lastAutoTable.finalY + 10;\r\n  }\r\n\r\n  // Топ 10 предприятий\r\n  if (reportData.enterprises.length > 0) {\r\n    if (yPos > 220) {\r\n      doc.addPage();\r\n      yPos = 15;\r\n    }\r\n\r\n    doc.setFontSize(14);\r\n    doc.text('Топ 10 предприятий по выручке', 14, yPos);\r\n    yPos += 10;\r\n\r\n    const topEnterprises = [...reportData.enterprises]\r\n      .sort((a, b) => b.revenue - a.revenue)\r\n      .slice(0, 10);\r\n\r\n    const enterprisesTableData = topEnterprises.map(e => [\r\n      e.name,\r\n      e.industry,\r\n      e.employees.toString(),\r\n      formatCurrencyForExport(e.revenue),\r\n    ]);\r\n\r\n    autoTable(doc, {\r\n      startY: yPos,\r\n      head: [['Название', 'Отрасль', 'Сотрудники', 'Выручка']],\r\n      body: enterprisesTableData,\r\n      theme: 'grid',\r\n      styles: {\r\n        fontSize: 8,\r\n        font: 'helvetica'\r\n      },\r\n      headStyles: {\r\n        fillColor: [139, 92, 246],\r\n        font: 'helvetica',\r\n        fontStyle: 'bold'\r\n      },\r\n    });\r\n  }\r\n\r\n  // Сохранение файла\r\n  const fileName = `otchet_${Date.now()}.pdf`;\r\n  doc.save(fileName);\r\n};\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 871, "column": 0}, "map": {"version":3,"sources":["file:///C:/projects/hakaton/frontend/src/app/reports/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { Download, FileText, Building2, TrendingUp, Users, AlertCircle, Upload as UploadIcon } from 'lucide-react';\r\nimport Link from 'next/link';\r\nimport { Enterprise } from '../types/enterprise';\r\nimport { formatNumber, formatCurrency, INDUSTRIES, MOSCOW_REGIONS } from '../lib/data-utils';\r\nimport { calculateOverallStats, calculateIndustryStats, calculateRegionStats, filterEnterprises } from '../lib/analytics';\r\nimport { getEnterprises } from '../lib/api-client';\r\nimport { generateExcelReport, generatePDFReport } from '../lib/report-generator';\r\n\r\ninterface ReportConfig {\r\n  title: string;\r\n  dateRange: {\r\n    from: Date;\r\n    to: Date;\r\n  };\r\n  includeIndustries: string[];\r\n  includeRegions: string[];\r\n  sections: {\r\n    overview: boolean;\r\n    industries: boolean;\r\n    regions: boolean;\r\n    topEnterprises: boolean;\r\n    trends: boolean;\r\n  };\r\n}\r\n\r\nexport default function ReportsPage() {\r\n  const [enterprises, setEnterprises] = useState<Enterprise[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [generatingReport, setGeneratingReport] = useState(false);\r\n  const [reportConfig, setReportConfig] = useState<ReportConfig>({\r\n    title: 'Отчёт по предприятиям Москвы',\r\n    dateRange: {\r\n      from: new Date(2015, 0, 1), // С 2015 года, чтобы охватить все данные\r\n      to: new Date()\r\n    },\r\n    includeIndustries: [],\r\n    includeRegions: [],\r\n    sections: {\r\n      overview: true,\r\n      industries: true,\r\n      regions: true,\r\n      topEnterprises: true,\r\n      trends: true\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Загружаем данные из бэкенда\r\n    const loadData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const response = await getEnterprises();\r\n        if (response.success && response.data) {\r\n          setEnterprises(response.data);\r\n        } else {\r\n          setError('Не удалось загрузить данные');\r\n        }\r\n      } catch (err) {\r\n        setError(`Ошибка загрузки: ${(err as Error).message}`);\r\n        console.error('Ошибка загрузки данных:', err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadData();\r\n  }, []);\r\n\r\n  const filteredEnterprises = filterEnterprises(enterprises, {\r\n    dateRange: reportConfig.dateRange,\r\n    industries: reportConfig.includeIndustries.length > 0 ? reportConfig.includeIndustries : undefined,\r\n    regions: reportConfig.includeRegions.length > 0 ? reportConfig.includeRegions : undefined\r\n  });\r\n\r\n  const overallStats = calculateOverallStats(filteredEnterprises);\r\n  const industryStats = calculateIndustryStats(filteredEnterprises);\r\n  const regionStats = calculateRegionStats(filteredEnterprises);\r\n\r\n  const handleGenerateReport = async (format: 'pdf' | 'excel') => {\r\n    setGeneratingReport(true);\r\n\r\n    try {\r\n      // Подготавливаем данные для отчета\r\n      const reportData = {\r\n        title: reportConfig.title,\r\n        period: {\r\n          from: reportConfig.dateRange.from.toLocaleDateString('ru-RU'),\r\n          to: reportConfig.dateRange.to.toLocaleDateString('ru-RU')\r\n        },\r\n        enterprises: filteredEnterprises,\r\n        stats: {\r\n          totalEnterprises: overallStats.totalEnterprises,\r\n          totalRevenue: overallStats.totalRevenue,\r\n          totalEmployees: overallStats.totalEmployees,\r\n          averageRevenue: overallStats.averageRevenue,\r\n          averageEmployees: overallStats.averageEmployees,\r\n        },\r\n        industryStats: reportConfig.sections.industries ? industryStats : undefined,\r\n        regionStats: reportConfig.sections.regions ? regionStats : undefined,\r\n      };\r\n\r\n      // Генерируем отчет в нужном формате\r\n      if (format === 'excel') {\r\n        generateExcelReport(reportData);\r\n      } else {\r\n        generatePDFReport(reportData);\r\n      }\r\n\r\n      // Показываем уведомление об успехе (можно добавить toast notification)\r\n      console.log(`Отчет в формате ${format.toUpperCase()} успешно сгенерирован`);\r\n    } catch (error) {\r\n      console.error('Ошибка генерации отчета:', error);\r\n      alert(`Ошибка при генерации отчета: ${(error as Error).message}`);\r\n    } finally {\r\n      setGeneratingReport(false);\r\n    }\r\n  };\r\n\r\n  const updateReportConfig = (key: keyof ReportConfig, value: unknown) => {\r\n    setReportConfig(prev => ({\r\n      ...prev,\r\n      [key]: value\r\n    }));\r\n  };\r\n\r\n  const updateSection = (section: keyof ReportConfig['sections'], value: boolean) => {\r\n    setReportConfig(prev => ({\r\n      ...prev,\r\n      sections: {\r\n        ...prev.sections,\r\n        [section]: value\r\n      }\r\n    }));\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-64\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\r\n          <div className=\"text-lg text-gray-600 mt-4\">Загрузка данных...</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-64\">\r\n        <div className=\"text-center\">\r\n          <AlertCircle className=\"w-12 h-12 text-red-500 mx-auto mb-4\" />\r\n          <div className=\"text-lg text-red-600\">{error}</div>\r\n          <p className=\"text-gray-600 mt-2\">Проверьте, что бэкенд запущен на порту 4000</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (enterprises.length === 0) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-64\">\r\n        <div className=\"text-center\">\r\n          <UploadIcon className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\r\n          <div className=\"text-lg text-gray-600\">Нет данных для отчетов</div>\r\n          <p className=\"text-gray-500 mt-2\">Загрузите файл с данными предприятий</p>\r\n          <Link\r\n            href=\"/upload\"\r\n            className=\"mt-4 inline-flex items-center bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors\"\r\n          >\r\n            <UploadIcon className=\"w-5 h-5 mr-2\" />\r\n            Загрузить данные\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"max-w-6xl mx-auto space-y-8\">\r\n      {/* Заголовок */}\r\n      <div>\r\n        <h1 className=\"text-3xl font-bold text-gray-900\">Генерация отчётов</h1>\r\n        <p className=\"text-gray-600 mt-2\">\r\n          Создайте детальные отчёты по предприятиям Москвы в различных форматах\r\n        </p>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\r\n        {/* Конфигурация отчёта */}\r\n        <div className=\"lg:col-span-2 space-y-6\">\r\n          {/* Основные настройки */}\r\n          <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Основные настройки</h3>\r\n\r\n            <div className=\"space-y-4\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Название отчёта\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={reportConfig.title}\r\n                  onChange={(e) => updateReportConfig('title', e.target.value)}\r\n                  className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    Дата начала\r\n                  </label>\r\n                  <input\r\n                    type=\"date\"\r\n                    value={reportConfig.dateRange.from.toISOString().split('T')[0]}\r\n                    onChange={(e) => updateReportConfig('dateRange', {\r\n                      ...reportConfig.dateRange,\r\n                      from: new Date(e.target.value)\r\n                    })}\r\n                    className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    Дата окончания\r\n                  </label>\r\n                  <input\r\n                    type=\"date\"\r\n                    value={reportConfig.dateRange.to.toISOString().split('T')[0]}\r\n                    onChange={(e) => updateReportConfig('dateRange', {\r\n                      ...reportConfig.dateRange,\r\n                      to: new Date(e.target.value)\r\n                    })}\r\n                    className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Фильтры */}\r\n          <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Фильтры данных</h3>\r\n\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Отрасли (оставьте пустым для всех)\r\n                </label>\r\n                <select\r\n                  multiple\r\n                  value={reportConfig.includeIndustries}\r\n                  onChange={(e) => {\r\n                    const selected = Array.from(e.target.selectedOptions, option => option.value);\r\n                    updateReportConfig('includeIndustries', selected);\r\n                  }}\r\n                  className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                  size={6}\r\n                >\r\n                  {INDUSTRIES.map(industry => (\r\n                    <option key={industry} value={industry}>{industry}</option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Регионы (оставьте пустым для всех)\r\n                </label>\r\n                <select\r\n                  multiple\r\n                  value={reportConfig.includeRegions}\r\n                  onChange={(e) => {\r\n                    const selected = Array.from(e.target.selectedOptions, option => option.value);\r\n                    updateReportConfig('includeRegions', selected);\r\n                  }}\r\n                  className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                  size={6}\r\n                >\r\n                  {MOSCOW_REGIONS.map(region => (\r\n                    <option key={region} value={region}>{region}</option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Разделы отчёта */}\r\n          <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Разделы отчёта</h3>\r\n\r\n            <div className=\"space-y-3\">\r\n              {Object.entries(reportConfig.sections).map(([key, value]) => {\r\n                const sectionNames = {\r\n                  overview: 'Общая статистика',\r\n                  industries: 'Анализ по отраслям',\r\n                  regions: 'Анализ по регионам',\r\n                  topEnterprises: 'Топ предприятия',\r\n                  trends: 'Тренды и динамика'\r\n                };\r\n\r\n                return (\r\n                  <label key={key} className=\"flex items-center space-x-3\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={value}\r\n                      onChange={(e) => updateSection(key as keyof ReportConfig['sections'], e.target.checked)}\r\n                      className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\r\n                    />\r\n                    <span className=\"text-gray-700\">{sectionNames[key as keyof typeof sectionNames]}</span>\r\n                  </label>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Превью и генерация */}\r\n        <div className=\"space-y-6\">\r\n          {/* Превью данных */}\r\n          <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Превью данных</h3>\r\n\r\n            <div className=\"space-y-4\">\r\n              <div className=\"flex items-center justify-between p-3 bg-blue-50 rounded-lg\">\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <Building2 className=\"w-5 h-5 text-blue-600\" />\r\n                  <span className=\"text-sm font-medium text-blue-900\">Предприятий</span>\r\n                </div>\r\n                <span className=\"text-blue-900 font-bold\">{formatNumber(filteredEnterprises.length)}</span>\r\n              </div>\r\n\r\n              <div className=\"flex items-center justify-between p-3 bg-green-50 rounded-lg\">\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <TrendingUp className=\"w-5 h-5 text-green-600\" />\r\n                  <span className=\"text-sm font-medium text-green-900\">Общая выручка</span>\r\n                </div>\r\n                <span className=\"text-green-900 font-bold text-sm\">\r\n                  {formatCurrency(overallStats.totalRevenue)}\r\n                </span>\r\n              </div>\r\n\r\n              <div className=\"flex items-center justify-between p-3 bg-purple-50 rounded-lg\">\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <Users className=\"w-5 h-5 text-purple-600\" />\r\n                  <span className=\"text-sm font-medium text-purple-900\">Сотрудников</span>\r\n                </div>\r\n                <span className=\"text-purple-900 font-bold\">{formatNumber(overallStats.totalEmployees)}</span>\r\n              </div>\r\n\r\n              <div className=\"pt-3 border-t border-gray-200\">\r\n                <p className=\"text-xs text-gray-500\">\r\n                  Период: {reportConfig.dateRange.from.toLocaleDateString('ru-RU')} - {reportConfig.dateRange.to.toLocaleDateString('ru-RU')}\r\n                </p>\r\n                {reportConfig.includeIndustries.length > 0 && (\r\n                  <p className=\"text-xs text-gray-500 mt-1\">\r\n                    Отрасли: {reportConfig.includeIndustries.length}\r\n                  </p>\r\n                )}\r\n                {reportConfig.includeRegions.length > 0 && (\r\n                  <p className=\"text-xs text-gray-500 mt-1\">\r\n                    Регионы: {reportConfig.includeRegions.length}\r\n                  </p>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Генерация отчёта */}\r\n          <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Генерация отчёта</h3>\r\n\r\n            <div className=\"space-y-3\">\r\n              <button\r\n                onClick={() => handleGenerateReport('pdf')}\r\n                disabled={generatingReport}\r\n                className=\"w-full flex items-center justify-center space-x-2 p-3 bg-red-600 text-white rounded-lg hover:bg-red-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors\"\r\n              >\r\n                {generatingReport ? (\r\n                  <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white\"></div>\r\n                ) : (\r\n                  <FileText className=\"w-5 h-5\" />\r\n                )}\r\n                <span>Скачать PDF</span>\r\n              </button>\r\n\r\n              <button\r\n                onClick={() => handleGenerateReport('excel')}\r\n                disabled={generatingReport}\r\n                className=\"w-full flex items-center justify-center space-x-2 p-3 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors\"\r\n              >\r\n                {generatingReport ? (\r\n                  <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white\"></div>\r\n                ) : (\r\n                  <Download className=\"w-5 h-5\" />\r\n                )}\r\n                <span>Скачать Excel</span>\r\n              </button>\r\n            </div>\r\n\r\n            <div className=\"mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg\">\r\n              <p className=\"text-xs text-yellow-800\">\r\n                💡 Отчёты генерируются на основе текущих фильтров и выбранных разделов\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Шаблоны отчётов */}\r\n          <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Быстрые шаблоны</h3>\r\n\r\n            <div className=\"space-y-2\">\r\n              <button\r\n                onClick={() => setReportConfig({\r\n                  ...reportConfig,\r\n                  title: 'Отчёт по всем предприятиям',\r\n                  includeIndustries: [],\r\n                  includeRegions: [],\r\n                  sections: {\r\n                    overview: true,\r\n                    industries: true,\r\n                    regions: true,\r\n                    topEnterprises: true,\r\n                    trends: true\r\n                  }\r\n                })}\r\n                className=\"w-full text-left p-2 text-sm text-blue-600 hover:bg-blue-50 rounded\"\r\n              >\r\n                📊 Полный отчёт\r\n              </button>\r\n\r\n              <button\r\n                onClick={() => setReportConfig({\r\n                  ...reportConfig,\r\n                  title: 'Краткая сводка',\r\n                  sections: {\r\n                    overview: true,\r\n                    industries: false,\r\n                    regions: false,\r\n                    topEnterprises: true,\r\n                    trends: false\r\n                  }\r\n                })}\r\n                className=\"w-full text-left p-2 text-sm text-blue-600 hover:bg-blue-50 rounded\"\r\n              >\r\n                📋 Краткая сводка\r\n              </button>\r\n\r\n              <button\r\n                onClick={() => setReportConfig({\r\n                  ...reportConfig,\r\n                  title: 'Анализ по отраслям',\r\n                  sections: {\r\n                    overview: true,\r\n                    industries: true,\r\n                    regions: false,\r\n                    topEnterprises: false,\r\n                    trends: true\r\n                  }\r\n                })}\r\n                className=\"w-full text-left p-2 text-sm text-blue-600 hover:bg-blue-50 rounded\"\r\n              >\r\n                🏭 Отраслевой анализ\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}