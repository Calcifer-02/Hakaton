{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 10, "column": 0}, "map": {"version":3,"sources":["file:///C:/projects/hakaton/frontend/src/app/lib/data-utils.ts"],"sourcesContent":["import * as XLSX from 'xlsx';\r\nimport Papa from 'papaparse';\r\nimport { Enterprise, UploadResult } from '../types/enterprise';\r\n\r\n// Московские регионы\r\nexport const MOSCOW_REGIONS = [\r\n  'Центральный',\r\n  'Северный',\r\n  'Северо-Восточный',\r\n  'Восточный',\r\n  'Юго-Восточный',\r\n  'Южный',\r\n  'Юго-Западный',\r\n  'Западный',\r\n  'Северо-Западный',\r\n  'Новомосковский',\r\n  'Троицкий'\r\n];\r\n\r\n// Основные отрасли промышленности\r\nexport const INDUSTRIES = [\r\n  'Машиностроение',\r\n  'Пищевая промышленность',\r\n  'Химическая промышленность',\r\n  'Текстильная промышленность',\r\n  'Металлургия',\r\n  'Электроника',\r\n  'Строительные материалы',\r\n  'Фармацевтика',\r\n  'Автомобилестроение',\r\n  'Полиграфия',\r\n  'Другое'\r\n];\r\n\r\n// Валидация данных предприятия\r\nexport const validateEnterprise = (data: Record<string, unknown>): { isValid: boolean; errors: string[] } => {\r\n  const errors: string[] = [];\r\n\r\n  if (!data.name || typeof data.name !== 'string') {\r\n    errors.push('Некорректное название предприятия');\r\n  }\r\n\r\n  if (!data.industry || !INDUSTRIES.includes(data.industry as string)) {\r\n    errors.push('Некорректная отрасль');\r\n  }\r\n\r\n  if (!data.region || !MOSCOW_REGIONS.includes(data.region as string)) {\r\n    errors.push('Некорректный регион');\r\n  }\r\n\r\n  if (!data.employees || Number(data.employees) < 0) {\r\n    errors.push('Некорректное количество сотрудников');\r\n  }\r\n\r\n  if (!data.revenue || Number(data.revenue) < 0) {\r\n    errors.push('Некорректная выручка');\r\n  }\r\n\r\n  const contactInfo = data.contactInfo as Record<string, unknown> | undefined;\r\n  if (!contactInfo?.address) {\r\n    errors.push('Отсутствует адрес');\r\n  }\r\n\r\n  return {\r\n    isValid: errors.length === 0,\r\n    errors\r\n  };\r\n};\r\n\r\n// Парсинг CSV файла\r\nexport const parseCSV = (file: File): Promise<UploadResult> => {\r\n  return new Promise((resolve) => {\r\n    Papa.parse(file, {\r\n      header: true,\r\n      complete: (results) => {\r\n        const enterprises: Enterprise[] = [];\r\n        const errors: string[] = [];\r\n        let errorCount = 0;\r\n\r\n        results.data.forEach((row: unknown, index: number) => {\r\n          const rowData = row as Record<string, unknown>;\r\n          const validation = validateEnterprise(rowData);\r\n\r\n          if (validation.isValid) {\r\n            const enterprise: Enterprise = {\r\n              id: crypto.randomUUID(),\r\n              name: String(rowData.name),\r\n              industry: String(rowData.industry),\r\n              region: String(rowData.region),\r\n              employees: parseInt(String(rowData.employees)) || 0,\r\n              revenue: parseFloat(String(rowData.revenue)) || 0,\r\n              taxesPaid: parseFloat(String(rowData.taxesPaid)) || 0,\r\n              registrationDate: new Date(String(rowData.registrationDate) || Date.now()),\r\n              lastUpdated: new Date(),\r\n              status: (rowData.status as 'active' | 'inactive' | 'suspended') || 'active',\r\n              contactInfo: {\r\n                address: String(rowData.address),\r\n                phone: String(rowData.phone || ''),\r\n                email: String(rowData.email || '')\r\n              }\r\n            };\r\n            enterprises.push(enterprise);\r\n          } else {\r\n            errorCount++;\r\n            errors.push(`Строка ${index + 1}: ${validation.errors.join(', ')}`);\r\n          }\r\n        });\r\n\r\n        resolve({\r\n          success: true,\r\n          message: `Обработано ${enterprises.length} записей из ${results.data.length}`,\r\n          processedCount: enterprises.length,\r\n          errorCount,\r\n          errors,\r\n          data: enterprises\r\n        });\r\n      },\r\n      error: (error) => {\r\n        resolve({\r\n          success: false,\r\n          message: `Ошибка парсинга CSV: ${error.message}`,\r\n          processedCount: 0,\r\n          errorCount: 1,\r\n          errors: [error.message]\r\n        });\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n// Парсинг Excel файла\r\nexport const parseExcel = (file: File): Promise<UploadResult> => {\r\n  return new Promise((resolve) => {\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = (e) => {\r\n      try {\r\n        const data = e.target?.result;\r\n        const workbook = XLSX.read(data, { type: 'binary' });\r\n        const sheetName = workbook.SheetNames[0];\r\n        const worksheet = workbook.Sheets[sheetName];\r\n        const jsonData = XLSX.utils.sheet_to_json(worksheet);\r\n\r\n        const enterprises: Enterprise[] = [];\r\n        const errors: string[] = [];\r\n        let errorCount = 0;\r\n\r\n        jsonData.forEach((row: unknown, index: number) => {\r\n          const rowData = row as Record<string, unknown>;\r\n          const validation = validateEnterprise(rowData);\r\n\r\n          if (validation.isValid) {\r\n            const enterprise: Enterprise = {\r\n              id: crypto.randomUUID(),\r\n              name: String(rowData.name),\r\n              industry: String(rowData.industry),\r\n              region: String(rowData.region),\r\n              employees: parseInt(String(rowData.employees)) || 0,\r\n              revenue: parseFloat(String(rowData.revenue)) || 0,\r\n              taxesPaid: parseFloat(String(rowData.taxesPaid)) || 0,\r\n              registrationDate: new Date(String(rowData.registrationDate) || Date.now()),\r\n              lastUpdated: new Date(),\r\n              status: (rowData.status as 'active' | 'inactive' | 'suspended') || 'active',\r\n              contactInfo: {\r\n                address: String(rowData.address),\r\n                phone: String(rowData.phone || ''),\r\n                email: String(rowData.email || '')\r\n              }\r\n            };\r\n            enterprises.push(enterprise);\r\n          } else {\r\n            errorCount++;\r\n            errors.push(`Строка ${index + 1}: ${validation.errors.join(', ')}`);\r\n          }\r\n        });\r\n\r\n        resolve({\r\n          success: true,\r\n          message: `Обработано ${enterprises.length} записей из ${jsonData.length}`,\r\n          processedCount: enterprises.length,\r\n          errorCount,\r\n          errors,\r\n          data: enterprises\r\n        });\r\n      } catch (error) {\r\n        resolve({\r\n          success: false,\r\n          message: `Ошибка парсинга Excel: ${(error as Error).message}`,\r\n          processedCount: 0,\r\n          errorCount: 1,\r\n          errors: [(error as Error).message]\r\n        });\r\n      }\r\n    };\r\n\r\n    reader.readAsBinaryString(file);\r\n  });\r\n};\r\n\r\n// Форматирование чисел\r\nexport const formatNumber = (num: number): string => {\r\n  return new Intl.NumberFormat('ru-RU').format(num);\r\n};\r\n\r\n// Форматирование валюты\r\nexport const formatCurrency = (amount: number): string => {\r\n  return new Intl.NumberFormat('ru-RU', {\r\n    style: 'currency',\r\n    currency: 'RUB'\r\n  }).format(amount);\r\n};\r\n\r\n// Генерация случайных данных для демонстрации\r\nexport const generateSampleData = (count: number = 100): Enterprise[] => {\r\n  const sampleData: Enterprise[] = [];\r\n\r\n  for (let i = 0; i < count; i++) {\r\n    const enterprise: Enterprise = {\r\n      id: crypto.randomUUID(),\r\n      name: `Предприятие ${i + 1}`,\r\n      industry: INDUSTRIES[Math.floor(Math.random() * INDUSTRIES.length)],\r\n      region: MOSCOW_REGIONS[Math.floor(Math.random() * MOSCOW_REGIONS.length)],\r\n      employees: Math.floor(Math.random() * 1000) + 10,\r\n      revenue: Math.floor(Math.random() * 100000000) + 1000000,\r\n      taxesPaid: Math.floor(Math.random() * 10000000) + 100000,\r\n      registrationDate: new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000 * 5),\r\n      lastUpdated: new Date(),\r\n      status: Math.random() > 0.1 ? 'active' : Math.random() > 0.5 ? 'inactive' : 'suspended',\r\n      contactInfo: {\r\n        address: `Москва, улица ${i + 1}, дом ${Math.floor(Math.random() * 100) + 1}`,\r\n        phone: `+7-495-${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 90) + 10}`,\r\n        email: `contact${i + 1}@enterprise.ru`\r\n      }\r\n    };\r\n    sampleData.push(enterprise);\r\n  }\r\n\r\n  return sampleData;\r\n};\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///C:/projects/hakaton/frontend/src/app/lib/analytics.ts"],"sourcesContent":["import { Enterprise, IndustryStats, RegionStats, DataQuality, AnalyticsFilters } from '../types/enterprise';\r\n\r\n// Аналитика по отраслям\r\nexport const calculateIndustryStats = (enterprises: Enterprise[]): IndustryStats[] => {\r\n  const industryMap = new Map<string, { count: number; totalRevenue: number; totalEmployees: number }>();\r\n\r\n  enterprises.forEach(enterprise => {\r\n    const existing = industryMap.get(enterprise.industry) || { count: 0, totalRevenue: 0, totalEmployees: 0 };\r\n    industryMap.set(enterprise.industry, {\r\n      count: existing.count + 1,\r\n      totalRevenue: existing.totalRevenue + enterprise.revenue,\r\n      totalEmployees: existing.totalEmployees + enterprise.employees\r\n    });\r\n  });\r\n\r\n  return Array.from(industryMap.entries()).map(([industry, stats]) => ({\r\n    industry,\r\n    count: stats.count,\r\n    totalRevenue: stats.totalRevenue,\r\n    averageEmployees: Math.round(stats.totalEmployees / stats.count)\r\n  }));\r\n};\r\n\r\n// Аналитика по регионам\r\nexport const calculateRegionStats = (enterprises: Enterprise[]): RegionStats[] => {\r\n  const regionMap = new Map<string, { count: number; totalRevenue: number; totalEmployees: number }>();\r\n\r\n  enterprises.forEach(enterprise => {\r\n    const existing = regionMap.get(enterprise.region) || { count: 0, totalRevenue: 0, totalEmployees: 0 };\r\n    regionMap.set(enterprise.region, {\r\n      count: existing.count + 1,\r\n      totalRevenue: existing.totalRevenue + enterprise.revenue,\r\n      totalEmployees: existing.totalEmployees + enterprise.employees\r\n    });\r\n  });\r\n\r\n  return Array.from(regionMap.entries()).map(([region, stats]) => ({\r\n    region,\r\n    count: stats.count,\r\n    totalRevenue: stats.totalRevenue,\r\n    averageEmployees: Math.round(stats.totalEmployees / stats.count)\r\n  }));\r\n};\r\n\r\n// Оценка качества данных\r\nexport const calculateDataQuality = (enterprises: Enterprise[]): DataQuality => {\r\n  let validRecords = 0;\r\n  const validationErrors: string[] = [];\r\n\r\n  enterprises.forEach((enterprise, index) => {\r\n    let isValid = true;\r\n    const errors: string[] = [];\r\n\r\n    if (!enterprise.name || enterprise.name.trim().length === 0) {\r\n      errors.push('Отсутствует название');\r\n      isValid = false;\r\n    }\r\n\r\n    if (!enterprise.contactInfo?.address || enterprise.contactInfo.address.trim().length === 0) {\r\n      errors.push('Отсутствует адрес');\r\n      isValid = false;\r\n    }\r\n\r\n    if (enterprise.employees < 0) {\r\n      errors.push('Некорректное количество сотрудников');\r\n      isValid = false;\r\n    }\r\n\r\n    if (enterprise.revenue < 0) {\r\n      errors.push('Некорректная выручка');\r\n      isValid = false;\r\n    }\r\n\r\n    if (isValid) {\r\n      validRecords++;\r\n    } else {\r\n      validationErrors.push(`Запись ${index + 1}: ${errors.join(', ')}`);\r\n    }\r\n  });\r\n\r\n  return {\r\n    totalRecords: enterprises.length,\r\n    validRecords,\r\n    invalidRecords: enterprises.length - validRecords,\r\n    validationErrors\r\n  };\r\n};\r\n\r\n// Фильтрация данных\r\nexport const filterEnterprises = (enterprises: Enterprise[], filters: Partial<AnalyticsFilters>): Enterprise[] => {\r\n  return enterprises.filter(enterprise => {\r\n    // Фильтр по дате\r\n    if (filters.dateRange) {\r\n      const enterpriseDate = new Date(enterprise.registrationDate);\r\n      if (enterpriseDate < filters.dateRange.from || enterpriseDate > filters.dateRange.to) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Фильтр по отраслям\r\n    if (filters.industries && filters.industries.length > 0) {\r\n      if (!filters.industries.includes(enterprise.industry)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Фильтр по регионам\r\n    if (filters.regions && filters.regions.length > 0) {\r\n      if (!filters.regions.includes(enterprise.region)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Фильтр по количеству сотрудников\r\n    if (filters.employeeRange) {\r\n      if (enterprise.employees < filters.employeeRange.min || enterprise.employees > filters.employeeRange.max) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Фильтр по выручке\r\n    if (filters.revenueRange) {\r\n      if (enterprise.revenue < filters.revenueRange.min || enterprise.revenue > filters.revenueRange.max) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  });\r\n};\r\n\r\n// Расчет трендов по месяцам\r\nexport const calculateMonthlyTrends = (enterprises: Enterprise[]) => {\r\n  const monthlyData = new Map<string, { count: number; revenue: number }>();\r\n\r\n  enterprises.forEach(enterprise => {\r\n    const date = new Date(enterprise.registrationDate);\r\n    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n\r\n    const existing = monthlyData.get(monthKey) || { count: 0, revenue: 0 };\r\n    monthlyData.set(monthKey, {\r\n      count: existing.count + 1,\r\n      revenue: existing.revenue + enterprise.revenue\r\n    });\r\n  });\r\n\r\n  return Array.from(monthlyData.entries())\r\n    .sort(([a], [b]) => a.localeCompare(b))\r\n    .map(([month, data]) => ({\r\n      month,\r\n      count: data.count,\r\n      revenue: data.revenue\r\n    }));\r\n};\r\n\r\n// Топ предприятий по выручке\r\nexport const getTopEnterprisesByRevenue = (enterprises: Enterprise[], limit: number = 10): Enterprise[] => {\r\n  return enterprises\r\n    .sort((a, b) => b.revenue - a.revenue)\r\n    .slice(0, limit);\r\n};\r\n\r\n// Топ предприятий по количеству сотрудников\r\nexport const getTopEnterprisesByEmployees = (enterprises: Enterprise[], limit: number = 10): Enterprise[] => {\r\n  return enterprises\r\n    .sort((a, b) => b.employees - a.employees)\r\n    .slice(0, limit);\r\n};\r\n\r\n// Общая статистика\r\nexport const calculateOverallStats = (enterprises: Enterprise[]) => {\r\n  const totalRevenue = enterprises.reduce((sum, e) => sum + e.revenue, 0);\r\n  const totalEmployees = enterprises.reduce((sum, e) => sum + e.employees, 0);\r\n  const totalTaxes = enterprises.reduce((sum, e) => sum + e.taxesPaid, 0);\r\n\r\n  const activeCount = enterprises.filter(e => e.status === 'active').length;\r\n  const inactiveCount = enterprises.filter(e => e.status === 'inactive').length;\r\n  const suspendedCount = enterprises.filter(e => e.status === 'suspended').length;\r\n\r\n  return {\r\n    totalEnterprises: enterprises.length,\r\n    totalRevenue,\r\n    totalEmployees,\r\n    totalTaxes,\r\n    averageRevenue: enterprises.length > 0 ? totalRevenue / enterprises.length : 0,\r\n    averageEmployees: enterprises.length > 0 ? totalEmployees / enterprises.length : 0,\r\n    statusDistribution: {\r\n      active: activeCount,\r\n      inactive: inactiveCount,\r\n      suspended: suspendedCount\r\n    }\r\n  };\r\n};\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 426, "column": 0}, "map": {"version":3,"sources":["file:///C:/projects/hakaton/frontend/src/app/lib/api-client.ts"],"sourcesContent":["// API клиент для работы с бэкендом\r\n\r\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:4000/api';\r\n\r\nexport interface ApiResponse<T> {\r\n  success: boolean;\r\n  message?: string;\r\n  data?: T;\r\n  count?: number;\r\n}\r\n\r\nexport interface UploadResponse {\r\n  success: boolean;\r\n  message: string;\r\n  processedCount: number;\r\n  errorCount: number;\r\n  errors: string[];\r\n}\r\n\r\n// Загрузка файла\r\nexport const uploadFile = async (file: File): Promise<UploadResponse> => {\r\n  const formData = new FormData();\r\n  formData.append('file', file);\r\n\r\n  const response = await fetch(`${API_BASE_URL}/upload`, {\r\n    method: 'POST',\r\n    body: formData,\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Ошибка загрузки: ${response.statusText}`);\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\n// Получение всех предприятий с фильтрами\r\nexport const getEnterprises = async (filters?: {\r\n  industries?: string[];\r\n  regions?: string[];\r\n  status?: string;\r\n  minEmployees?: number;\r\n  maxEmployees?: number;\r\n  minRevenue?: number;\r\n  maxRevenue?: number;\r\n}) => {\r\n  const params = new URLSearchParams();\r\n\r\n  if (filters?.industries) {\r\n    filters.industries.forEach(industry => params.append('industries', industry));\r\n  }\r\n  if (filters?.regions) {\r\n    filters.regions.forEach(region => params.append('regions', region));\r\n  }\r\n  if (filters?.status) {\r\n    params.append('status', filters.status);\r\n  }\r\n  if (filters?.minEmployees !== undefined) {\r\n    params.append('minEmployees', filters.minEmployees.toString());\r\n  }\r\n  if (filters?.maxEmployees !== undefined) {\r\n    params.append('maxEmployees', filters.maxEmployees.toString());\r\n  }\r\n  if (filters?.minRevenue !== undefined) {\r\n    params.append('minRevenue', filters.minRevenue.toString());\r\n  }\r\n  if (filters?.maxRevenue !== undefined) {\r\n    params.append('maxRevenue', filters.maxRevenue.toString());\r\n  }\r\n\r\n  const url = `${API_BASE_URL}/enterprises${params.toString() ? '?' + params.toString() : ''}`;\r\n  const response = await fetch(url);\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Ошибка получения данных: ${response.statusText}`);\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\n// Получение предприятия по ID\r\nexport const getEnterpriseById = async (id: string) => {\r\n  const response = await fetch(`${API_BASE_URL}/enterprises/${id}`);\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Ошибка получения данных: ${response.statusText}`);\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\n// Получение статистики\r\nexport const getStatistics = async () => {\r\n  const response = await fetch(`${API_BASE_URL}/statistics`);\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Ошибка получения статистики: ${response.statusText}`);\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\n// Очистка всех данных\r\nexport const clearAllData = async () => {\r\n  const response = await fetch(`${API_BASE_URL}/enterprises`, {\r\n    method: 'DELETE',\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Ошибка очистки данных: ${response.statusText}`);\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\n// Проверка здоровья API\r\nexport const checkHealth = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/health`);\r\n    return response.ok;\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n\r\n"],"names":[],"mappings":"AAAA,mCAAmC;;;;;;;;;;;;;;;AAEnC,MAAM,eAAe,iEAAmC;AAkBjD,MAAM,aAAa,OAAO;IAC/B,MAAM,WAAW,IAAI;IACrB,SAAS,MAAM,CAAC,QAAQ;IAExB,MAAM,WAAW,MAAM,MAAM,GAAG,aAAa,OAAO,CAAC,EAAE;QACrD,QAAQ;QACR,MAAM;IACR;IAEA,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,IAAI,MAAM,CAAC,iBAAiB,EAAE,SAAS,UAAU,EAAE;IAC3D;IAEA,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,iBAAiB,OAAO;IASnC,MAAM,SAAS,IAAI;IAEnB,IAAI,SAAS,YAAY;QACvB,QAAQ,UAAU,CAAC,OAAO,CAAC,CAAA,WAAY,OAAO,MAAM,CAAC,cAAc;IACrE;IACA,IAAI,SAAS,SAAS;QACpB,QAAQ,OAAO,CAAC,OAAO,CAAC,CAAA,SAAU,OAAO,MAAM,CAAC,WAAW;IAC7D;IACA,IAAI,SAAS,QAAQ;QACnB,OAAO,MAAM,CAAC,UAAU,QAAQ,MAAM;IACxC;IACA,IAAI,SAAS,iBAAiB,WAAW;QACvC,OAAO,MAAM,CAAC,gBAAgB,QAAQ,YAAY,CAAC,QAAQ;IAC7D;IACA,IAAI,SAAS,iBAAiB,WAAW;QACvC,OAAO,MAAM,CAAC,gBAAgB,QAAQ,YAAY,CAAC,QAAQ;IAC7D;IACA,IAAI,SAAS,eAAe,WAAW;QACrC,OAAO,MAAM,CAAC,cAAc,QAAQ,UAAU,CAAC,QAAQ;IACzD;IACA,IAAI,SAAS,eAAe,WAAW;QACrC,OAAO,MAAM,CAAC,cAAc,QAAQ,UAAU,CAAC,QAAQ;IACzD;IAEA,MAAM,MAAM,GAAG,aAAa,YAAY,EAAE,OAAO,QAAQ,KAAK,MAAM,OAAO,QAAQ,KAAK,IAAI;IAC5F,MAAM,WAAW,MAAM,MAAM;IAE7B,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,IAAI,MAAM,CAAC,yBAAyB,EAAE,SAAS,UAAU,EAAE;IACnE;IAEA,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,oBAAoB,OAAO;IACtC,MAAM,WAAW,MAAM,MAAM,GAAG,aAAa,aAAa,EAAE,IAAI;IAEhE,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,IAAI,MAAM,CAAC,yBAAyB,EAAE,SAAS,UAAU,EAAE;IACnE;IAEA,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,gBAAgB;IAC3B,MAAM,WAAW,MAAM,MAAM,GAAG,aAAa,WAAW,CAAC;IAEzD,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,IAAI,MAAM,CAAC,6BAA6B,EAAE,SAAS,UAAU,EAAE;IACvE;IAEA,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,eAAe;IAC1B,MAAM,WAAW,MAAM,MAAM,GAAG,aAAa,YAAY,CAAC,EAAE;QAC1D,QAAQ;IACV;IAEA,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,IAAI,MAAM,CAAC,uBAAuB,EAAE,SAAS,UAAU,EAAE;IACjE;IAEA,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,cAAc;IACzB,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,GAAG,aAAa,OAAO,CAAC;QACrD,OAAO,SAAS,EAAE;IACpB,EAAE,OAAM;QACN,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 519, "column": 0}, "map": {"version":3,"sources":["file:///C:/projects/hakaton/frontend/src/app/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { Building2, Users, TrendingUp, AlertCircle, Upload, BarChart } from 'lucide-react';\r\nimport Link from 'next/link';\r\nimport { Enterprise } from './types/enterprise';\r\nimport { formatNumber, formatCurrency } from './lib/data-utils';\r\nimport { calculateOverallStats, calculateIndustryStats, calculateRegionStats, calculateDataQuality } from './lib/analytics';\r\nimport { getEnterprises } from './lib/api-client';\r\n\r\nexport default function Dashboard() {\r\n  const [enterprises, setEnterprises] = useState<Enterprise[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    // Загружаем данные из бэкенда\r\n    const loadData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const response = await getEnterprises();\r\n        if (response.success && response.data) {\r\n          setEnterprises(response.data);\r\n        } else {\r\n          setError('Не удалось загрузить данные');\r\n        }\r\n      } catch (err) {\r\n        setError(`Ошибка загрузки: ${(err as Error).message}`);\r\n        console.error('Ошибка загрузки данных:', err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadData();\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-64\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\r\n          <div className=\"text-lg text-gray-600 mt-4\">Загрузка данных...</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-64\">\r\n        <div className=\"text-center\">\r\n          <AlertCircle className=\"w-12 h-12 text-red-500 mx-auto mb-4\" />\r\n          <div className=\"text-lg text-red-600\">{error}</div>\r\n          <p className=\"text-gray-600 mt-2\">Проверьте, что бэкенд запущен на порту 4000</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (enterprises.length === 0) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-64\">\r\n        <div className=\"text-center\">\r\n          <Upload className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\r\n          <div className=\"text-lg text-gray-600\">Нет данных для отображения</div>\r\n          <p className=\"text-gray-500 mt-2\">Загрузите файл с данными предприятий</p>\r\n          <Link\r\n            href=\"/upload\"\r\n            className=\"mt-4 inline-flex items-center bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors\"\r\n          >\r\n            <Upload className=\"w-5 h-5 mr-2\" />\r\n            Загрузить данные\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const overallStats = calculateOverallStats(enterprises);\r\n  const industryStats = calculateIndustryStats(enterprises);\r\n  const regionStats = calculateRegionStats(enterprises);\r\n  const dataQuality = calculateDataQuality(enterprises);\r\n\r\n  const validDataPercentage = Math.round((dataQuality.validRecords / dataQuality.totalRecords) * 100);\r\n\r\n  const topIndustries = industryStats\r\n    .sort((a, b) => b.count - a.count)\r\n    .slice(0, 5);\r\n\r\n  const topRegions = regionStats\r\n    .sort((a, b) => b.count - a.count)\r\n    .slice(0, 5);\r\n\r\n  return (\r\n    <div className=\"space-y-8\">\r\n      {/* Заголовок */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold text-gray-900\">\r\n            Система анализа данных предприятий Москвы\r\n          </h1>\r\n          <p className=\"text-gray-600 mt-2\">\r\n            Обзор промышленных предприятий и ключевые показатели\r\n          </p>\r\n        </div>\r\n        <Link\r\n          href=\"/upload\"\r\n          className=\"bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2\"\r\n        >\r\n          <Upload className=\"w-5 h-5\" />\r\n          <span>Загрузить данные</span>\r\n        </Link>\r\n      </div>\r\n\r\n      {/* Ключевые метрики */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\r\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <p className=\"text-sm font-medium text-gray-600\">Всего предприятий</p>\r\n              <p className=\"text-3xl font-bold text-gray-900\">{formatNumber(overallStats.totalEnterprises)}</p>\r\n            </div>\r\n            <div className=\"p-3 bg-blue-50 rounded-lg\">\r\n              <Building2 className=\"w-6 h-6 text-blue-600\" />\r\n            </div>\r\n          </div>\r\n          <div className=\"mt-4\">\r\n            <span className=\"text-green-600 text-sm font-medium\">\r\n              {overallStats.statusDistribution.active} активных\r\n            </span>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <p className=\"text-sm font-medium text-gray-600\">Общая выручка</p>\r\n              <p className=\"text-3xl font-bold text-gray-900\">{formatCurrency(overallStats.totalRevenue)}</p>\r\n            </div>\r\n            <div className=\"p-3 bg-green-50 rounded-lg\">\r\n              <TrendingUp className=\"w-6 h-6 text-green-600\" />\r\n            </div>\r\n          </div>\r\n          <div className=\"mt-4\">\r\n            <span className=\"text-gray-600 text-sm\">\r\n              Ср: {formatCurrency(overallStats.averageRevenue)}\r\n            </span>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <p className=\"text-sm font-medium text-gray-600\">Всего сотрудников</p>\r\n              <p className=\"text-3xl font-bold text-gray-900\">{formatNumber(overallStats.totalEmployees)}</p>\r\n            </div>\r\n            <div className=\"p-3 bg-purple-50 rounded-lg\">\r\n              <Users className=\"w-6 h-6 text-purple-600\" />\r\n            </div>\r\n          </div>\r\n          <div className=\"mt-4\">\r\n            <span className=\"text-gray-600 text-sm\">\r\n              Ср: {formatNumber(Math.round(overallStats.averageEmployees))}\r\n            </span>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <p className=\"text-sm font-medium text-gray-600\">Качество данных</p>\r\n              <p className=\"text-3xl font-bold text-gray-900\">{validDataPercentage}%</p>\r\n            </div>\r\n            <div className=\"p-3 bg-yellow-50 rounded-lg\">\r\n              <AlertCircle className=\"w-6 h-6 text-yellow-600\" />\r\n            </div>\r\n          </div>\r\n          <div className=\"mt-4\">\r\n            <span className=\"text-gray-600 text-sm\">\r\n              {dataQuality.validRecords} из {dataQuality.totalRecords}\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Графики и аналитика */}\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\r\n        {/* Топ отрасли */}\r\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\r\n          <div className=\"flex items-center justify-between mb-6\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900\">Топ отрасли</h3>\r\n            <Link href=\"/analytics\" className=\"text-blue-600 hover:text-blue-800 text-sm font-medium\">\r\n              Подробнее\r\n            </Link>\r\n          </div>\r\n          <div className=\"space-y-4\">\r\n            {topIndustries.map((industry, index) => (\r\n              <div key={industry.industry} className=\"flex items-center justify-between\">\r\n                <div className=\"flex items-center space-x-3\">\r\n                  <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\r\n                    <span className=\"text-blue-600 font-semibold text-sm\">{index + 1}</span>\r\n                  </div>\r\n                  <div>\r\n                    <p className=\"font-medium text-gray-900\">{industry.industry}</p>\r\n                    <p className=\"text-sm text-gray-500\">{industry.count} предприятий</p>\r\n                  </div>\r\n                </div>\r\n                <div className=\"text-right\">\r\n                  <p className=\"font-semibold text-gray-900\">{formatCurrency(industry.totalRevenue)}</p>\r\n                  <p className=\"text-sm text-gray-500\">Ср: {industry.averageEmployees} сотр.</p>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Топ регионы */}\r\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\r\n          <div className=\"flex items-center justify-between mb-6\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900\">Топ регионы</h3>\r\n            <Link href=\"/analytics\" className=\"text-blue-600 hover:text-blue-800 text-sm font-medium\">\r\n              Подробнее\r\n            </Link>\r\n          </div>\r\n          <div className=\"space-y-4\">\r\n            {topRegions.map((region, index) => (\r\n              <div key={region.region} className=\"flex items-center justify-between\">\r\n                <div className=\"flex items-center space-x-3\">\r\n                  <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\">\r\n                    <span className=\"text-green-600 font-semibold text-sm\">{index + 1}</span>\r\n                  </div>\r\n                  <div>\r\n                    <p className=\"font-medium text-gray-900\">{region.region}</p>\r\n                    <p className=\"text-sm text-gray-500\">{region.count} предприятий</p>\r\n                  </div>\r\n                </div>\r\n                <div className=\"text-right\">\r\n                  <p className=\"font-semibold text-gray-900\">{formatCurrency(region.totalRevenue)}</p>\r\n                  <p className=\"text-sm text-gray-500\">Ср: {region.averageEmployees} сотр.</p>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Быстрые действия */}\r\n      <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\r\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Быстрые действия</h3>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n          <Link\r\n            href=\"/upload\"\r\n            className=\"flex items-center space-x-3 p-4 border border-gray-200 rounded-lg hover:border-blue-300 hover:bg-blue-50 transition-colors\"\r\n          >\r\n            <Upload className=\"w-8 h-8 text-blue-600\" />\r\n            <div>\r\n              <p className=\"font-medium text-gray-900\">Загрузить данные</p>\r\n              <p className=\"text-sm text-gray-500\">Добавить новые данные предприятий</p>\r\n            </div>\r\n          </Link>\r\n\r\n          <Link\r\n            href=\"/analytics\"\r\n            className=\"flex items-center space-x-3 p-4 border border-gray-200 rounded-lg hover:border-green-300 hover:bg-green-50 transition-colors\"\r\n          >\r\n            <BarChart className=\"w-8 h-8 text-green-600\" />\r\n            <div>\r\n              <p className=\"font-medium text-gray-900\">Аналитика</p>\r\n              <p className=\"text-sm text-gray-500\">Подробный анализ данных</p>\r\n            </div>\r\n          </Link>\r\n\r\n          <Link\r\n            href=\"/reports\"\r\n            className=\"flex items-center space-x-3 p-4 border border-gray-200 rounded-lg hover:border-purple-300 hover:bg-purple-50 transition-colors\"\r\n          >\r\n            <TrendingUp className=\"w-8 h-8 text-purple-600\" />\r\n            <div>\r\n              <p className=\"font-medium text-gray-900\">Отчёты</p>\r\n              <p className=\"text-sm text-gray-500\">Сгенерировать отчёт</p>\r\n            </div>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}