{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 10, "column": 0}, "map": {"version":3,"sources":["file:///C:/projects/hakaton/frontend/src/app/lib/data-utils.ts"],"sourcesContent":["import * as XLSX from 'xlsx';\r\nimport Papa from 'papaparse';\r\nimport { Enterprise, UploadResult } from '../types/enterprise';\r\n\r\n// Московские регионы\r\nexport const MOSCOW_REGIONS = [\r\n  'Центральный',\r\n  'Северный',\r\n  'Северо-Восточный',\r\n  'Восточный',\r\n  'Юго-Восточный',\r\n  'Южный',\r\n  'Юго-Западный',\r\n  'Западный',\r\n  'Северо-Западный',\r\n  'Новомосковский',\r\n  'Троицкий'\r\n];\r\n\r\n// Основные отрасли промышленности\r\nexport const INDUSTRIES = [\r\n  'Машиностроение',\r\n  'Пищевая промышленность',\r\n  'Химическая промышленность',\r\n  'Текстильная промышленность',\r\n  'Металлургия',\r\n  'Электроника',\r\n  'Строительные материалы',\r\n  'Фармацевтика',\r\n  'Автомобилестроение',\r\n  'Полиграфия',\r\n  'Другое'\r\n];\r\n\r\n// Валидация данных предприятия\r\nexport const validateEnterprise = (data: Record<string, unknown>): { isValid: boolean; errors: string[] } => {\r\n  const errors: string[] = [];\r\n\r\n  if (!data.name || typeof data.name !== 'string') {\r\n    errors.push('Некорректное название предприятия');\r\n  }\r\n\r\n  if (!data.industry || !INDUSTRIES.includes(data.industry as string)) {\r\n    errors.push('Некорректная отрасль');\r\n  }\r\n\r\n  if (!data.region || !MOSCOW_REGIONS.includes(data.region as string)) {\r\n    errors.push('Некорректный регион');\r\n  }\r\n\r\n  if (!data.employees || Number(data.employees) < 0) {\r\n    errors.push('Некорректное количество сотрудников');\r\n  }\r\n\r\n  if (!data.revenue || Number(data.revenue) < 0) {\r\n    errors.push('Некорректная выручка');\r\n  }\r\n\r\n  const contactInfo = data.contactInfo as Record<string, unknown> | undefined;\r\n  if (!contactInfo?.address) {\r\n    errors.push('Отсутствует адрес');\r\n  }\r\n\r\n  return {\r\n    isValid: errors.length === 0,\r\n    errors\r\n  };\r\n};\r\n\r\n// Парсинг CSV файла\r\nexport const parseCSV = (file: File): Promise<UploadResult> => {\r\n  return new Promise((resolve) => {\r\n    Papa.parse(file, {\r\n      header: true,\r\n      complete: (results) => {\r\n        const enterprises: Enterprise[] = [];\r\n        const errors: string[] = [];\r\n        let errorCount = 0;\r\n\r\n        results.data.forEach((row: unknown, index: number) => {\r\n          const rowData = row as Record<string, unknown>;\r\n          const validation = validateEnterprise(rowData);\r\n\r\n          if (validation.isValid) {\r\n            const enterprise: Enterprise = {\r\n              id: crypto.randomUUID(),\r\n              name: String(rowData.name),\r\n              industry: String(rowData.industry),\r\n              region: String(rowData.region),\r\n              employees: parseInt(String(rowData.employees)) || 0,\r\n              revenue: parseFloat(String(rowData.revenue)) || 0,\r\n              taxesPaid: parseFloat(String(rowData.taxesPaid)) || 0,\r\n              registrationDate: new Date(String(rowData.registrationDate) || Date.now()),\r\n              lastUpdated: new Date(),\r\n              status: (rowData.status as 'active' | 'inactive' | 'suspended') || 'active',\r\n              contactInfo: {\r\n                address: String(rowData.address),\r\n                phone: String(rowData.phone || ''),\r\n                email: String(rowData.email || '')\r\n              }\r\n            };\r\n            enterprises.push(enterprise);\r\n          } else {\r\n            errorCount++;\r\n            errors.push(`Строка ${index + 1}: ${validation.errors.join(', ')}`);\r\n          }\r\n        });\r\n\r\n        resolve({\r\n          success: true,\r\n          message: `Обработано ${enterprises.length} записей из ${results.data.length}`,\r\n          processedCount: enterprises.length,\r\n          errorCount,\r\n          errors,\r\n          data: enterprises\r\n        });\r\n      },\r\n      error: (error) => {\r\n        resolve({\r\n          success: false,\r\n          message: `Ошибка парсинга CSV: ${error.message}`,\r\n          processedCount: 0,\r\n          errorCount: 1,\r\n          errors: [error.message]\r\n        });\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n// Парсинг Excel файла\r\nexport const parseExcel = (file: File): Promise<UploadResult> => {\r\n  return new Promise((resolve) => {\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = (e) => {\r\n      try {\r\n        const data = e.target?.result;\r\n        const workbook = XLSX.read(data, { type: 'binary' });\r\n        const sheetName = workbook.SheetNames[0];\r\n        const worksheet = workbook.Sheets[sheetName];\r\n        const jsonData = XLSX.utils.sheet_to_json(worksheet);\r\n\r\n        const enterprises: Enterprise[] = [];\r\n        const errors: string[] = [];\r\n        let errorCount = 0;\r\n\r\n        jsonData.forEach((row: unknown, index: number) => {\r\n          const rowData = row as Record<string, unknown>;\r\n          const validation = validateEnterprise(rowData);\r\n\r\n          if (validation.isValid) {\r\n            const enterprise: Enterprise = {\r\n              id: crypto.randomUUID(),\r\n              name: String(rowData.name),\r\n              industry: String(rowData.industry),\r\n              region: String(rowData.region),\r\n              employees: parseInt(String(rowData.employees)) || 0,\r\n              revenue: parseFloat(String(rowData.revenue)) || 0,\r\n              taxesPaid: parseFloat(String(rowData.taxesPaid)) || 0,\r\n              registrationDate: new Date(String(rowData.registrationDate) || Date.now()),\r\n              lastUpdated: new Date(),\r\n              status: (rowData.status as 'active' | 'inactive' | 'suspended') || 'active',\r\n              contactInfo: {\r\n                address: String(rowData.address),\r\n                phone: String(rowData.phone || ''),\r\n                email: String(rowData.email || '')\r\n              }\r\n            };\r\n            enterprises.push(enterprise);\r\n          } else {\r\n            errorCount++;\r\n            errors.push(`Строка ${index + 1}: ${validation.errors.join(', ')}`);\r\n          }\r\n        });\r\n\r\n        resolve({\r\n          success: true,\r\n          message: `Обработано ${enterprises.length} записей из ${jsonData.length}`,\r\n          processedCount: enterprises.length,\r\n          errorCount,\r\n          errors,\r\n          data: enterprises\r\n        });\r\n      } catch (error) {\r\n        resolve({\r\n          success: false,\r\n          message: `Ошибка парсинга Excel: ${(error as Error).message}`,\r\n          processedCount: 0,\r\n          errorCount: 1,\r\n          errors: [(error as Error).message]\r\n        });\r\n      }\r\n    };\r\n\r\n    reader.readAsBinaryString(file);\r\n  });\r\n};\r\n\r\n// Форматирование чисел\r\nexport const formatNumber = (num: number): string => {\r\n  return new Intl.NumberFormat('ru-RU').format(num);\r\n};\r\n\r\n// Форматирование валюты\r\nexport const formatCurrency = (amount: number): string => {\r\n  return new Intl.NumberFormat('ru-RU', {\r\n    style: 'currency',\r\n    currency: 'RUB'\r\n  }).format(amount);\r\n};\r\n\r\n// Генерация случайных данных для демонстрации\r\nexport const generateSampleData = (count: number = 100): Enterprise[] => {\r\n  const sampleData: Enterprise[] = [];\r\n\r\n  for (let i = 0; i < count; i++) {\r\n    const enterprise: Enterprise = {\r\n      id: crypto.randomUUID(),\r\n      name: `Предприятие ${i + 1}`,\r\n      industry: INDUSTRIES[Math.floor(Math.random() * INDUSTRIES.length)],\r\n      region: MOSCOW_REGIONS[Math.floor(Math.random() * MOSCOW_REGIONS.length)],\r\n      employees: Math.floor(Math.random() * 1000) + 10,\r\n      revenue: Math.floor(Math.random() * 100000000) + 1000000,\r\n      taxesPaid: Math.floor(Math.random() * 10000000) + 100000,\r\n      registrationDate: new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000 * 5),\r\n      lastUpdated: new Date(),\r\n      status: Math.random() > 0.1 ? 'active' : Math.random() > 0.5 ? 'inactive' : 'suspended',\r\n      contactInfo: {\r\n        address: `Москва, улица ${i + 1}, дом ${Math.floor(Math.random() * 100) + 1}`,\r\n        phone: `+7-495-${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 90) + 10}`,\r\n        email: `contact${i + 1}@enterprise.ru`\r\n      }\r\n    };\r\n    sampleData.push(enterprise);\r\n  }\r\n\r\n  return sampleData;\r\n};\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;;;AAIO,MAAM,iBAAiB;IAC5B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAGM,MAAM,aAAa;IACxB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAGM,MAAM,qBAAqB,CAAC;IACjC,MAAM,SAAmB,EAAE;IAE3B,IAAI,CAAC,KAAK,IAAI,IAAI,OAAO,KAAK,IAAI,KAAK,UAAU;QAC/C,OAAO,IAAI,CAAC;IACd;IAEA,IAAI,CAAC,KAAK,QAAQ,IAAI,CAAC,WAAW,QAAQ,CAAC,KAAK,QAAQ,GAAa;QACnE,OAAO,IAAI,CAAC;IACd;IAEA,IAAI,CAAC,KAAK,MAAM,IAAI,CAAC,eAAe,QAAQ,CAAC,KAAK,MAAM,GAAa;QACnE,OAAO,IAAI,CAAC;IACd;IAEA,IAAI,CAAC,KAAK,SAAS,IAAI,OAAO,KAAK,SAAS,IAAI,GAAG;QACjD,OAAO,IAAI,CAAC;IACd;IAEA,IAAI,CAAC,KAAK,OAAO,IAAI,OAAO,KAAK,OAAO,IAAI,GAAG;QAC7C,OAAO,IAAI,CAAC;IACd;IAEA,MAAM,cAAc,KAAK,WAAW;IACpC,IAAI,CAAC,aAAa,SAAS;QACzB,OAAO,IAAI,CAAC;IACd;IAEA,OAAO;QACL,SAAS,OAAO,MAAM,KAAK;QAC3B;IACF;AACF;AAGO,MAAM,WAAW,CAAC;IACvB,OAAO,IAAI,QAAQ,CAAC;QAClB,iJAAI,CAAC,KAAK,CAAC,MAAM;YACf,QAAQ;YACR,UAAU,CAAC;gBACT,MAAM,cAA4B,EAAE;gBACpC,MAAM,SAAmB,EAAE;gBAC3B,IAAI,aAAa;gBAEjB,QAAQ,IAAI,CAAC,OAAO,CAAC,CAAC,KAAc;oBAClC,MAAM,UAAU;oBAChB,MAAM,aAAa,mBAAmB;oBAEtC,IAAI,WAAW,OAAO,EAAE;wBACtB,MAAM,aAAyB;4BAC7B,IAAI,OAAO,UAAU;4BACrB,MAAM,OAAO,QAAQ,IAAI;4BACzB,UAAU,OAAO,QAAQ,QAAQ;4BACjC,QAAQ,OAAO,QAAQ,MAAM;4BAC7B,WAAW,SAAS,OAAO,QAAQ,SAAS,MAAM;4BAClD,SAAS,WAAW,OAAO,QAAQ,OAAO,MAAM;4BAChD,WAAW,WAAW,OAAO,QAAQ,SAAS,MAAM;4BACpD,kBAAkB,IAAI,KAAK,OAAO,QAAQ,gBAAgB,KAAK,KAAK,GAAG;4BACvE,aAAa,IAAI;4BACjB,QAAQ,AAAC,QAAQ,MAAM,IAA4C;4BACnE,aAAa;gCACX,SAAS,OAAO,QAAQ,OAAO;gCAC/B,OAAO,OAAO,QAAQ,KAAK,IAAI;gCAC/B,OAAO,OAAO,QAAQ,KAAK,IAAI;4BACjC;wBACF;wBACA,YAAY,IAAI,CAAC;oBACnB,OAAO;wBACL;wBACA,OAAO,IAAI,CAAC,CAAC,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAE,WAAW,MAAM,CAAC,IAAI,CAAC,OAAO;oBACpE;gBACF;gBAEA,QAAQ;oBACN,SAAS;oBACT,SAAS,CAAC,WAAW,EAAE,YAAY,MAAM,CAAC,YAAY,EAAE,QAAQ,IAAI,CAAC,MAAM,EAAE;oBAC7E,gBAAgB,YAAY,MAAM;oBAClC;oBACA;oBACA,MAAM;gBACR;YACF;YACA,OAAO,CAAC;gBACN,QAAQ;oBACN,SAAS;oBACT,SAAS,CAAC,qBAAqB,EAAE,MAAM,OAAO,EAAE;oBAChD,gBAAgB;oBAChB,YAAY;oBACZ,QAAQ;wBAAC,MAAM,OAAO;qBAAC;gBACzB;YACF;QACF;IACF;AACF;AAGO,MAAM,aAAa,CAAC;IACzB,OAAO,IAAI,QAAQ,CAAC;QAClB,MAAM,SAAS,IAAI;QAEnB,OAAO,MAAM,GAAG,CAAC;YACf,IAAI;gBACF,MAAM,OAAO,EAAE,MAAM,EAAE;gBACvB,MAAM,WAAW,qIAAS,CAAC,MAAM;oBAAE,MAAM;gBAAS;gBAClD,MAAM,YAAY,SAAS,UAAU,CAAC,EAAE;gBACxC,MAAM,YAAY,SAAS,MAAM,CAAC,UAAU;gBAC5C,MAAM,WAAW,sIAAU,CAAC,aAAa,CAAC;gBAE1C,MAAM,cAA4B,EAAE;gBACpC,MAAM,SAAmB,EAAE;gBAC3B,IAAI,aAAa;gBAEjB,SAAS,OAAO,CAAC,CAAC,KAAc;oBAC9B,MAAM,UAAU;oBAChB,MAAM,aAAa,mBAAmB;oBAEtC,IAAI,WAAW,OAAO,EAAE;wBACtB,MAAM,aAAyB;4BAC7B,IAAI,OAAO,UAAU;4BACrB,MAAM,OAAO,QAAQ,IAAI;4BACzB,UAAU,OAAO,QAAQ,QAAQ;4BACjC,QAAQ,OAAO,QAAQ,MAAM;4BAC7B,WAAW,SAAS,OAAO,QAAQ,SAAS,MAAM;4BAClD,SAAS,WAAW,OAAO,QAAQ,OAAO,MAAM;4BAChD,WAAW,WAAW,OAAO,QAAQ,SAAS,MAAM;4BACpD,kBAAkB,IAAI,KAAK,OAAO,QAAQ,gBAAgB,KAAK,KAAK,GAAG;4BACvE,aAAa,IAAI;4BACjB,QAAQ,AAAC,QAAQ,MAAM,IAA4C;4BACnE,aAAa;gCACX,SAAS,OAAO,QAAQ,OAAO;gCAC/B,OAAO,OAAO,QAAQ,KAAK,IAAI;gCAC/B,OAAO,OAAO,QAAQ,KAAK,IAAI;4BACjC;wBACF;wBACA,YAAY,IAAI,CAAC;oBACnB,OAAO;wBACL;wBACA,OAAO,IAAI,CAAC,CAAC,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAE,WAAW,MAAM,CAAC,IAAI,CAAC,OAAO;oBACpE;gBACF;gBAEA,QAAQ;oBACN,SAAS;oBACT,SAAS,CAAC,WAAW,EAAE,YAAY,MAAM,CAAC,YAAY,EAAE,SAAS,MAAM,EAAE;oBACzE,gBAAgB,YAAY,MAAM;oBAClC;oBACA;oBACA,MAAM;gBACR;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ;oBACN,SAAS;oBACT,SAAS,CAAC,uBAAuB,EAAE,AAAC,MAAgB,OAAO,EAAE;oBAC7D,gBAAgB;oBAChB,YAAY;oBACZ,QAAQ;wBAAE,MAAgB,OAAO;qBAAC;gBACpC;YACF;QACF;QAEA,OAAO,kBAAkB,CAAC;IAC5B;AACF;AAGO,MAAM,eAAe,CAAC;IAC3B,OAAO,IAAI,KAAK,YAAY,CAAC,SAAS,MAAM,CAAC;AAC/C;AAGO,MAAM,iBAAiB,CAAC;IAC7B,OAAO,IAAI,KAAK,YAAY,CAAC,SAAS;QACpC,OAAO;QACP,UAAU;IACZ,GAAG,MAAM,CAAC;AACZ;AAGO,MAAM,qBAAqB,CAAC,QAAgB,GAAG;IACpD,MAAM,aAA2B,EAAE;IAEnC,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,IAAK;QAC9B,MAAM,aAAyB;YAC7B,IAAI,OAAO,UAAU;YACrB,MAAM,CAAC,YAAY,EAAE,IAAI,GAAG;YAC5B,UAAU,UAAU,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,WAAW,MAAM,EAAE;YACnE,QAAQ,cAAc,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,eAAe,MAAM,EAAE;YACzE,WAAW,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,QAAQ;YAC9C,SAAS,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,aAAa;YACjD,WAAW,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,YAAY;YAClD,kBAAkB,IAAI,KAAK,KAAK,GAAG,KAAK,KAAK,MAAM,KAAK,MAAM,KAAK,KAAK,KAAK,OAAO;YACpF,aAAa,IAAI;YACjB,QAAQ,KAAK,MAAM,KAAK,MAAM,WAAW,KAAK,MAAM,KAAK,MAAM,aAAa;YAC5E,aAAa;gBACX,SAAS,CAAC,cAAc,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,OAAO,GAAG;gBAC7E,OAAO,CAAC,OAAO,EAAE,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,OAAO,IAAI,CAAC,EAAE,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,MAAM,GAAG,CAAC,EAAE,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,MAAM,IAAI;gBACtI,OAAO,CAAC,OAAO,EAAE,IAAI,EAAE,cAAc,CAAC;YACxC;QACF;QACA,WAAW,IAAI,CAAC;IAClB;IAEA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///C:/projects/hakaton/frontend/src/app/lib/analytics.ts"],"sourcesContent":["import { Enterprise, IndustryStats, RegionStats, DataQuality, AnalyticsFilters } from '../types/enterprise';\r\n\r\n// Аналитика по отраслям\r\nexport const calculateIndustryStats = (enterprises: Enterprise[]): IndustryStats[] => {\r\n  const industryMap = new Map<string, { count: number; totalRevenue: number; totalEmployees: number }>();\r\n\r\n  enterprises.forEach(enterprise => {\r\n    const existing = industryMap.get(enterprise.industry) || { count: 0, totalRevenue: 0, totalEmployees: 0 };\r\n    industryMap.set(enterprise.industry, {\r\n      count: existing.count + 1,\r\n      totalRevenue: existing.totalRevenue + enterprise.revenue,\r\n      totalEmployees: existing.totalEmployees + enterprise.employees\r\n    });\r\n  });\r\n\r\n  return Array.from(industryMap.entries()).map(([industry, stats]) => ({\r\n    industry,\r\n    count: stats.count,\r\n    totalRevenue: stats.totalRevenue,\r\n    averageEmployees: Math.round(stats.totalEmployees / stats.count)\r\n  }));\r\n};\r\n\r\n// Аналитика по регионам\r\nexport const calculateRegionStats = (enterprises: Enterprise[]): RegionStats[] => {\r\n  const regionMap = new Map<string, { count: number; totalRevenue: number; totalEmployees: number }>();\r\n\r\n  enterprises.forEach(enterprise => {\r\n    const existing = regionMap.get(enterprise.region) || { count: 0, totalRevenue: 0, totalEmployees: 0 };\r\n    regionMap.set(enterprise.region, {\r\n      count: existing.count + 1,\r\n      totalRevenue: existing.totalRevenue + enterprise.revenue,\r\n      totalEmployees: existing.totalEmployees + enterprise.employees\r\n    });\r\n  });\r\n\r\n  return Array.from(regionMap.entries()).map(([region, stats]) => ({\r\n    region,\r\n    count: stats.count,\r\n    totalRevenue: stats.totalRevenue,\r\n    averageEmployees: Math.round(stats.totalEmployees / stats.count)\r\n  }));\r\n};\r\n\r\n// Оценка качества данных\r\nexport const calculateDataQuality = (enterprises: Enterprise[]): DataQuality => {\r\n  let validRecords = 0;\r\n  const validationErrors: string[] = [];\r\n\r\n  enterprises.forEach((enterprise, index) => {\r\n    let isValid = true;\r\n    const errors: string[] = [];\r\n\r\n    if (!enterprise.name || enterprise.name.trim().length === 0) {\r\n      errors.push('Отсутствует название');\r\n      isValid = false;\r\n    }\r\n\r\n    if (!enterprise.contactInfo?.address || enterprise.contactInfo.address.trim().length === 0) {\r\n      errors.push('Отсутствует адрес');\r\n      isValid = false;\r\n    }\r\n\r\n    if (enterprise.employees < 0) {\r\n      errors.push('Некорректное количество сотрудников');\r\n      isValid = false;\r\n    }\r\n\r\n    if (enterprise.revenue < 0) {\r\n      errors.push('Некорректная выручка');\r\n      isValid = false;\r\n    }\r\n\r\n    if (isValid) {\r\n      validRecords++;\r\n    } else {\r\n      validationErrors.push(`Запись ${index + 1}: ${errors.join(', ')}`);\r\n    }\r\n  });\r\n\r\n  return {\r\n    totalRecords: enterprises.length,\r\n    validRecords,\r\n    invalidRecords: enterprises.length - validRecords,\r\n    validationErrors\r\n  };\r\n};\r\n\r\n// Фильтрация данных\r\nexport const filterEnterprises = (enterprises: Enterprise[], filters: Partial<AnalyticsFilters>): Enterprise[] => {\r\n  return enterprises.filter(enterprise => {\r\n    // Фильтр по дате\r\n    if (filters.dateRange) {\r\n      const enterpriseDate = new Date(enterprise.registrationDate);\r\n      if (enterpriseDate < filters.dateRange.from || enterpriseDate > filters.dateRange.to) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Фильтр по отраслям\r\n    if (filters.industries && filters.industries.length > 0) {\r\n      if (!filters.industries.includes(enterprise.industry)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Фильтр по регионам\r\n    if (filters.regions && filters.regions.length > 0) {\r\n      if (!filters.regions.includes(enterprise.region)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Фильтр по количеству сотрудников\r\n    if (filters.employeeRange) {\r\n      if (enterprise.employees < filters.employeeRange.min || enterprise.employees > filters.employeeRange.max) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Фильтр по выручке\r\n    if (filters.revenueRange) {\r\n      if (enterprise.revenue < filters.revenueRange.min || enterprise.revenue > filters.revenueRange.max) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  });\r\n};\r\n\r\n// Расчет трендов по месяцам\r\nexport const calculateMonthlyTrends = (enterprises: Enterprise[]) => {\r\n  const monthlyData = new Map<string, { count: number; revenue: number }>();\r\n\r\n  enterprises.forEach(enterprise => {\r\n    const date = new Date(enterprise.registrationDate);\r\n    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n\r\n    const existing = monthlyData.get(monthKey) || { count: 0, revenue: 0 };\r\n    monthlyData.set(monthKey, {\r\n      count: existing.count + 1,\r\n      revenue: existing.revenue + enterprise.revenue\r\n    });\r\n  });\r\n\r\n  return Array.from(monthlyData.entries())\r\n    .sort(([a], [b]) => a.localeCompare(b))\r\n    .map(([month, data]) => ({\r\n      month,\r\n      count: data.count,\r\n      revenue: data.revenue\r\n    }));\r\n};\r\n\r\n// Топ предприятий по выручке\r\nexport const getTopEnterprisesByRevenue = (enterprises: Enterprise[], limit: number = 10): Enterprise[] => {\r\n  return enterprises\r\n    .sort((a, b) => b.revenue - a.revenue)\r\n    .slice(0, limit);\r\n};\r\n\r\n// Топ предприятий по количеству сотрудников\r\nexport const getTopEnterprisesByEmployees = (enterprises: Enterprise[], limit: number = 10): Enterprise[] => {\r\n  return enterprises\r\n    .sort((a, b) => b.employees - a.employees)\r\n    .slice(0, limit);\r\n};\r\n\r\n// Общая статистика\r\nexport const calculateOverallStats = (enterprises: Enterprise[]) => {\r\n  const totalRevenue = enterprises.reduce((sum, e) => sum + e.revenue, 0);\r\n  const totalEmployees = enterprises.reduce((sum, e) => sum + e.employees, 0);\r\n  const totalTaxes = enterprises.reduce((sum, e) => sum + e.taxesPaid, 0);\r\n\r\n  const activeCount = enterprises.filter(e => e.status === 'active').length;\r\n  const inactiveCount = enterprises.filter(e => e.status === 'inactive').length;\r\n  const suspendedCount = enterprises.filter(e => e.status === 'suspended').length;\r\n\r\n  return {\r\n    totalEnterprises: enterprises.length,\r\n    totalRevenue,\r\n    totalEmployees,\r\n    totalTaxes,\r\n    averageRevenue: enterprises.length > 0 ? totalRevenue / enterprises.length : 0,\r\n    averageEmployees: enterprises.length > 0 ? totalEmployees / enterprises.length : 0,\r\n    statusDistribution: {\r\n      active: activeCount,\r\n      inactive: inactiveCount,\r\n      suspended: suspendedCount\r\n    }\r\n  };\r\n};\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAGO,MAAM,yBAAyB,CAAC;IACrC,MAAM,cAAc,IAAI;IAExB,YAAY,OAAO,CAAC,CAAA;QAClB,MAAM,WAAW,YAAY,GAAG,CAAC,WAAW,QAAQ,KAAK;YAAE,OAAO;YAAG,cAAc;YAAG,gBAAgB;QAAE;QACxG,YAAY,GAAG,CAAC,WAAW,QAAQ,EAAE;YACnC,OAAO,SAAS,KAAK,GAAG;YACxB,cAAc,SAAS,YAAY,GAAG,WAAW,OAAO;YACxD,gBAAgB,SAAS,cAAc,GAAG,WAAW,SAAS;QAChE;IACF;IAEA,OAAO,MAAM,IAAI,CAAC,YAAY,OAAO,IAAI,GAAG,CAAC,CAAC,CAAC,UAAU,MAAM,GAAK,CAAC;YACnE;YACA,OAAO,MAAM,KAAK;YAClB,cAAc,MAAM,YAAY;YAChC,kBAAkB,KAAK,KAAK,CAAC,MAAM,cAAc,GAAG,MAAM,KAAK;QACjE,CAAC;AACH;AAGO,MAAM,uBAAuB,CAAC;IACnC,MAAM,YAAY,IAAI;IAEtB,YAAY,OAAO,CAAC,CAAA;QAClB,MAAM,WAAW,UAAU,GAAG,CAAC,WAAW,MAAM,KAAK;YAAE,OAAO;YAAG,cAAc;YAAG,gBAAgB;QAAE;QACpG,UAAU,GAAG,CAAC,WAAW,MAAM,EAAE;YAC/B,OAAO,SAAS,KAAK,GAAG;YACxB,cAAc,SAAS,YAAY,GAAG,WAAW,OAAO;YACxD,gBAAgB,SAAS,cAAc,GAAG,WAAW,SAAS;QAChE;IACF;IAEA,OAAO,MAAM,IAAI,CAAC,UAAU,OAAO,IAAI,GAAG,CAAC,CAAC,CAAC,QAAQ,MAAM,GAAK,CAAC;YAC/D;YACA,OAAO,MAAM,KAAK;YAClB,cAAc,MAAM,YAAY;YAChC,kBAAkB,KAAK,KAAK,CAAC,MAAM,cAAc,GAAG,MAAM,KAAK;QACjE,CAAC;AACH;AAGO,MAAM,uBAAuB,CAAC;IACnC,IAAI,eAAe;IACnB,MAAM,mBAA6B,EAAE;IAErC,YAAY,OAAO,CAAC,CAAC,YAAY;QAC/B,IAAI,UAAU;QACd,MAAM,SAAmB,EAAE;QAE3B,IAAI,CAAC,WAAW,IAAI,IAAI,WAAW,IAAI,CAAC,IAAI,GAAG,MAAM,KAAK,GAAG;YAC3D,OAAO,IAAI,CAAC;YACZ,UAAU;QACZ;QAEA,IAAI,CAAC,WAAW,WAAW,EAAE,WAAW,WAAW,WAAW,CAAC,OAAO,CAAC,IAAI,GAAG,MAAM,KAAK,GAAG;YAC1F,OAAO,IAAI,CAAC;YACZ,UAAU;QACZ;QAEA,IAAI,WAAW,SAAS,GAAG,GAAG;YAC5B,OAAO,IAAI,CAAC;YACZ,UAAU;QACZ;QAEA,IAAI,WAAW,OAAO,GAAG,GAAG;YAC1B,OAAO,IAAI,CAAC;YACZ,UAAU;QACZ;QAEA,IAAI,SAAS;YACX;QACF,OAAO;YACL,iBAAiB,IAAI,CAAC,CAAC,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAE,OAAO,IAAI,CAAC,OAAO;QACnE;IACF;IAEA,OAAO;QACL,cAAc,YAAY,MAAM;QAChC;QACA,gBAAgB,YAAY,MAAM,GAAG;QACrC;IACF;AACF;AAGO,MAAM,oBAAoB,CAAC,aAA2B;IAC3D,OAAO,YAAY,MAAM,CAAC,CAAA;QACxB,iBAAiB;QACjB,IAAI,QAAQ,SAAS,EAAE;YACrB,MAAM,iBAAiB,IAAI,KAAK,WAAW,gBAAgB;YAC3D,IAAI,iBAAiB,QAAQ,SAAS,CAAC,IAAI,IAAI,iBAAiB,QAAQ,SAAS,CAAC,EAAE,EAAE;gBACpF,OAAO;YACT;QACF;QAEA,qBAAqB;QACrB,IAAI,QAAQ,UAAU,IAAI,QAAQ,UAAU,CAAC,MAAM,GAAG,GAAG;YACvD,IAAI,CAAC,QAAQ,UAAU,CAAC,QAAQ,CAAC,WAAW,QAAQ,GAAG;gBACrD,OAAO;YACT;QACF;QAEA,qBAAqB;QACrB,IAAI,QAAQ,OAAO,IAAI,QAAQ,OAAO,CAAC,MAAM,GAAG,GAAG;YACjD,IAAI,CAAC,QAAQ,OAAO,CAAC,QAAQ,CAAC,WAAW,MAAM,GAAG;gBAChD,OAAO;YACT;QACF;QAEA,mCAAmC;QACnC,IAAI,QAAQ,aAAa,EAAE;YACzB,IAAI,WAAW,SAAS,GAAG,QAAQ,aAAa,CAAC,GAAG,IAAI,WAAW,SAAS,GAAG,QAAQ,aAAa,CAAC,GAAG,EAAE;gBACxG,OAAO;YACT;QACF;QAEA,oBAAoB;QACpB,IAAI,QAAQ,YAAY,EAAE;YACxB,IAAI,WAAW,OAAO,GAAG,QAAQ,YAAY,CAAC,GAAG,IAAI,WAAW,OAAO,GAAG,QAAQ,YAAY,CAAC,GAAG,EAAE;gBAClG,OAAO;YACT;QACF;QAEA,OAAO;IACT;AACF;AAGO,MAAM,yBAAyB,CAAC;IACrC,MAAM,cAAc,IAAI;IAExB,YAAY,OAAO,CAAC,CAAA;QAClB,MAAM,OAAO,IAAI,KAAK,WAAW,gBAAgB;QACjD,MAAM,WAAW,GAAG,KAAK,WAAW,GAAG,CAAC,EAAE,OAAO,KAAK,QAAQ,KAAK,GAAG,QAAQ,CAAC,GAAG,MAAM;QAExF,MAAM,WAAW,YAAY,GAAG,CAAC,aAAa;YAAE,OAAO;YAAG,SAAS;QAAE;QACrE,YAAY,GAAG,CAAC,UAAU;YACxB,OAAO,SAAS,KAAK,GAAG;YACxB,SAAS,SAAS,OAAO,GAAG,WAAW,OAAO;QAChD;IACF;IAEA,OAAO,MAAM,IAAI,CAAC,YAAY,OAAO,IAClC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,GAAK,EAAE,aAAa,CAAC,IACnC,GAAG,CAAC,CAAC,CAAC,OAAO,KAAK,GAAK,CAAC;YACvB;YACA,OAAO,KAAK,KAAK;YACjB,SAAS,KAAK,OAAO;QACvB,CAAC;AACL;AAGO,MAAM,6BAA6B,CAAC,aAA2B,QAAgB,EAAE;IACtF,OAAO,YACJ,IAAI,CAAC,CAAC,GAAG,IAAM,EAAE,OAAO,GAAG,EAAE,OAAO,EACpC,KAAK,CAAC,GAAG;AACd;AAGO,MAAM,+BAA+B,CAAC,aAA2B,QAAgB,EAAE;IACxF,OAAO,YACJ,IAAI,CAAC,CAAC,GAAG,IAAM,EAAE,SAAS,GAAG,EAAE,SAAS,EACxC,KAAK,CAAC,GAAG;AACd;AAGO,MAAM,wBAAwB,CAAC;IACpC,MAAM,eAAe,YAAY,MAAM,CAAC,CAAC,KAAK,IAAM,MAAM,EAAE,OAAO,EAAE;IACrE,MAAM,iBAAiB,YAAY,MAAM,CAAC,CAAC,KAAK,IAAM,MAAM,EAAE,SAAS,EAAE;IACzE,MAAM,aAAa,YAAY,MAAM,CAAC,CAAC,KAAK,IAAM,MAAM,EAAE,SAAS,EAAE;IAErE,MAAM,cAAc,YAAY,MAAM,CAAC,CAAA,IAAK,EAAE,MAAM,KAAK,UAAU,MAAM;IACzE,MAAM,gBAAgB,YAAY,MAAM,CAAC,CAAA,IAAK,EAAE,MAAM,KAAK,YAAY,MAAM;IAC7E,MAAM,iBAAiB,YAAY,MAAM,CAAC,CAAA,IAAK,EAAE,MAAM,KAAK,aAAa,MAAM;IAE/E,OAAO;QACL,kBAAkB,YAAY,MAAM;QACpC;QACA;QACA;QACA,gBAAgB,YAAY,MAAM,GAAG,IAAI,eAAe,YAAY,MAAM,GAAG;QAC7E,kBAAkB,YAAY,MAAM,GAAG,IAAI,iBAAiB,YAAY,MAAM,GAAG;QACjF,oBAAoB;YAClB,QAAQ;YACR,UAAU;YACV,WAAW;QACb;IACF;AACF","debugId":null}}]
}