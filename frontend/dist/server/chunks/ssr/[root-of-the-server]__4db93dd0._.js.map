{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/projects/hakaton/frontend/src/app/lib/api-client.ts"],"sourcesContent":["// API клиент для работы с бэкендом\r\n\r\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:4000/api';\r\n\r\n// Функция для получения токена из куки\r\nfunction getAuthToken(): string | null {\r\n  if (typeof document === 'undefined') return null;\r\n\r\n  const cookies = document.cookie.split(';');\r\n  for (const cookie of cookies) {\r\n    const [name, value] = cookie.trim().split('=');\r\n    if (name === 'token' || name === 'auth_token') {\r\n      return value;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n// Функция для создания headers с авторизацией\r\nfunction getHeaders(): HeadersInit {\r\n  const headers: HeadersInit = {\r\n    'Content-Type': 'application/json',\r\n  };\r\n\r\n  const token = getAuthToken();\r\n  if (token) {\r\n    headers['Authorization'] = `Bearer ${token}`;\r\n  }\r\n\r\n  return headers;\r\n}\r\n\r\nexport interface ApiResponse<T> {\r\n  success: boolean;\r\n  message?: string;\r\n  data?: T;\r\n  count?: number;\r\n}\r\n\r\nexport interface UploadResponse {\r\n  success: boolean;\r\n  message: string;\r\n  processedCount: number;\r\n  errorCount: number;\r\n  errors: string[];\r\n}\r\n\r\n// Загрузка файла\r\nexport const uploadFile = async (file: File): Promise<UploadResponse> => {\r\n  const formData = new FormData();\r\n  formData.append('file', file);\r\n\r\n  const token = getAuthToken();\r\n  const headers: HeadersInit = {};\r\n  if (token) {\r\n    headers['Authorization'] = `Bearer ${token}`;\r\n  }\r\n\r\n  const response = await fetch(`${API_BASE_URL}/upload`, {\r\n    method: 'POST',\r\n    body: formData,\r\n    headers,\r\n    credentials: 'include',\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Ошибка загрузки: ${response.statusText}`);\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\n// Получение всех предприятий с фильтрами\r\nexport const getEnterprises = async (filters?: {\r\n  industries?: string[];\r\n  regions?: string[];\r\n  status?: string;\r\n  minEmployees?: number;\r\n  maxEmployees?: number;\r\n  minRevenue?: number;\r\n  maxRevenue?: number;\r\n}) => {\r\n  const params = new URLSearchParams();\r\n\r\n  if (filters?.industries) {\r\n    filters.industries.forEach(industry => params.append('industries', industry));\r\n  }\r\n  if (filters?.regions) {\r\n    filters.regions.forEach(region => params.append('regions', region));\r\n  }\r\n  if (filters?.status) {\r\n    params.append('status', filters.status);\r\n  }\r\n  if (filters?.minEmployees !== undefined) {\r\n    params.append('minEmployees', filters.minEmployees.toString());\r\n  }\r\n  if (filters?.maxEmployees !== undefined) {\r\n    params.append('maxEmployees', filters.maxEmployees.toString());\r\n  }\r\n  if (filters?.minRevenue !== undefined) {\r\n    params.append('minRevenue', filters.minRevenue.toString());\r\n  }\r\n  if (filters?.maxRevenue !== undefined) {\r\n    params.append('maxRevenue', filters.maxRevenue.toString());\r\n  }\r\n\r\n  const url = `${API_BASE_URL}/enterprises${params.toString() ? '?' + params.toString() : ''}`;\r\n  const response = await fetch(url, {\r\n    headers: getHeaders(),\r\n    credentials: 'include',\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Ошибка получения данных: ${response.statusText}`);\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\n// Получение предприятия по ID\r\nexport const getEnterpriseById = async (id: string) => {\r\n  const response = await fetch(`${API_BASE_URL}/enterprises/${id}`, {\r\n    headers: getHeaders(),\r\n    credentials: 'include',\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Ошибка получения данных: ${response.statusText}`);\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\n// Получение статистики\r\nexport const getStatistics = async () => {\r\n  const response = await fetch(`${API_BASE_URL}/statistics`, {\r\n    headers: getHeaders(),\r\n    credentials: 'include',\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Ошибка получения статистики: ${response.statusText}`);\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\n// Очистка всех данных\r\nexport const clearAllData = async () => {\r\n  const response = await fetch(`${API_BASE_URL}/enterprises`, {\r\n    method: 'DELETE',\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Ошибка очистки данных: ${response.statusText}`);\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\n// Проверка здоровья API\r\nexport const checkHealth = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/health`);\r\n    return response.ok;\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 142, "column": 0}, "map": {"version":3,"sources":["file:///C:/projects/hakaton/frontend/src/app/lib/data-utils.ts"],"sourcesContent":["import * as XLSX from 'xlsx';\r\nimport Papa from 'papaparse';\r\nimport { Enterprise, UploadResult } from '../types/enterprise';\r\n\r\n// Московские регионы\r\nexport const MOSCOW_REGIONS = [\r\n  'Центральный',\r\n  'Северный',\r\n  'Северо-Восточный',\r\n  'Восточный',\r\n  'Юго-Восточный',\r\n  'Южный',\r\n  'Юго-Западный',\r\n  'Западный',\r\n  'Северо-Западный',\r\n  'Новомосковский',\r\n  'Троицкий'\r\n];\r\n\r\n// Основные отрасли промышленности\r\nexport const INDUSTRIES = [\r\n  'Машиностроение',\r\n  'Пищевая промышленность',\r\n  'Химическая промышленность',\r\n  'Текстильная промышленность',\r\n  'Металлургия',\r\n  'Электроника',\r\n  'Строительные материалы',\r\n  'Фармацевтика',\r\n  'Автомобилестроение',\r\n  'Полиграфия',\r\n  'Другое'\r\n];\r\n\r\n// Валидация данных предприятия\r\nexport const validateEnterprise = (data: Record<string, unknown>): { isValid: boolean; errors: string[] } => {\r\n  const errors: string[] = [];\r\n\r\n  if (!data.name || typeof data.name !== 'string') {\r\n    errors.push('Некорректное название предприятия');\r\n  }\r\n\r\n  if (!data.industry || !INDUSTRIES.includes(data.industry as string)) {\r\n    errors.push('Некорректная отрасль');\r\n  }\r\n\r\n  if (!data.region || !MOSCOW_REGIONS.includes(data.region as string)) {\r\n    errors.push('Некорректный регион');\r\n  }\r\n\r\n  if (!data.employees || Number(data.employees) < 0) {\r\n    errors.push('Некорректное количество сотрудников');\r\n  }\r\n\r\n  if (!data.revenue || Number(data.revenue) < 0) {\r\n    errors.push('Некорректная выручка');\r\n  }\r\n\r\n  const contactInfo = data.contactInfo as Record<string, unknown> | undefined;\r\n  if (!contactInfo?.address) {\r\n    errors.push('Отсутствует адрес');\r\n  }\r\n\r\n  return {\r\n    isValid: errors.length === 0,\r\n    errors\r\n  };\r\n};\r\n\r\n// Парсинг CSV файла\r\nexport const parseCSV = (file: File): Promise<UploadResult> => {\r\n  return new Promise((resolve) => {\r\n    Papa.parse(file, {\r\n      header: true,\r\n      complete: (results) => {\r\n        const enterprises: Enterprise[] = [];\r\n        const errors: string[] = [];\r\n        let errorCount = 0;\r\n\r\n        results.data.forEach((row: unknown, index: number) => {\r\n          const rowData = row as Record<string, unknown>;\r\n          const validation = validateEnterprise(rowData);\r\n\r\n          if (validation.isValid) {\r\n            const enterprise: Enterprise = {\r\n              id: crypto.randomUUID(),\r\n              name: String(rowData.name),\r\n              industry: String(rowData.industry),\r\n              region: String(rowData.region),\r\n              employees: parseInt(String(rowData.employees)) || 0,\r\n              revenue: parseFloat(String(rowData.revenue)) || 0,\r\n              taxesPaid: parseFloat(String(rowData.taxesPaid)) || 0,\r\n              registrationDate: new Date(String(rowData.registrationDate) || Date.now()),\r\n              lastUpdated: new Date(),\r\n              status: (rowData.status as 'active' | 'inactive' | 'suspended') || 'active',\r\n              contactInfo: {\r\n                address: String(rowData.address),\r\n                phone: String(rowData.phone || ''),\r\n                email: String(rowData.email || '')\r\n              }\r\n            };\r\n            enterprises.push(enterprise);\r\n          } else {\r\n            errorCount++;\r\n            errors.push(`Строка ${index + 1}: ${validation.errors.join(', ')}`);\r\n          }\r\n        });\r\n\r\n        resolve({\r\n          success: true,\r\n          message: `Обработано ${enterprises.length} записей из ${results.data.length}`,\r\n          processedCount: enterprises.length,\r\n          errorCount,\r\n          errors,\r\n          data: enterprises\r\n        });\r\n      },\r\n      error: (error) => {\r\n        resolve({\r\n          success: false,\r\n          message: `Ошибка парсинга CSV: ${error.message}`,\r\n          processedCount: 0,\r\n          errorCount: 1,\r\n          errors: [error.message]\r\n        });\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n// Парсинг Excel файла\r\nexport const parseExcel = (file: File): Promise<UploadResult> => {\r\n  return new Promise((resolve) => {\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = (e) => {\r\n      try {\r\n        const data = e.target?.result;\r\n        const workbook = XLSX.read(data, { type: 'binary' });\r\n        const sheetName = workbook.SheetNames[0];\r\n        const worksheet = workbook.Sheets[sheetName];\r\n        const jsonData = XLSX.utils.sheet_to_json(worksheet);\r\n\r\n        const enterprises: Enterprise[] = [];\r\n        const errors: string[] = [];\r\n        let errorCount = 0;\r\n\r\n        jsonData.forEach((row: unknown, index: number) => {\r\n          const rowData = row as Record<string, unknown>;\r\n          const validation = validateEnterprise(rowData);\r\n\r\n          if (validation.isValid) {\r\n            const enterprise: Enterprise = {\r\n              id: crypto.randomUUID(),\r\n              name: String(rowData.name),\r\n              industry: String(rowData.industry),\r\n              region: String(rowData.region),\r\n              employees: parseInt(String(rowData.employees)) || 0,\r\n              revenue: parseFloat(String(rowData.revenue)) || 0,\r\n              taxesPaid: parseFloat(String(rowData.taxesPaid)) || 0,\r\n              registrationDate: new Date(String(rowData.registrationDate) || Date.now()),\r\n              lastUpdated: new Date(),\r\n              status: (rowData.status as 'active' | 'inactive' | 'suspended') || 'active',\r\n              contactInfo: {\r\n                address: String(rowData.address),\r\n                phone: String(rowData.phone || ''),\r\n                email: String(rowData.email || '')\r\n              }\r\n            };\r\n            enterprises.push(enterprise);\r\n          } else {\r\n            errorCount++;\r\n            errors.push(`Строка ${index + 1}: ${validation.errors.join(', ')}`);\r\n          }\r\n        });\r\n\r\n        resolve({\r\n          success: true,\r\n          message: `Обработано ${enterprises.length} записей из ${jsonData.length}`,\r\n          processedCount: enterprises.length,\r\n          errorCount,\r\n          errors,\r\n          data: enterprises\r\n        });\r\n      } catch (error) {\r\n        resolve({\r\n          success: false,\r\n          message: `Ошибка парсинга Excel: ${(error as Error).message}`,\r\n          processedCount: 0,\r\n          errorCount: 1,\r\n          errors: [(error as Error).message]\r\n        });\r\n      }\r\n    };\r\n\r\n    reader.readAsBinaryString(file);\r\n  });\r\n};\r\n\r\n// Форматирование чисел\r\nexport const formatNumber = (num: number): string => {\r\n  return new Intl.NumberFormat('ru-RU').format(num);\r\n};\r\n\r\n// Форматирование валюты\r\nexport const formatCurrency = (amount: number): string => {\r\n  return new Intl.NumberFormat('ru-RU', {\r\n    style: 'currency',\r\n    currency: 'RUB',\r\n    maximumFractionDigits: 0,\r\n    minimumFractionDigits: 0\r\n  }).format(amount);\r\n};\r\n\r\n// Компактное форматирование валюты для карточек (без пробелов, с сокращениями)\r\nexport const formatCurrencyCompact = (amount: number): string => {\r\n  if (amount >= 1_000_000_000) {\r\n    return `${(amount / 1_000_000_000).toFixed(1)}млрд₽`;\r\n  } else if (amount >= 1_000_000) {\r\n    return `${(amount / 1_000_000).toFixed(1)}млн₽`;\r\n  } else if (amount >= 1_000) {\r\n    return `${(amount / 1_000).toFixed(0)}тыс₽`;\r\n  }\r\n  return `${amount}₽`;\r\n};\r\n\r\n// Генерация случайных данных для демонстрации\r\nexport const generateSampleData = (count: number = 100): Enterprise[] => {\r\n  const sampleData: Enterprise[] = [];\r\n\r\n  for (let i = 0; i < count; i++) {\r\n    const enterprise: Enterprise = {\r\n      id: crypto.randomUUID(),\r\n      name: `Предприятие ${i + 1}`,\r\n      industry: INDUSTRIES[Math.floor(Math.random() * INDUSTRIES.length)],\r\n      region: MOSCOW_REGIONS[Math.floor(Math.random() * MOSCOW_REGIONS.length)],\r\n      employees: Math.floor(Math.random() * 1000) + 10,\r\n      revenue: Math.floor(Math.random() * 100000000) + 1000000,\r\n      taxesPaid: Math.floor(Math.random() * 10000000) + 100000,\r\n      registrationDate: new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000 * 5),\r\n      lastUpdated: new Date(),\r\n      status: Math.random() > 0.1 ? 'active' : Math.random() > 0.5 ? 'inactive' : 'suspended',\r\n      contactInfo: {\r\n        address: `Москва, улица ${i + 1}, дом ${Math.floor(Math.random() * 100) + 1}`,\r\n        phone: `+7-495-${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 90) + 10}`,\r\n        email: `contact${i + 1}@enterprise.ru`\r\n      }\r\n    };\r\n    sampleData.push(enterprise);\r\n  }\r\n\r\n  return sampleData;\r\n};\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 390, "column": 0}, "map": {"version":3,"sources":["file:///C:/projects/hakaton/frontend/src/app/map/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport dynamic from 'next/dynamic';\r\nimport { MapPin, Filter, X, Loader2, Building2, Users, DollarSign } from 'lucide-react';\r\nimport { Enterprise } from '../types/enterprise';\r\nimport { getEnterprises } from '../lib/api-client';\r\nimport { INDUSTRIES, MOSCOW_REGIONS, formatNumber, formatCurrency } from '../lib/data-utils';\r\n\r\n// Динамический импорт карты (только на клиенте)\r\nconst MapView = dynamic(() => import('./MapView'), {\r\n  ssr: false,\r\n  loading: () => (\r\n    <div className=\"flex items-center justify-center h-full\">\r\n      <Loader2 className=\"w-8 h-8 text-blue-600 animate-spin\" />\r\n    </div>\r\n  )\r\n});\r\n\r\nexport default function MapPage() {\r\n  const [enterprises, setEnterprises] = useState<Enterprise[]>([]);\r\n  const [filteredEnterprises, setFilteredEnterprises] = useState<Enterprise[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [showFilters, setShowFilters] = useState(false);\r\n  const [selectedRegions, setSelectedRegions] = useState<string[]>([]);\r\n  const [selectedIndustries, setSelectedIndustries] = useState<string[]>([]);\r\n  const [selectedEnterprise, setSelectedEnterprise] = useState<Enterprise | null>(null);\r\n\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const response = await getEnterprises();\r\n\r\n        if (response.success && response.data) {\r\n          // Преобразуем данные и нормализуем типы\r\n          const normalizedData = response.data.map(enterprise => ({\r\n            ...enterprise,\r\n            // Принудительно преобразуем координаты в числа\r\n            latitude: enterprise.latitude !== null && enterprise.latitude !== undefined\r\n              ? Number(enterprise.latitude)\r\n              : null,\r\n            longitude: enterprise.longitude !== null && enterprise.longitude !== undefined\r\n              ? Number(enterprise.longitude)\r\n              : null,\r\n            // Преобразуем даты из строк\r\n            registrationDate: new Date(enterprise.registrationDate),\r\n            lastUpdated: new Date(enterprise.lastUpdated)\r\n          }));\r\n\r\n          setEnterprises(normalizedData);\r\n          setFilteredEnterprises(normalizedData);\r\n        }\r\n      } catch (err) {\r\n        console.error('Ошибка загрузки данных:', err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let filtered = enterprises;\r\n\r\n    if (selectedRegions.length > 0) {\r\n      filtered = filtered.filter(e => selectedRegions.includes(e.region));\r\n    }\r\n\r\n    if (selectedIndustries.length > 0) {\r\n      filtered = filtered.filter(e => selectedIndustries.includes(e.industry));\r\n    }\r\n\r\n    setFilteredEnterprises(filtered);\r\n  }, [enterprises, selectedRegions, selectedIndustries]);\r\n\r\n  const toggleRegion = (region: string) => {\r\n    setSelectedRegions(prev =>\r\n      prev.includes(region)\r\n        ? prev.filter(r => r !== region)\r\n        : [...prev, region]\r\n    );\r\n  };\r\n\r\n  const toggleIndustry = (industry: string) => {\r\n    setSelectedIndustries(prev =>\r\n      prev.includes(industry)\r\n        ? prev.filter(i => i !== industry)\r\n        : [...prev, industry]\r\n    );\r\n  };\r\n\r\n  const clearFilters = () => {\r\n    setSelectedRegions([]);\r\n    setSelectedIndustries([]);\r\n  };\r\n\r\n  const enterprisesWithCoordinates = filteredEnterprises.filter(\r\n    e => e.latitude !== null && e.latitude !== undefined &&\r\n         e.longitude !== null && e.longitude !== undefined\r\n  );\r\n\r\n  const hasActiveFilters = selectedRegions.length > 0 || selectedIndustries.length > 0;\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-screen\">\r\n        <div className=\"text-center\">\r\n          <Loader2 className=\"w-12 h-12 text-blue-600 animate-spin mx-auto mb-4\" />\r\n          <p className=\"text-lg text-gray-600\">Загрузка данных о предприятиях...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"h-screen flex flex-col\">\r\n      {/* Заголовок */}\r\n      <div className=\"bg-white border-b border-gray-200 px-6 py-4 flex items-center justify-between\">\r\n        <div className=\"flex items-center space-x-3\">\r\n          <div className=\"flex items-center justify-center w-10 h-10 bg-blue-100 rounded-lg\">\r\n            <MapPin className=\"w-6 h-6 text-blue-600\" />\r\n          </div>\r\n          <div>\r\n            <h1 className=\"text-2xl font-bold text-gray-900\">Карта предприятий</h1>\r\n            <p className=\"text-sm text-gray-600\">\r\n              Показано {enterprisesWithCoordinates.length} из {filteredEnterprises.length} предприятий\r\n              {enterprisesWithCoordinates.length < filteredEnterprises.length && (\r\n                <span className=\"text-orange-600 ml-2\">\r\n                  ({filteredEnterprises.length - enterprisesWithCoordinates.length} без координат)\r\n                </span>\r\n              )}\r\n            </p>\r\n          </div>\r\n        </div>\r\n\r\n        <button\r\n          onClick={() => setShowFilters(!showFilters)}\r\n          className={`flex items-center space-x-2 px-4 py-2 rounded-lg transition-colors ${\r\n            showFilters || hasActiveFilters\r\n              ? 'bg-blue-600 text-white'\r\n              : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\r\n          }`}\r\n        >\r\n          <Filter className=\"w-5 h-5\" />\r\n          <span>Фильтры</span>\r\n          {hasActiveFilters && (\r\n            <span className=\"bg-white text-blue-600 px-2 py-0.5 rounded-full text-xs font-medium\">\r\n              {selectedRegions.length + selectedIndustries.length}\r\n            </span>\r\n          )}\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"flex-1 flex overflow-hidden\">\r\n        {/* Панель фильтров */}\r\n        {showFilters && (\r\n          <div className=\"w-80 bg-white border-r border-gray-200 overflow-y-auto\">\r\n            <div className=\"p-6\">\r\n              <div className=\"flex items-center justify-between mb-6\">\r\n                <h2 className=\"text-lg font-semibold text-gray-900\">Фильтры</h2>\r\n                {hasActiveFilters && (\r\n                  <button\r\n                    onClick={clearFilters}\r\n                    className=\"text-sm text-blue-600 hover:text-blue-700 font-medium\"\r\n                  >\r\n                    Сбросить все\r\n                  </button>\r\n                )}\r\n              </div>\r\n\r\n              {/* Фильтр по регионам */}\r\n              <div className=\"mb-6\">\r\n                <h3 className=\"text-sm font-semibold text-gray-700 mb-3\">Регионы Москвы</h3>\r\n                <div className=\"space-y-2 max-h-64 overflow-y-auto\">\r\n                  {MOSCOW_REGIONS.map(region => {\r\n                    const count = enterprises.filter(e => e.region === region).length;\r\n                    const isSelected = selectedRegions.includes(region);\r\n\r\n                    return (\r\n                      <label\r\n                        key={region}\r\n                        className={`flex items-center justify-between p-2 rounded-lg cursor-pointer transition-colors ${\r\n                          isSelected ? 'bg-blue-50 border border-blue-200' : 'hover:bg-gray-50'\r\n                        }`}\r\n                      >\r\n                        <div className=\"flex items-center space-x-3\">\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            checked={isSelected}\r\n                            onChange={() => toggleRegion(region)}\r\n                            className=\"w-4 h-4 text-blue-600 rounded focus:ring-blue-500\"\r\n                          />\r\n                          <span className={`text-sm ${isSelected ? 'text-blue-900 font-medium' : 'text-gray-700'}`}>\r\n                            {region}\r\n                          </span>\r\n                        </div>\r\n                        <span className=\"text-xs text-gray-500\">{count}</span>\r\n                      </label>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </div>\r\n\r\n              {/* Фильтр по отраслям */}\r\n              <div>\r\n                <h3 className=\"text-sm font-semibold text-gray-700 mb-3\">Отрасли</h3>\r\n                <div className=\"space-y-2 max-h-64 overflow-y-auto\">\r\n                  {INDUSTRIES.map(industry => {\r\n                    const count = enterprises.filter(e => e.industry === industry).length;\r\n                    const isSelected = selectedIndustries.includes(industry);\r\n\r\n                    return (\r\n                      <label\r\n                        key={industry}\r\n                        className={`flex items-center justify-between p-2 rounded-lg cursor-pointer transition-colors ${\r\n                          isSelected ? 'bg-blue-50 border border-blue-200' : 'hover:bg-gray-50'\r\n                        }`}\r\n                      >\r\n                        <div className=\"flex items-center space-x-3\">\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            checked={isSelected}\r\n                            onChange={() => toggleIndustry(industry)}\r\n                            className=\"w-4 h-4 text-blue-600 rounded focus:ring-blue-500\"\r\n                          />\r\n                          <span className={`text-sm ${isSelected ? 'text-blue-900 font-medium' : 'text-gray-700'}`}>\r\n                            {industry}\r\n                          </span>\r\n                        </div>\r\n                        <span className=\"text-xs text-gray-500\">{count}</span>\r\n                      </label>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Основная область с картой */}\r\n        <div className=\"flex-1 relative\">\r\n          <MapView\r\n            enterprises={enterprisesWithCoordinates}\r\n            onMarkerClick={setSelectedEnterprise}\r\n          />\r\n        </div>\r\n\r\n        {/* Боковая панель с информацией о выбранном предприятии */}\r\n        {selectedEnterprise && (\r\n          <div className=\"w-96 bg-white border-l border-gray-200 overflow-y-auto\">\r\n            <div className=\"p-6\">\r\n              <div className=\"flex items-start justify-between mb-4\">\r\n                <h2 className=\"text-xl font-bold text-gray-900 pr-8\">\r\n                  {selectedEnterprise.name}\r\n                </h2>\r\n                <button\r\n                  onClick={() => setSelectedEnterprise(null)}\r\n                  className=\"text-gray-400 hover:text-gray-600 transition-colors\"\r\n                >\r\n                  <X className=\"w-6 h-6\" />\r\n                </button>\r\n              </div>\r\n\r\n              <div className=\"space-y-4\">\r\n                <div>\r\n                  <div className=\"flex items-center space-x-2 text-sm text-gray-500 mb-1\">\r\n                    <Building2 className=\"w-4 h-4\" />\r\n                    <span>Отрасль</span>\r\n                  </div>\r\n                  <p className=\"text-gray-900 font-medium\">{selectedEnterprise.industry}</p>\r\n                </div>\r\n\r\n                <div>\r\n                  <div className=\"flex items-center space-x-2 text-sm text-gray-500 mb-1\">\r\n                    <MapPin className=\"w-4 h-4\" />\r\n                    <span>Регион</span>\r\n                  </div>\r\n                  <p className=\"text-gray-900 font-medium\">{selectedEnterprise.region}</p>\r\n                </div>\r\n\r\n                <div>\r\n                  <div className=\"flex items-center space-x-2 text-sm text-gray-500 mb-1\">\r\n                    <MapPin className=\"w-4 h-4\" />\r\n                    <span>Адрес</span>\r\n                  </div>\r\n                  <p className=\"text-gray-900\">{selectedEnterprise.contactInfo.address}</p>\r\n                </div>\r\n\r\n                <div className=\"grid grid-cols-2 gap-4 pt-4 border-t\">\r\n                  <div>\r\n                    <div className=\"flex items-center space-x-2 text-sm text-gray-500 mb-1\">\r\n                      <Users className=\"w-4 h-4\" />\r\n                      <span>Сотрудники</span>\r\n                    </div>\r\n                    <p className=\"text-lg font-bold text-gray-900\">\r\n                      {formatNumber(selectedEnterprise.employees)}\r\n                    </p>\r\n                  </div>\r\n\r\n                  <div>\r\n                    <div className=\"flex items-center space-x-2 text-sm text-gray-500 mb-1\">\r\n                      <DollarSign className=\"w-4 h-4\" />\r\n                      <span>Выручка</span>\r\n                    </div>\r\n                    <p className=\"text-lg font-bold text-gray-900\">\r\n                      {formatCurrency(selectedEnterprise.revenue)}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n\r\n                {selectedEnterprise.contactInfo.phone && (\r\n                  <div className=\"pt-4 border-t\">\r\n                    <p className=\"text-sm text-gray-500 mb-1\">Телефон</p>\r\n                    <a\r\n                      href={`tel:${selectedEnterprise.contactInfo.phone}`}\r\n                      className=\"text-blue-600 hover:text-blue-700 font-medium\"\r\n                    >\r\n                      {selectedEnterprise.contactInfo.phone}\r\n                    </a>\r\n                  </div>\r\n                )}\r\n\r\n                {selectedEnterprise.contactInfo.email && (\r\n                  <div>\r\n                    <p className=\"text-sm text-gray-500 mb-1\">Email</p>\r\n                    <a\r\n                      href={`mailto:${selectedEnterprise.contactInfo.email}`}\r\n                      className=\"text-blue-600 hover:text-blue-700 font-medium break-all\"\r\n                    >\r\n                      {selectedEnterprise.contactInfo.email}\r\n                    </a>\r\n                  </div>\r\n                )}\r\n\r\n                <div className=\"pt-4 border-t\">\r\n                  <p className=\"text-sm text-gray-500 mb-1\">Статус</p>\r\n                  <span className={`inline-block px-3 py-1 rounded-full text-sm font-medium ${\r\n                    selectedEnterprise.status === 'active' \r\n                      ? 'bg-green-100 text-green-800'\r\n                      : selectedEnterprise.status === 'inactive'\r\n                      ? 'bg-gray-100 text-gray-800'\r\n                      : 'bg-yellow-100 text-yellow-800'\r\n                  }`}>\r\n                    {selectedEnterprise.status === 'active' ? 'Активно' :\r\n                     selectedEnterprise.status === 'inactive' ? 'Неактивно' : 'Приостановлено'}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}