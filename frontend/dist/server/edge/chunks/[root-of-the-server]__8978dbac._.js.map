{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { NextResponse, type NextRequest } from 'next/server';\r\n\r\n// Публичные пути, доступные без авторизации\r\nconst PUBLIC_PATHS = ['/login', '/auth/callback', '/api/public'];\r\n\r\n// Префиксы для статических ресурсов\r\nconst ASSET_PREFIXES = [\r\n  '/_next',\r\n  '/favicon.ico',\r\n  '/robots.txt',\r\n  '/sitemap.xml',\r\n  '/file.svg',\r\n  '/globe.svg',\r\n  '/next.svg',\r\n  '/vercel.svg',\r\n  '/window.svg',\r\n];\r\n\r\nconst API_BASE_URL = process.env.API_BASE_URL || 'http://backend:4000';\r\nconst AUTH_LOGIN_URL = process.env.NEXT_PUBLIC_AUTH_URL || 'http://localhost:5000';\r\nconst REQUIRE_AUTH = process.env.REQUIRE_AUTH !== 'false';\r\n\r\nfunction isPublicPath(pathname: string): boolean {\r\n  // Проверяем статические ресурсы\r\n  if (ASSET_PREFIXES.some((prefix) => pathname.startsWith(prefix))) {\r\n    return true;\r\n  }\r\n  // Проверяем публичные пути\r\n  if (PUBLIC_PATHS.some((path) => pathname.startsWith(path))) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport async function middleware(request: NextRequest) {\r\n  // Если авторизация отключена (для разработки)\r\n  if (!REQUIRE_AUTH) {\r\n    return NextResponse.next();\r\n  }\r\n\r\n  const { pathname } = request.nextUrl;\r\n\r\n  // Пропускаем публичные пути и статику\r\n  if (isPublicPath(pathname)) {\r\n    return NextResponse.next();\r\n  }\r\n\r\n  // Проверяем наличие токена в куках\r\n  const authToken = request.cookies.get('token') || request.cookies.get('auth_token');\r\n\r\n  if (!authToken) {\r\n    // Редирект на страницу авторизации\r\n    const loginUrl = new URL(AUTH_LOGIN_URL);\r\n    loginUrl.searchParams.set('returnTo', request.url);\r\n    return NextResponse.redirect(loginUrl);\r\n  }\r\n\r\n  // Опционально: валидация токена на бэкенде\r\n  try {\r\n    const validateUrl = `${API_BASE_URL}/api/auth/validate`;\r\n    const response = await fetch(validateUrl, {\r\n      method: 'GET',\r\n      headers: {\r\n        Cookie: request.headers.get('cookie') || '',\r\n        Authorization: `Bearer ${authToken.value}`,\r\n      },\r\n      cache: 'no-store',\r\n    });\r\n\r\n    if (!response.ok) {\r\n      // Токен невалиден - редирект на логин\r\n      const loginUrl = new URL(AUTH_LOGIN_URL);\r\n      loginUrl.searchParams.set('returnTo', request.url);\r\n\r\n      const redirectResponse = NextResponse.redirect(loginUrl);\r\n      // Удаляем невалидный токен\r\n      redirectResponse.cookies.delete('token');\r\n      redirectResponse.cookies.delete('auth_token');\r\n\r\n      return redirectResponse;\r\n    }\r\n  } catch (error) {\r\n    console.error('Auth validation error:', error);\r\n    // В случае ошибки валидации - пропускаем (чтобы не блокировать при недоступности auth)\r\n    // Либо можно вернуть редирект, если хотите строгую проверку\r\n  }\r\n\r\n  return NextResponse.next();\r\n}\r\n\r\nexport const config = {\r\n  matcher: [\r\n    /*\r\n     * Применяем middleware ко всем путям, кроме:\r\n     * - _next/static (статические файлы)\r\n     * - _next/image (оптимизация изображений)\r\n     * - favicon.ico, другие файлы в public\r\n     */\r\n    '/((?!_next/static|_next/image|favicon.ico|.*\\\\.svg|.*\\\\.png|.*\\\\.jpg).*)',\r\n  ],\r\n};\r\n\r\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;;AAEA,4CAA4C;AAC5C,MAAM,eAAe;IAAC;IAAU;IAAkB;CAAc;AAEhE,oCAAoC;AACpC,MAAM,iBAAiB;IACrB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAED,MAAM,eAAe,QAAQ,GAAG,CAAC,YAAY,IAAI;AACjD,MAAM,iBAAiB,6DAAoC;AAC3D,MAAM,eAAe,QAAQ,GAAG,CAAC,YAAY,KAAK;AAElD,SAAS,aAAa,QAAgB;IACpC,gCAAgC;IAChC,IAAI,eAAe,IAAI,CAAC,CAAC,SAAW,SAAS,UAAU,CAAC,UAAU;QAChE,OAAO;IACT;IACA,2BAA2B;IAC3B,IAAI,aAAa,IAAI,CAAC,CAAC,OAAS,SAAS,UAAU,CAAC,QAAQ;QAC1D,OAAO;IACT;IACA,OAAO;AACT;AAEO,eAAe,WAAW,OAAoB;IACnD,8CAA8C;IAC9C,IAAI,CAAC,cAAc;QACjB,OAAO,gMAAY,CAAC,IAAI;IAC1B;IAEA,MAAM,EAAE,QAAQ,EAAE,GAAG,QAAQ,OAAO;IAEpC,sCAAsC;IACtC,IAAI,aAAa,WAAW;QAC1B,OAAO,gMAAY,CAAC,IAAI;IAC1B;IAEA,mCAAmC;IACnC,MAAM,YAAY,QAAQ,OAAO,CAAC,GAAG,CAAC,YAAY,QAAQ,OAAO,CAAC,GAAG,CAAC;IAEtE,IAAI,CAAC,WAAW;QACd,mCAAmC;QACnC,MAAM,WAAW,IAAI,IAAI;QACzB,SAAS,YAAY,CAAC,GAAG,CAAC,YAAY,QAAQ,GAAG;QACjD,OAAO,gMAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,2CAA2C;IAC3C,IAAI;QACF,MAAM,cAAc,GAAG,aAAa,kBAAkB,CAAC;QACvD,MAAM,WAAW,MAAM,MAAM,aAAa;YACxC,QAAQ;YACR,SAAS;gBACP,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC,aAAa;gBACzC,eAAe,CAAC,OAAO,EAAE,UAAU,KAAK,EAAE;YAC5C;YACA,OAAO;QACT;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,sCAAsC;YACtC,MAAM,WAAW,IAAI,IAAI;YACzB,SAAS,YAAY,CAAC,GAAG,CAAC,YAAY,QAAQ,GAAG;YAEjD,MAAM,mBAAmB,gMAAY,CAAC,QAAQ,CAAC;YAC/C,2BAA2B;YAC3B,iBAAiB,OAAO,CAAC,MAAM,CAAC;YAChC,iBAAiB,OAAO,CAAC,MAAM,CAAC;YAEhC,OAAO;QACT;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;IACxC,uFAAuF;IACvF,4DAA4D;IAC9D;IAEA,OAAO,gMAAY,CAAC,IAAI;AAC1B;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;KAKC,GACD;KACD;AACH"}}]
}